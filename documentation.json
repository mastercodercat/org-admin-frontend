{
    "pipes": [
        {
            "name": "ThousandSuffixesPipe",
            "id": "pipe-ThousandSuffixesPipe-b265ce22065262841f9e6209ea00e66862b2e84a3f02b204c6b51939b916fca49e5395b1fc2a53343332d8f8382db2b0195e6207f7b34d3b18f19a098949b9c9",
            "file": "projects/explorer/src/app/shared/pipes/thousand-suff.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "thousandSuff",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'thousandSuff'\n})\nexport class ThousandSuffixesPipe implements PipeTransform {\n\n  transform(input: any, args?: any): any {\n    let exp;\n    const suffixes = ['K', 'M', 'G', 'T', 'P', 'E'];\n    if (Number.isNaN(input)) {\n      return null;\n    }\n    if (input < 1000) {\n      return input;\n    }\n    exp = Math.floor(Math.log(input) / Math.log(1000));\n    return (input / Math.pow(1000, exp)).toFixed(args) + suffixes[exp - 1];\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Account",
            "id": "interface-Account-3fd2c67b2a13ae6eb8ab3012cbf7a9940cf5db51eaf324edf58a1add0a19bd6ccdde8a5b0f407f7d9a1c058cd7018232e7616c965fc29a56f0aa7661bf2cd7f7",
            "file": "projects/explorer/src/app/admin/admin.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AdminService } from '../shared/services/admin.service';\nimport { NzMessageService } from 'ng-zorro-antd/message';\nimport mappingOf50States from './listOf50States';\nimport {isDigit} from 'codelyzer/angular/styles/chars';\n\nexport enum Status {\n  Active,\n  Unverified,\n  Blocked,\n}\n\nexport interface User {\n  userId: string;\n  firstName: string;\n  lastName: string;\n  avatar: string;\n  email: string;\n  phoneNumber: number;\n  emailVerified: boolean;\n  userAccounts: any[];\n  superAdmin: boolean;\n}\n\nexport interface Account {\n  id: string;\n  name: string;\n  segment: string[];\n  superAdmin?: boolean;\n  users: User[];\n  isDisabled: boolean;\n  status: {[userId: string]: Status};\n}\n\n\n@Component({\n  selector: 'exp-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss']\n})\nexport class AdminComponent implements OnInit {\n  statusType = Status;\n  accountsLoading = false;\n  expandedAccountId = '';\n  newAccountRowIsHidden = true;\n  newAccountProcessing = false;\n  inputAccountName = '';\n  selectedSegments: string[] = [];\n  mappingOf50States: any;\n  listOfSegmentOptions: string[] = [];\n  usersLoading = false;\n  inputEmailValue = '';\n  inputNameValue = '';\n  editId = '';\n  editName = '';\n  showActionMenu: {[userId: string]: boolean} = {};\n  showPasswordResetAlert = false;\n  allChecked = false;\n  setOfCheckedId = new Set<string>();\n  currentPageUsers: User[] = [];\n  indeterminate = false;\n  accounts: Account[] = [{\n    name: 'Super Admins',\n    segment: [],\n    superAdmin: true,\n    users: [],\n    id: '1',\n    status: {},\n    isDisabled: false,\n  }];\n  users: User[] = [];\n\n  constructor(private adminService: AdminService, private message: NzMessageService) { }\n\n  ngOnInit(): void {\n    this.mappingOf50States = mappingOf50States;\n    this.accountsLoading = true;\n    this.listOfSegmentOptions = Object.keys(mappingOf50States);\n    this.adminService.getAccounts().subscribe(accounts => {\n      accounts.forEach((act: Account) => {act.users = []; });\n      this.accounts = [...this.accounts, ...accounts];\n      this.adminService.getUsers().subscribe(users => {\n        this.users = users;\n        this.assignUsersToAccounts();\n      });\n    });\n  }\n\n  addAccount(name: string, segment: string[]): void {\n    this.newAccountProcessing = true;\n    this.accountsLoading = true;\n    this.adminService.createAccount(name, segment).subscribe(accounts => {\n      this.accountsLoading = false;\n      this.newAccountProcessing = false;\n      this.newAccountRowIsHidden = true;\n      const account = accounts.pop();\n      account.users = [];\n      this.accounts.splice(1, 0, account);\n      this.accounts = [...this.accounts];\n    });\n  }\n\n  disableAccount(account: Account, isActive: boolean): void {\n    this.accountsLoading = true;\n    const isDisabled = !isActive;\n    this.adminService.disableAccount(account.id, isDisabled).subscribe(() => {\n      this.accountsLoading = false;\n      account.isDisabled = isDisabled;\n    });\n  }\n\n  assignUsersToAccounts(): void {\n    this.accounts = this.accounts.map((account: Account) => {\n      account.users = this.getUsersForAccount(account);\n      account.status = account.users.reduce((statusObj: any, user) => {\n        statusObj[user.userId] = this.getStatus(user, account.id);\n        return statusObj;\n      }, {});\n      return account;\n    });\n    this.usersLoading = false;\n    this.accountsLoading = false;\n  }\n\n  getUsersForAccount(account: Account): User[] {\n    if (account.superAdmin) {\n      return this.users.filter(user => user.superAdmin);\n    }\n    return this.users.filter( user => {\n      const userBelongsToAccount = user.userAccounts.some(\n        userAccount => userAccount.account === account.id\n      );\n      return userBelongsToAccount;\n    });\n  }\n\n  getStatus(user: User, accountId: string): Status {\n    const userAccount = user.userAccounts.find(account => account.account === accountId);\n\n    if (!user.emailVerified) {\n      return Status.Unverified;\n    }\n\n    if (userAccount && userAccount.blocked) {\n      return Status.Blocked;\n    }\n    return Status.Active;\n  }\n\n  addUser(email: string, userName: string, account: Account): void {\n    const user = this.users.find(potentialUser => potentialUser.email === email);\n    const isSuperAdmin = !!account.superAdmin;\n    this.usersLoading = true;\n    this.inputEmailValue = '';\n    this.inputNameValue = '';\n    const [firstName, lastName] = userName.trim().split(' ');\n    if (account.users.find(accountUser => accountUser === user)) {\n      this.message.error(`${email} is already add to ${account.name}`, { nzDuration: 2500 });\n      this.usersLoading = false;\n    }\n    if (user) {\n      if (isSuperAdmin) {\n        this.adminService.assignSuperAdminToUser(user.userId, true).subscribe(users => {\n          const updatedUser = users.pop();\n          this.updateUserHelper(updatedUser);\n        });\n        return;\n      }\n      this.adminService.addUserToAccount(user.userId, account.id).subscribe(users => {\n        const updatedUser = users.pop();\n        this.updateUserHelper(updatedUser);\n      });\n      return;\n    }\n\n    if (!user){\n      // Only invite if user doesn't exist\n      this.adminService.inviteUser(email, account.id, firstName, lastName, isSuperAdmin).subscribe(users => {\n        const newUser = users.pop();\n        this.users = [...this.users, newUser];\n        this.assignUsersToAccounts();\n      });\n    }\n  }\n\n  startEdit(user: User): void {\n    this.editId = user.userId;\n    this.editName = user.firstName + (user.lastName ? ` ${user.lastName}` : '');\n    return;\n  }\n\n  stopEdit(): void {\n    this.editId = '';\n    this.editName = '';\n    return;\n  }\n\n  saveEdit(user: User): void {\n    this.usersLoading = true;\n    const listOfNames = this.editName.trim().split(' ');\n    if (listOfNames.length > 2) {\n      this.message.error('Please provided only a first name and a last name');\n      this.usersLoading = false;\n      return;\n    }\n    const [firstName, lastName] = listOfNames;\n    this.adminService.updateUser(user.userId, firstName, lastName).subscribe((users: any) => {\n      const updatedUser = users.pop();\n      this.updateUserHelper(updatedUser);\n      this.usersLoading = false;\n    });\n    this.stopEdit();\n  }\n\n  removeUser(userId: string, account: Account): void {\n    this.usersLoading = true;\n    if (account.superAdmin) {\n        this.adminService.assignSuperAdminToUser(userId, false).subscribe((users: any) => {\n          const updatedUser = users.pop();\n          this.updateUserHelper(updatedUser);\n        });\n        return;\n    }\n    this.adminService.removeUserFromAccount(userId, account.id).subscribe((users: any) => {\n      const updatedUser = users.pop();\n      this.updateUserHelper(updatedUser);\n    });\n  }\n\n  blockUser(userId: string, accountId: string, shouldBlock: boolean): void {\n    this.usersLoading = true;\n    this.adminService.blockUserFromAccount(userId, accountId, shouldBlock).subscribe((users: any) => {\n      this.usersLoading = false;\n      const blockedUser = users.pop();\n      this.updateUserHelper(blockedUser);\n    });\n  }\n\n  updateUserHelper(updatedUser: User): void {\n    this.users = this.users.map(user => {\n      if (user.userId === updatedUser.userId) {\n        return updatedUser;\n      }\n      return user;\n    });\n    this.assignUsersToAccounts();\n  }\n\n  resendInvite(email: string, userId: string, accountId: string): void {\n    this.adminService.resendInviteToUser(email, userId, accountId).subscribe(() => {\n      this.message.success(`Invite email sent to ${email}`, { nzDuration: 2500 });\n    });\n  }\n\n  resetPassword(user: any): void {\n    this.adminService.resetPassword(user.userId, user.email).subscribe( UpdatedUser => {\n      this.showPasswordResetAlert = true;\n      setInterval(() => {\n        this.showPasswordResetAlert = false;\n      }, 5000);\n    });\n  }\n\n  updateCheckedSet(userId: string, checked: boolean): void {\n    if (checked) {\n      this.setOfCheckedId.add(userId);\n    } else {\n      this.setOfCheckedId.delete(userId);\n    }\n  }\n\n  onItemChecked(userId: string, checked: boolean): void {\n    this.updateCheckedSet(userId, checked);\n    this.refreshCheckedStatus();\n  }\n\n  refreshCheckedStatus(): void {\n    // this.setOfCheckedId.forEach(item => console.log(item));\n    this.allChecked = this.users.every(({ userId }) => this.setOfCheckedId.has(userId));\n    this.indeterminate = this.users.some(({ userId }) => this.setOfCheckedId.has(userId)) && !this.allChecked;\n  }\n\n  onAllChecked(checked: boolean): void {\n    this.users.forEach(({ userId }) => this.updateCheckedSet(userId, checked));\n    this.refreshCheckedStatus();\n  }\n\n  onExpandChange(accountId: string, checked: boolean): void {\n    this.expandedAccountId = checked ? accountId : '';\n  }\n\n  showNewAccountRow(): void {\n    this.newAccountRowIsHidden = false;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "segment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "superAdmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AccountResponse",
            "id": "interface-AccountResponse-2b1f30951720cdfcbc3f82f5ec61fc6226a313fe2aea17a6d419c29fa0be438cd472b688cccc5a1a84de92b039bd88d1578b2e6672c66f9f55bb5843f60974b5",
            "file": "projects/explorer/src/app/shared/services/admin.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport {last, map} from 'rxjs/operators';\nimport {environment} from '../../../environments/environment';\n\nexport interface AccountResponse {\n  id: string;\n  name: string;\n  segment: string[];\n  isDisabled: boolean;\n}\n\nexport interface UserResponse {\n  user_id: string;\n  email: string;\n  phone_number: number;\n  first_name: string;\n  last_name: string;\n  email_verified: boolean;\n  accounts: any;\n  is_super_admin: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  apiUrl: string = environment.apiURL;\n\n  constructor(private http: HttpClient) {\n    if (environment.apiURL === '{PLACEHOLDER}') {\n      switch (window.location.hostname) {\n        case 'login.civicexplorer.com':\n          this.apiUrl = 'https://api.civicexplorer.com';\n          break;\n        case 'staging-www.civicexplorer.com':\n          this.apiUrl = 'https://staging-api.civicexplorer.com';\n          break;\n        case 'sandbox-www.civicexplorer.com':\n          this.apiUrl = 'https://sandbox-api.civicexplorer.com';\n          break;\n      }\n    }\n  }\n\n  getAccounts(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + '/explorer/account/all')\n    .pipe(map(res => {\n      return res.data.map((data: AccountResponse) => this.transformAccountData(data));\n    }));\n  }\n\n  createAccount(name: string, segment: string[]): Observable<any> {\n    const body = { name, segment };\n    return this.http.post<any>(this.apiUrl + '/explorer/account/create', body)\n    .pipe(map(res => {\n      return res.data.map((data: AccountResponse) => this.transformAccountData(data));\n    }));\n  }\n\n  disableAccount(accountId: string, isDisabled: boolean): Observable<any> {\n    const body = {id: accountId, isDisabled};\n    return this.http.post<any>(this.apiUrl + '/explorer/account/disable', body)\n    .pipe(map(res => {\n      return res.data.map((data: AccountResponse) => this.transformAccountData(data));\n    }));\n  }\n\n  transformAccountData(accountData: any): any {\n    return {\n      id: accountData.id,\n      name: accountData.name,\n      segment: accountData.segment,\n      isDisabled: accountData.isDisabled\n    };\n  }\n\n  getUsers(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + '/explorer/user/all')\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  updateUser(userId: string, firstName: string, lastName: string): Observable<any> {\n    const body = {user_id: userId,  first_name: firstName, last_name: lastName};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/update', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  inviteUser(email: string, accountId: string, firstName: string, lastName: string, isSuperAdmin: boolean): Observable<any> {\n    const body = { email, account_id: accountId, is_super_admin: isSuperAdmin, first_name: firstName, last_name: lastName};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/invite', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  resendInviteToUser(email: string, userId: string, accountId: string): Observable<any> {\n    const body = { email, user_id: userId, account_id: accountId};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/invite', body);\n  }\n\n  assignSuperAdminToUser(userId: string, isSuperAdmin: boolean): Observable<any> {\n    const body = { user_id: userId, is_super_admin: isSuperAdmin};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/make_super_admin', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  addUserToAccount(userId: string, accountId: string): Observable<any> {\n    const body = { user_id: userId, account_id: accountId };\n    return this.http.post<any>(this.apiUrl + '/explorer/user/add_to_account', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  removeUserFromAccount(userId: string, accountId: string): Observable<any> {\n    const body = { user_id: userId, account_id: accountId };\n    return this.http.post<any>(this.apiUrl + '/explorer/user/remove_from_account', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  blockUserFromAccount(userId: string, accountId: string, shouldBlock: boolean): Observable<any> {\n    const body = {\n      user_id: userId,\n      account_id: accountId,\n      blocked: shouldBlock\n    };\n    return this.http.post<any>(this.apiUrl + '/explorer/user/block_from_account', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  resetPassword(userId: string, email: string): Observable<any> {\n    const body = { email, user_id: userId};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/reset_password', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  transformUserData(userData: any): any {\n    return {\n      userId: userData.user_id,\n      avatar: userData.avatar,\n      email: userData.email,\n      emailVerified: userData.email_verified,\n      phoneNumber: userData.phone_number,\n      firstName: userData.first_name,\n      lastName: userData.last_name,\n      userAccounts: userData.accounts,\n      superAdmin: userData.is_super_admin,\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "segment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AgeCategories",
            "id": "interface-AgeCategories-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "c_18_to_24",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "c_25_to_34",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "c_35_to_44",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "c_45_to_54",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "c_55_to_64",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "c_65_plus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AgeCategories",
            "id": "interface-AgeCategories-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "c_18_to_24",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "c_25_to_34",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "c_35_to_44",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "c_45_to_54",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "c_55_to_64",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "c_65_plus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AgeCategories-1"
        },
        {
            "name": "apiGatewayCustomDomainProps",
            "id": "interface-apiGatewayCustomDomainProps-339b5636508352d71c0e067a877936643e480504f3101bb6cdc6735e4ef699e43bfe8d3baf46c95f2b9859258bdc277d0f548441b21187ae088c6c766780fb6b",
            "file": "infrastructure/lib/constructs/lambda-backed-api-gateway.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport {IFunction} from '@aws-cdk/aws-lambda'\nimport {HttpApi, HttpApiProps, CorsHttpMethod, DomainName, ApiMapping, HttpMethod, HttpNoneAuthorizer} from '@aws-cdk/aws-apigatewayv2'\nimport {LambdaProxyIntegration} from '@aws-cdk/aws-apigatewayv2-integrations';\nimport {HttpJwtAuthorizer, HttpJwtAuthorizerProps } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport {IHostedZone, ARecord, RecordTarget} from '@aws-cdk/aws-route53';\nimport {ApiGatewayv2DomainProperties} from '@aws-cdk/aws-route53-targets';\nimport {ICertificate} from '@aws-cdk/aws-certificatemanager';\n\nexport interface apiGatewayCustomDomainProps  {\n    hostedZone: IHostedZone\n    tlsCertificate: ICertificate\n    subdomain?: string\n}\n\n\nexport interface LambdaApiProps {\n    defaultHandler: IFunction\n    apiName?: string\n    apiGatewayCustomDomainProps?: apiGatewayCustomDomainProps\n    apiGatewayProps?: HttpApiProps\n    authorizerProps?: HttpJwtAuthorizerProps\n    corsAllowedOrigins?: string[]\n}\n\n// Note: this class uses @aws-cdk/aws-apigatewayv2, which is still in an experimental state.\n// If you bump the version of that package, you may need to update the code here to match\n// the new API.\nexport class LambdaApi extends cdk.Construct {\n    public api: HttpApi;\n    public apiGatewayUrl: ARecord | undefined;\n    public authorizer: HttpJwtAuthorizer | undefined;\n    constructor(scope: cdk.Construct, id: string, props: LambdaApiProps ) {\n        super(scope, id);\n\n        let apiGatewayProps: HttpApiProps;\n        this.authorizer = props.authorizerProps !== undefined ? new HttpJwtAuthorizer(props.authorizerProps) : undefined;\n\n        // When we encounter an un-configured route, throw a 404\n        const defaultIntegration = new LambdaProxyIntegration({handler: props.defaultHandler})\n        if(props.apiGatewayProps === undefined) {\n            apiGatewayProps = {\n                apiName: props.apiName,\n                defaultAuthorizer: this.authorizer,\n                defaultIntegration: defaultIntegration,\n                corsPreflight: {\n                    allowMethods: [\n                        CorsHttpMethod.GET,\n                        CorsHttpMethod.PUT,\n                        CorsHttpMethod.POST,\n                        CorsHttpMethod.DELETE\n                    ],\n                    allowOrigins: props.corsAllowedOrigins,\n                    allowHeaders: ['*'],\n                    exposeHeaders: ['origin'],\n                    allowCredentials: false\n                },\n                createDefaultStage: true,\n            };\n        } else {\n            apiGatewayProps = props.apiGatewayProps;\n        }\n\n        this.api = new HttpApi(this, 'HttpApiGateway', apiGatewayProps);\n\n        // Catch all route to enable unauthenticated OPTIONS requests for APIs with a default authorizer.\n        // If you don't have a default authorizer but you do want to serve OPTIONS requests for an endpoint\n        // that does have one, you'll need to configure it explicitly.\n        if (this.authorizer !== undefined){\n            this.api.addRoutes({\n                path: `/{proxy+}`,\n                methods: [\n                    HttpMethod.OPTIONS\n                ],\n                integration: defaultIntegration,\n                authorizer: new HttpNoneAuthorizer()\n            });\n        }\n\n        // Set custom domain name, if defined\n        if (props.apiGatewayCustomDomainProps !== undefined) {\n            const domainName = props.apiGatewayCustomDomainProps.subdomain !== undefined? `${props.apiGatewayCustomDomainProps.subdomain}.${props.apiGatewayCustomDomainProps.hostedZone.zoneName}`: props.apiGatewayCustomDomainProps.hostedZone.zoneName;\n            const domain = new DomainName(this, 'ApiGatewayCustomDomain', {\n                domainName: domainName,\n                certificate: props.apiGatewayCustomDomainProps.tlsCertificate\n            });\n            new ApiMapping(this, 'ApiGatewayApiMapping', {\n                api: this.api,\n                domainName: domain\n            });\n\n            this.apiGatewayUrl =  new ARecord(this, 'APIGatewayAlias', {\n                zone: props.apiGatewayCustomDomainProps.hostedZone,\n                recordName: domainName,\n                target: RecordTarget.fromAlias(new ApiGatewayv2DomainProperties(domain.regionalDomainName, domain.regionalHostedZoneId))\n            });\n        }\n\n    }\n}",
            "properties": [
                {
                    "name": "hostedZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IHostedZone",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "subdomain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tlsCertificate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICertificate",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AppInfrastructureStackProps",
            "id": "interface-AppInfrastructureStackProps-07ecf3d51babdb189b7203e7c8094494519a856eb7f000aa11e1d7284b05cf05ac73e0ca15b1d9dc0da4b9f28d5c199342e406a5ac34c3a4ecaa14f78d4896a8",
            "file": "infrastructure/lib/app-infrastructure-stack.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport * as lambdaWithApiGateway from './constructs/lambda-backed-api-gateway';\nimport { DockerImageCode, DockerImageFunction } from '@aws-cdk/aws-lambda';\nimport {DnsValidatedCertificate, CertificateValidation} from '@aws-cdk/aws-certificatemanager';\nimport { Vpc, SubnetType } from '@aws-cdk/aws-ec2';\nimport { StringParameter } from '@aws-cdk/aws-ssm';\nimport path = require('path')\nimport { IHostedZone } from '@aws-cdk/aws-route53';\nimport { LambdaProxyIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\nimport { HttpMethod, HttpNoneAuthorizer } from '@aws-cdk/aws-apigatewayv2';\nimport { Duration } from '@aws-cdk/core';\n\nexport interface AppInfrastructureStackProps extends cdk.StackProps {\n  stage: string\n  hostedZone?: IHostedZone\n  domainName?: string\n  isDevelopment?: boolean\n}\n\nexport class AppInfrastructureStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props: AppInfrastructureStackProps) {\n    super(scope, id, props);\n\n    const isDevelopment = props.isDevelopment? props.isDevelopment: false\n\n    const cert = props.hostedZone !== undefined ? new DnsValidatedCertificate(this, 'ssl-certificate',\n        {\n          domainName: props.domainName !== undefined? props.domainName: props.hostedZone.zoneName,\n          hostedZone: props.hostedZone,\n          validation: CertificateValidation.fromDns(props.hostedZone),\n          subjectAlternativeNames: [\n            `*.${props.hostedZone.zoneName}`\n          ]\n        }\n      ) : undefined;\n  }\n}\n",
            "properties": [
                {
                    "name": "domainName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "hostedZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IHostedZone",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isDevelopment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "stage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-4ec8c61feb00f3e893f91ba10ccbce71e8b8474c9abf2107e1bb467e7fd7555aa052e91b7280d889d0c6771a9dcdc5e6d7c4b08220c0088b9e8694bde5ab78ee",
            "file": "projects/admin/src/app/store/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { environment } from '../../../environments/environment';\nimport { loginReducer, LoginState } from '../../login/store/reducers/login.reducer';\nimport { userReducer, UserState } from './user.reducer';\n\n\nexport interface AppState {\n  user: UserState;\n  login: LoginState;\n}\n\nexport const reducers: ActionReducerMap<AppState> = {\n  user: userReducer,\n  login: loginReducer,\n};\n\n\nexport const metaReducers: MetaReducer<AppState>[] = !environment.production ? [] : [];\n",
            "properties": [
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginState",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AuthConfig",
            "id": "interface-AuthConfig-9ae49d7fe40416e1e51092f5587d506e8df9ba21a3aa00909770554805f176d3f08fe50fe9bc9142e5750fbbed9a4c845c86a86a90feb49c27c51b1ed426e6af",
            "file": "projects/admin/src/app/shared/services/auth/auth0-variables.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment as env } from '../../../../environments/environment';\n\ninterface AuthConfig {\n  clientId: string;\n  domain: string;\n  apiURL: string;\n  redirectUri: string;\n  responseType: string;\n}\n\nexport const AUTH_CONFIG: AuthConfig = {\n  clientId: env.auth.clientId,\n  domain: env.auth.domain,\n  apiURL: env.apiURL,\n  redirectUri: env.auth.redirectUri,\n  responseType: 'token',\n};\n",
            "properties": [
                {
                    "name": "apiURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "clientId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "domain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "redirectUri",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "responseType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CardSelectedFiltersValue",
            "id": "interface-CardSelectedFiltersValue-7303f34f10f92106bdca073bf9af104667d3f2cefadc6b7fa2d33ffecb209e34f8b2d6bf8c96a9cd89fde0d9c0cf531802c8c3de698ffb9d0a1c73985334e07a",
            "file": "projects/explorer/src/app/shared/models/filters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FilterModel {\n  id: string;\n  filters: any;\n  filter?: FilterOption[];\n}\n\nexport interface FilterOption {\n  label: string;\n  value: CardSelectedFiltersValue | string;\n  checked?: boolean;\n}\n\ninterface CardSelectedFiltersValue {\n  property: string;\n  selected: string | number[];\n}\n\n",
            "properties": [
                {
                    "name": "property",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CivicModel",
            "id": "interface-CivicModel-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "active_participant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "least_engaged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "most_engaged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "occasional_participant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "participant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CivicModel",
            "id": "interface-CivicModel-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "active_participant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "least_engaged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "most_engaged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "occasional_participant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "participant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CivicModel-1"
        },
        {
            "name": "ContinuousIntegrationInfrastructureStackProps",
            "id": "interface-ContinuousIntegrationInfrastructureStackProps-b38b782a9943080fa5c556b6b91c6869827386525bfad0c32b921503f4197d8150eb47476a641c2868763cbd44d20f59b3e382162bac2cd1df66f58708238030",
            "file": "infrastructure/lib/ci-infrastructure-stack.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport { OpenIdConnectProvider, OpenIdConnectPrincipal, Role, ManagedPolicy} from '@aws-cdk/aws-iam';\nimport { join } from 'path';\nimport { CfnOutput, Duration } from '@aws-cdk/core';\nimport { CONSTANTS } from './config';\nimport {StringParameter} from '@aws-cdk/aws-ssm'\n\n\nexport interface ContinuousIntegrationInfrastructureStackProps extends cdk.StackProps {\n  stage: string;\n}\n\nexport class ContinuousIntegrationInfrastructureStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props: ContinuousIntegrationInfrastructureStackProps) {\n    super(scope, id, props);\n\n    const oidcProviderArn = StringParameter.fromStringParameterAttributes(this, `${CONSTANTS.stackPrefix}-oidc-provider-arn`, {\n      parameterName: `/${props.stage}/shared/config/OIDC_PROVIDER_ARN`,\n      // 'version' can be specified but is optional.\n    }).stringValue;\n    const oidcProvider = OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, `${CONSTANTS.stackPrefix}-oidc-provider`,\n        oidcProviderArn);\n    const bitbucketPipelinesRole = new Role(this, `${CONSTANTS.stackPrefix}-bitbucket-pipelines-role`, {\n      assumedBy: new OpenIdConnectPrincipal(oidcProvider),\n      managedPolicies: [ManagedPolicy.fromAwsManagedPolicyName(\"AdministratorAccess\")],\n      roleName: `${CONSTANTS.stackPrefix}-bitbucket-${props.stage.toLowerCase()}`\n    });\n\n  }\n}\n",
            "properties": [
                {
                    "name": "stage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CustomDomainProps",
            "id": "interface-CustomDomainProps-b24bd7fac82f6251f111fa5db1bf1f02145ccdf88c06dd2601a1f55c01eef9c01918b16eab1fe81f33db8815bd2e198b0a3bc937bae4a4337944f54ba755b9ef",
            "file": "infrastructure/lib/constructs/cloudfront-s3-frontend.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport {Bucket, BucketAccessControl} from '@aws-cdk/aws-s3';\nimport * as s3Deploy from '@aws-cdk/aws-s3-deployment';\nimport { HostedZone, ARecord, RecordTarget, PublicHostedZone } from '@aws-cdk/aws-route53';\nimport { CloudFrontTarget} from '@aws-cdk/aws-route53-targets';\nimport { DnsValidatedCertificate, CertificateValidation, CfnCertificate, ICertificate } from '@aws-cdk/aws-certificatemanager'\nimport {Distribution, AllowedMethods, CachePolicy, CachedMethods, ViewerProtocolPolicy} from '@aws-cdk/aws-cloudfront'\nimport * as CFOrigin from '@aws-cdk/aws-cloudfront-origins'\nimport { join } from 'path';\nimport { CfnOutput, Duration, RemovalPolicy } from '@aws-cdk/core';\nimport { Source } from '@aws-cdk/aws-s3-deployment';\n\n\nexport interface CustomDomainProps {\n  hostedZone: PublicHostedZone,\n  domainNames: string[],\n  certificate: ICertificate,\n}\nexport interface SinglePageAppProps  {\n  customDomainProps?: CustomDomainProps,\n  uploadPrefix?: string,\n  angularOutputDirectory: string,\n}\n\nexport class SinglePageApp extends cdk.Construct {\n  constructor(scope: cdk.Construct, id: string, props: SinglePageAppProps) {\n    super(scope, id);\n\n    // Resources:\n    // Log aggregation bucket (CloudFront logs go here)\n    const logsBucket = new Bucket(this, 'LogBucket', {\n      accessControl: BucketAccessControl.LOG_DELIVERY_WRITE,\n      removalPolicy: cdk.RemovalPolicy.RETAIN // Keep server logs in the event that the stack gets deleted\n    })\n\n    const site = Source.asset(props.angularOutputDirectory, {\n      exclude: ['index.html']\n    })\n\n    const rootDocument = Source.asset(props.angularOutputDirectory, {\n      exclude: ['**', '!index.html']\n    })\n\n    // Site bucket (build artifacts get uploaded here)\n    const siteBucket = new Bucket(this, 'SiteBucket', {\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n      autoDeleteObjects: true,\n      enforceSSL: true,\n      publicReadAccess: false,\n      serverAccessLogsBucket: logsBucket,\n    });\n\n    // Uploads angular build output to S3, prefixed with the uploadPrefix tag for the deploy\n    const siteUpload = new s3Deploy.BucketDeployment(this, 'SiteUpload', {\n      destinationBucket: siteBucket,\n      sources: [site],\n      prune: false, // Don't delete existing files when uploading\n      destinationKeyPrefix: props.uploadPrefix,\n      memoryLimit: 1024\n    });\n\n    // Upload index to bucket root\n    const indexUpload = new s3Deploy.BucketDeployment(this, 'RootDocumentUpload', {\n      destinationBucket: siteBucket,\n      sources: [rootDocument],\n      cacheControl: [s3Deploy.CacheControl.fromString('max-age=0,no-cache,no-store,must-revalidate')],\n      prune: false\n    });\n\n    // Ensure the new site is uploaded before uploading the index\n    indexUpload.node.addDependency(siteUpload)\n\n\n    // Configure CloudFront to request files from the site bucket\n    // The angular app will determine the prefix to request files from\n    const origin = new CFOrigin.S3Origin(siteBucket,{\n      originPath: `/`\n    });\n\n    // Cloudfront CDN\n    const cdn = new Distribution(this, 'Cdn', {\n      enableLogging: true,\n      logBucket: logsBucket,\n      certificate: props.customDomainProps?.certificate,\n      domainNames:  props.customDomainProps?.domainNames,\n      defaultBehavior: {\n        origin: origin,\n        allowedMethods: AllowedMethods.ALLOW_GET_HEAD_OPTIONS,\n        cachePolicy: new CachePolicy(this, 'DefaultCachePolicy', {}),\n        cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,\n        viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n      },\n      additionalBehaviors: {\n        // Don't cache index.html\n        \"index.html\": {\n          origin: origin,\n          allowedMethods: AllowedMethods.ALLOW_GET_HEAD_OPTIONS,\n          cachePolicy: new CachePolicy(this, 'IndexCachePolicy', {\n            minTtl: Duration.seconds(0),\n            maxTtl: Duration.seconds(0),\n            defaultTtl: Duration.seconds(0)\n\n          }),\n          cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,\n          viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n        }\n      },\n      defaultRootObject: 'index.html',\n      errorResponses: [\n        {\n          httpStatus: 403, // S3 API returns 403 instead of 404 for missing files, so we need to return 200 here and allow angular's router to do its thing\n          responseHttpStatus: 200,\n          responsePagePath: '/index.html'\n        },\n        {\n          httpStatus: 500,\n          responsePagePath: '/index.html'\n        }\n      ]\n    });\n\n    props.customDomainProps !== undefined ? new ARecord(this, 'CdnRecord', {\n      target: RecordTarget.fromAlias(new CloudFrontTarget(cdn)),\n      zone: props.customDomainProps.hostedZone\n    }) : console.log('No public hosted zone defined, skipping DNS record creation');\n    cdn.node.addDependency(indexUpload);\n\n    // Outputs\n    new CfnOutput(this, 'SiteBucketName', {\n     value: siteBucket.bucketName,\n     description: 'Bucket where static assets are uploaded',\n    })\n\n    new CfnOutput(this, 'CdnDomainName', {\n      value: cdn.domainName,\n      description: 'Domain name for the CloudFront distribution (to access the site without a custom URL)',\n     })\n\n     new CfnOutput(this, 'DomainName', {\n      value: props.customDomainProps?.domainNames.join(',') || cdn.domainName,\n      description: 'Domain name(s) for the site',\n     })\n\n     new CfnOutput(this, 'LogBucketName', {\n      value: logsBucket.bucketName,\n      description: 'Domain name for the site',\n     })\n  }\n}",
            "properties": [
                {
                    "name": "certificate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICertificate",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "domainNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "hostedZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PublicHostedZone",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Datapoint",
            "id": "interface-Datapoint-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "civic_score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "models",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Models>",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Datapoint",
            "id": "interface-Datapoint-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "civic_score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "models",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Models>",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Datapoint-1"
        },
        {
            "name": "DegreeCategories",
            "id": "interface-DegreeCategories-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "bachelors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "graduate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "high_school",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "less_than_high_school",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "some_college",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DegreeCategories",
            "id": "interface-DegreeCategories-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "bachelors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "graduate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "high_school",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "less_than_high_school",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "some_college",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DegreeCategories-1"
        },
        {
            "name": "DnsInfrastructureStackProps",
            "id": "interface-DnsInfrastructureStackProps-b4aa0b483a02c9a4c2d79c027eb8819b82c3203dd5646a67deb7450bdc057e7039b46c49e3f55dc81025772404a94f7fb00f7c71e9f02862ba4505a1201fdbc6",
            "file": "infrastructure/lib/dns-infrastructure-stack.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport { CrossAccountZoneDelegationRecord, PublicHostedZone } from '@aws-cdk/aws-route53';\nimport { Role, CfnRole, AccountPrincipal, Effect, PolicyStatement} from '@aws-cdk/aws-iam';\nimport { Fn, CfnOutput, RemovalPolicy } from '@aws-cdk/core';\nimport { CONSTANTS } from './config';\n\n\nexport interface DnsInfrastructureStackProps extends cdk.StackProps {\n  domainName: string;\n  trustedAccounts?: string[]\n  parentDomainName?: string\n}\n\n\nexport class DnsInfrastructureStack extends cdk.Stack {\n  public domain: PublicHostedZone;\n  public delegationRole: string;\n  constructor(scope: cdk.Construct, id: string, props: DnsInfrastructureStackProps) {\n    super(scope, id, props);\n\n    const delegateDns = props.parentDomainName !== undefined;\n    const hostedZoneProps = {\n      zoneName: `${props.domainName}`,\n      crossAccountZoneDelegationPrincipal: props.trustedAccounts !== undefined ? new AccountPrincipal(props.trustedAccounts.pop()): undefined,\n      crossAccountZoneDelegationRoleName: props.trustedAccounts !== undefined ? `helm-dns-delegation-role-${this.node.addr.substring(0,10)}`: undefined\n    }\n\n    this.domain = new PublicHostedZone(this, `${CONSTANTS.stackPrefix}-hosted-zone`, hostedZoneProps);\n\n    this.domain.crossAccountZoneDelegationRole?.assumeRolePolicy?.addStatements(\n      new PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        effect: Effect.ALLOW,\n        principals: props.trustedAccounts?.map(element => {\n          return new AccountPrincipal(element)\n        })\n      })\n    )\n\n    if (this.domain.crossAccountZoneDelegationRole !== undefined){\n      this.delegationRole = this.domain.crossAccountZoneDelegationRole.roleName;\n\n      const cfnDelegationRole = this.domain.crossAccountZoneDelegationRole.node.defaultChild as CfnRole;\n      cfnDelegationRole.applyRemovalPolicy(RemovalPolicy.DESTROY);\n      new CfnOutput(this, 'delegation-role-name', {\n        value: this.domain.crossAccountZoneDelegationRole.roleName\n      })\n    }\n\n    if (delegateDns){\n      new CrossAccountZoneDelegationRecord(this, `${CONSTANTS.stackPrefix}-domain-delegation`, {\n        delegatedZone: this.domain,\n        parentHostedZoneName: props.parentDomainName,\n        delegationRole: Role.fromRoleArn(this, 'delegationrole', cdk.Arn.format({\n          resource: 'role',\n          service: 'iam',\n          region: '',\n          account: this.node.tryGetContext('sharedServices').dns.accountId,\n          resourceName: this.node.tryGetContext('sharedServices').dns.delegationRoleName\n        }, this))\n      });\n    }\n  }\n}",
            "properties": [
                {
                    "name": "domainName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "parentDomainName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "trustedAccounts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExplorerState",
            "id": "interface-ExplorerState-550a25f97671e159d14df92271f3b4621673dcd70057043a929ffd6e17d229fee4e7ff95a37b9f032e2a5281617a6273ebd424e021902429c403b3f7d19cc070",
            "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nimport { StateModel } from '../../models/states.model';\nimport * as ExplorerActions from './explorer.actions';\n\nexport const explorersFeatureKey = 'explorersListStates';\n\nexport interface ExplorerState extends EntityState<StateModel> {\n  // additional entities state properties\n  error: any;\n}\n\nexport const adapter: EntityAdapter<StateModel> = createEntityAdapter<StateModel>();\n\nexport const initialState: ExplorerState = adapter.getInitialState({\n  // additional entity state properties\n  error: undefined,\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(ExplorerActions.loadExplorersStatesSuccess,\n    (state, action) => {\n    // I left this as and example of trouble shooting a reducer\n    // console.log(action.states);\n    return adapter.setAll(action.states, state);\n  }\n  ),\n  on(ExplorerActions.loadExplorersStatesFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(ExplorerActions.loadCounties,\n    (state, action) => adapter.updateOne(action.states, state)\n  ),\n\n\n  // on(ExplorerActions.loadCounties,\n  //   (state, action) => adapter.updateOne({ id: action.states.id, changes: action.states }, state)\n  // ),\n  // boiler plate examples\n  //\n  // on(ExplorerActions.addExplorer,\n  //   (state, action) => adapter.addOne(action.explorer, state)\n  // ),\n  // on(ExplorerActions.upsertExplorer,\n  //   (state, action) => adapter.upsertOne(action.explorer, state)\n  // ),\n  // on(ExplorerActions.addExplorers,\n  //   (state, action) => adapter.addMany(action.explorers, state)\n  // ),\n  // on(ExplorerActions.upsertExplorers,\n  //   (state, action) => adapter.upsertMany(action.explorers, state)\n  // ),\n  // on(ExplorerActions.updateExplorer,\n  //   (state, action) => adapter.updateOne(action.explorer, state)\n  // ),\n  // on(ExplorerActions.updateExplorers,\n  //   (state, action) => adapter.updateMany(action.explorers, state)\n  // ),\n  // on(ExplorerActions.deleteExplorer,\n  //   (state, action) => adapter.removeOne(action.id, state)\n  // ),\n  // on(ExplorerActions.deleteExplorers,\n  //   (state, action) => adapter.removeMany(action.ids, state)\n  // ),\n  // on(ExplorerActions.loadExplorers,\n  //   (state, action) => adapter.setAll(action.explorers, state)\n  // ),\n  // on(ExplorerActions.clearExplorers,\n  //   state => adapter.removeAll(state)\n  // ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "Filter",
            "id": "interface-Filter-58fd6a5b131e67059f8205bd6c42391aece962b875237d47f94a34ebdecc8fe9103dc10cb6e5b5cbed6626264ff31033ed3750884f3b1ca82c9c29ee5df4df22",
            "file": "projects/explorer/src/app/shared/components/filter-box/filter-box.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, OnInit, ViewEncapsulation, Input, Output, EventEmitter, OnDestroy} from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {Observable, Subject} from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { FilterModel, FilterOption } from '../../models/filters.model';\nimport { FilterState } from '../../stores/filter-store/explorer-filters.reducer';\nimport * as FilterActions from '../../stores/filter-store/explorer-filters.actions';\nimport { GeoFilterState } from '../../stores/geo-filter-store/explorer-geo-filter.reducer';\nimport { geoFilterList } from '../../stores/geo-filter-store/explorer-geo-filter.selectors';\nimport { MapSelection } from '../us-map/map-selection.model';\nimport { filterList } from '../../stores/filter-store/explorer-filters.selectors';\n\ninterface Filter {\n  title: string;\n  options: FilterOption[];\n  opened?: boolean;\n}\n\n@Component({\n  selector: 'exp-filter-box',\n  templateUrl: './filter-box.component.html',\n  styleUrls: ['./filter-box.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class FilterBoxComponent implements OnInit, OnDestroy {\n\n  // @ts-ignore\n  @Input() mapSelections: MapSelection;\n  @Input() set appliedFilters(appliedFilters: any) {\n    if (appliedFilters) {\n      this.clearFilters();\n      // merge both arrays\n      appliedFilters.forEach((appliedFilter: any) => {\n        this.filters.forEach(categories => {\n          categories.options.forEach(option => {\n            if (option.label === appliedFilter.label) {\n              option.checked = true;\n            }\n          });\n        });\n      });\n      this.filtersChanged(true);\n      this.filterChange.emit(appliedFilters);\n    }\n  }\n\n  @Output() filterChange = new EventEmitter<FilterOption[]>();\n  @Output() toggleGeoFilter = new EventEmitter<any>();\n\n  activeFilters: FilterOption[] = [];\n  selectFilters: FilterModel = {id: 'Selected Filters', filters: []};\n  geoFilters$: Observable<any> | undefined;\n  filters$: Observable<any> | undefined;\n  activeGeoFilter: any;\n  filtersApplied = true;\n  applyBtnActive = true;\n  saveBtnActive = true;\n  // save community drawer fields\n  _isSaveCommunityDrawerVisible = false;\n  currentCommunity: any = {};\n\n  filters: Filter[] = [\n    {\n      title: 'Age',\n      options: [\n        { label: '18 to 24', value: {selected: [18, 24], property: 'age'}},\n        { label: '25 to 34', value: {selected: [25, 34], property: 'age'}},\n        { label: '35 to 44', value: {selected: [35, 44], property: 'age'}},\n        { label: '45 to 54', value: {selected: [45, 54], property: 'age'}},\n        { label: '55 to 64', value: {selected: [55, 64], property: 'age'}},\n        { label: '65 Plus', value: {selected: [65, 150], property: 'age'}},\n        { label: 'Unknown', value: 'unknown'},\n      ],\n    },\n    {\n      title: 'Gender',\n      options: [\n        { label: 'Male', value: {selected: 'M', property: 'gender'}},\n        { label: 'Female', value: {selected: 'F', property: 'gender'}},\n        { label: 'Unknown', value: {selected: '', property: 'gender'}},\n      ],\n    },\n    {\n      title: 'Marital Status',\n      options: [\n        { label: 'Married', value: {selected: 'M', property: 'marital'}},\n        { label: 'Non-traditional', value: {selected: 'N', property: 'marital'}},\n        { label: 'Unknown / Single', value: {selected: '', property: 'marital'}},\n      ],\n    },\n    {\n      title: 'Income',\n      options: [\n        { label: '< 30k', value: {selected: [0, 30000], property: 'hh_income'}},\n        { label: '30 - 50k', value: {selected: [30000, 50000], property: 'hh_income'}},\n        { label: '50 - 75k', value: {selected: [50000, 75000], property: 'hh_income'}},\n        { label: '75 - 125k', value: {selected: [75000, 125000], property: 'hh_income'}},\n        { label: '125k+', value: {selected: [125000, 999999999999999], property: 'hh_income'}},\n      ],\n    },\n    {\n      title: 'Education',\n      options: [\n        { label: 'No High School', value: {selected: 'L', property: 'education'}},\n        { label: 'High School', value: {selected: 'H', property: 'education'}},\n        { label: 'Some College', value: {selected: 'S', property: 'education'}},\n        { label: 'Bachelors', value: {selected: 'B', property: 'education'}},\n        { label: 'Graduate', value: {selected: 'G', property: 'education'}},\n      ],\n    },\n    {\n      title: 'Voted',\n      options: [\n        { label: '2020 Primary', value: {selected: 'VOTE_P_2020', property: 'voted'}},\n        { label: '2018 General', value: {selected: 'VOTE_G_2018', property: 'voted'}},\n        { label: '2016 General', value: {selected: 'VOTE_G_2016', property: 'voted'}},\n        { label: '2016 Primary', value: {selected: 'VOTE_P_2016', property: 'voted'}},\n        { label: '2014 General', value: {selected: 'VOTE_G_2014', property: 'voted'}},\n        { label: '2012 General', value: {selected: 'VOTE_G_2012', property: 'voted'}},\n        { label: '2012 Primary', value: {selected: 'VOTE_P_2012', property: 'voted'}},\n      ],\n    },\n    {\n      title: 'Donated to',\n      options: [\n        { label: 'Causes', value: {selected: 'DONOR_TO_CAUSES', property: 'donor'}},\n        { label: 'Conservative', value: {selected: 'DONOR_TO_CONSERVATIVE', property: 'donor'}},\n        { label: 'Liberal', value: {selected: 'DONOR_TO_LIBERAL', property: 'donor'}},\n      ],\n    },\n    {\n      title: 'Party',\n      options: [\n        { label: 'Republican', value: {selected: 'R', property: 'party'}},\n        { label: 'Democratic', value: {selected: 'D', property: 'party'}},\n        { label: 'Independent', value: {selected: 'I', property: 'party'}},\n      ],\n    },\n    {\n      title: 'Civic Score',\n      options: [\n        { label: 'Most Engaged', value: {selected: 'A', property: 'civic_score'}},\n        { label: 'Actively Engaged', value: {selected: 'B', property: 'civic_score'}},\n        { label: 'Passively Engaged', value: {selected: 'C', property: 'civic_score'}},\n        { label: 'Occasionally Engaged', value: {selected: 'D', property: 'civic_score'}},\n        { label: 'Least Engaged', value: {selected: 'E', property: 'civic_score'}},\n      ],\n    },\n  ];\n\n  private unsubscribe: Subject<void> = new Subject();\n\n  constructor(private filterStore: Store<FilterState>, private geoFilterStore: Store<GeoFilterState>) { }\n\n  ngOnInit(): void {\n    this.geoFilters$ = this.geoFilterStore.pipe(select(geoFilterList));\n    this.geoFilters$.pipe(takeUntil(this.unsubscribe)).subscribe(res => {\n      this.activeGeoFilter = res?.geoFilters?.geoFilters;\n      if (res?.geoFilters?.geoFilters?.geoFilters?.length > 0) {\n        this.activeGeoFilter = res.geoFilters.geoFilters.geoFilters;\n      } else if (res?.geoFilters?.geoFilters?.geoFilters?.length === 0 && res?.geoFilters?.geoFilters?.name) {\n        this.activeGeoFilter = ['1'];\n      } else {\n        this.activeGeoFilter = undefined;\n      }\n    });\n    this.filters$ = this.filterStore.pipe(select(filterList));\n    this.filters$.pipe(takeUntil(this.unsubscribe)).subscribe(res => {\n      if (res?.applyFilters?.applyFilters) {\n        this.filtersChanged();\n        this.filterStore.dispatch(FilterActions.filterExplorerApplyFilters({applyFilters: false}));\n      }\n      if (res?.communitySelected?.communitySelected) {\n        this.applyBtnActive = true;\n      }\n      if (res?.saveButtonActive) {\n        this.saveBtnActive = res.saveButtonActive.saveButtonActive;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n\n  activeFilterOptions(filter: Filter): any[] {\n    return filter.options.filter(option => option.checked);\n  }\n\n  filtersChanged(softChange?: boolean): void {\n    const activeFilters: FilterOption[] = [];\n\n    this.filters.forEach(filter => {\n      const activeFilterOptions = this.activeFilterOptions(filter);\n      if (activeFilterOptions.length) {\n        Array.prototype.push.apply(activeFilters, activeFilterOptions);\n      }\n    });\n    this.filtersApplied = activeFilters.length > 0 ? false : true;\n    this.applyBtnActive = this.diffForApply(activeFilters, this.activeFilters);\n    if (!softChange) {\n      this.activeFilters = activeFilters;\n      this.selectFilters.filters = JSON.parse(JSON.stringify(activeFilters));\n      this.filterStore.dispatch(FilterActions.filterExplorerApplied(this.selectFilters));\n      this.filterStore.dispatch(FilterActions.filterExplorerApplyButtonClicked({applyButtonClicked: true}));\n      this.filterStore.dispatch(FilterActions.filterExplorerSaveCommunityActive({saveButtonActive: false}));\n      this.filterChange.emit(activeFilters);\n      this.applyBtnActive = true;\n    }\n    this.filterStore.dispatch(FilterActions.filterExplorerSelected({selected: !this.applyBtnActive}));\n  }\n\n  deselectAll(title: string): void {\n    for (const a of this.filters) {\n      if (a.title === title) {\n        for (const b of a.options) {\n          b.checked = false;\n        }\n      }\n    }\n    this.filtersChanged();\n  }\n  selectAll(title: string): void {\n    for (const a of this.filters) {\n      if (a.title === title) {\n        for (const b of a.options) {\n          b.checked = true;\n        }\n      }\n    }\n    this.filtersChanged();\n  }\n  toggleFilterPanel(): void {\n    this.toggleGeoFilter.emit();\n  }\n  clearFilters(): void{\n    for (const a of this.filters) {\n      for (const b of a.options) {\n        b.checked = false;\n      }\n    }\n    this.filtersChanged();\n    this.filterStore.dispatch(FilterActions.filterExplorerSaveCommunityActive({saveButtonActive: true}));\n  }\n  diffForApply(futureFilter: any[], pastFilter: any[]): boolean {\n    const result = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < futureFilter.length; i++) {\n      if (pastFilter.indexOf(futureFilter[i]) === -1) {\n        result.push(futureFilter[i]);\n      }\n    }\n    if (result.length === 0 && futureFilter.length === 0 && pastFilter.length > 0) {\n      result.push('true');\n    }\n    if (result.length === 0 && futureFilter.length !== pastFilter.length) {\n      result.push('true');\n    }\n    return result.length > 0 ? false : true;\n  }\n\n  get isSaveCommunityDrawerVisible(): boolean {\n    return this._isSaveCommunityDrawerVisible;\n  }\n\n  set isSaveCommunityDrawerVisible(visible: boolean) {\n    this._isSaveCommunityDrawerVisible = visible;\n  }\n\n  openSaveDrawer(community: any): void {\n    this.currentCommunity = {};\n    this.isSaveCommunityDrawerVisible = true;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterOption[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterModel",
            "id": "interface-FilterModel-7303f34f10f92106bdca073bf9af104667d3f2cefadc6b7fa2d33ffecb209e34f8b2d6bf8c96a9cd89fde0d9c0cf531802c8c3de698ffb9d0a1c73985334e07a",
            "file": "projects/explorer/src/app/shared/models/filters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FilterModel {\n  id: string;\n  filters: any;\n  filter?: FilterOption[];\n}\n\nexport interface FilterOption {\n  label: string;\n  value: CardSelectedFiltersValue | string;\n  checked?: boolean;\n}\n\ninterface CardSelectedFiltersValue {\n  property: string;\n  selected: string | number[];\n}\n\n",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterOption[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterOption",
            "id": "interface-FilterOption-7303f34f10f92106bdca073bf9af104667d3f2cefadc6b7fa2d33ffecb209e34f8b2d6bf8c96a9cd89fde0d9c0cf531802c8c3de698ffb9d0a1c73985334e07a",
            "file": "projects/explorer/src/app/shared/models/filters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FilterModel {\n  id: string;\n  filters: any;\n  filter?: FilterOption[];\n}\n\nexport interface FilterOption {\n  label: string;\n  value: CardSelectedFiltersValue | string;\n  checked?: boolean;\n}\n\ninterface CardSelectedFiltersValue {\n  property: string;\n  selected: string | number[];\n}\n\n",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardSelectedFiltersValue | string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterState",
            "id": "interface-FilterState-00cdd6538dd7bb4cba6dfa8664bd0927332a5c555e3575768af6bc2d3b47893d212994990542c0c507daddfb77e924766636ed52a30ba406341c4d63ddd3ea15",
            "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as ExplorerFiltersActions from './explorer-filters.actions';\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\nimport { FilterModel } from '../../models/filters.model';\nimport {\n  compareDropdown,\n  filterExplorerApplyButtonClicked,\n  filterExplorerApplyFilters, filterExplorerCommunityUpdated,\n  filterExplorerSaveCommunityActive, filterExplorerSaveCommunityClicked,\n  filterExplorerSelected, filterStringifiedFilters, savedCommunitySelected, usChartsData,\n} from './explorer-filters.actions';\n\nexport const explorerFiltersFeatureKey = 'explorerFilters';\n\nexport interface FilterState extends EntityState<FilterModel>{\n  error: any;\n}\n\nexport const adapter: EntityAdapter<any> = createEntityAdapter<any>();\n\nexport const initialState: FilterState = adapter.getInitialState({\n  // additional entity state properties\n  error: undefined,\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n\n  // on(ExplorerFiltersActions.filterExplorerApplied,\n  //   (state, action) => adapter.setAll(action.filters, state),\n  // ),\n\n  on(ExplorerFiltersActions.filterExplorerApplied,\n    (state, action) => ({\n      ...state,\n      filters: action.filters,\n    }),\n  ),\n  on(ExplorerFiltersActions.filterExplorerSelected,\n    (state, action) => ({\n      ...state,\n      selected: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerApplyFilters,\n    (state, action) => ({\n      ...state,\n      applyFilters: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterStringifiedFilters,\n    (state, action) => ({\n      ...state,\n      stringifiedFilters: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerApplyButtonClicked,\n    (state, action) => ({\n      ...state,\n      applyButtonClicked: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerSaveCommunityActive,\n    (state, action) => ({\n      ...state,\n      saveButtonActive: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerSaveCommunityClicked,\n    (state, action) => ({\n      ...state,\n      saveButtonClicked: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerCommunityUpdated,\n    (state, action) => ({\n      ...state,\n      communityUpdated: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.savedCommunitySelected,\n    (state, action) => ({\n      ...state,\n      communitySelected: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.usChartsData,\n    (state, action) => ({\n      ...state,\n      usChart: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.stateChartsData,\n    (state, action) => ({\n      ...state,\n      stateChart: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.compareDropdown,\n    (state, action) => ({\n      ...state,\n      compareDropdown: action,\n    }),\n  ),\n);\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "FrontendStackProps",
            "id": "interface-FrontendStackProps-381390bef62e39bbee04c9e752a56f3de52dad13477ed58ff2b67d8d6d013f04ae1fea38be32c0c509476b0fea11721007a657b991994b15db38389dbece4107",
            "file": "infrastructure/lib/frontend-infrastructure-stack.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport * as frontend from './constructs/cloudfront-s3-frontend';\nimport {DnsValidatedCertificate, CertificateValidation} from '@aws-cdk/aws-certificatemanager';\nimport {IHostedZone, PublicHostedZone} from '@aws-cdk/aws-route53';\nimport { Source } from '@aws-cdk/aws-s3-deployment';\nimport path = require('path')\n\n\nexport interface FrontendStackProps extends cdk.StackProps {\n  stage: string\n  hostedZone?: PublicHostedZone\n  domainName?: string\n}\n\nexport class FrontendStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props: FrontendStackProps) {\n    super(scope, id, props);\n\n    const cert = props.hostedZone !== undefined ? new DnsValidatedCertificate(this, 'ssl-certificate',\n        {\n          domainName: props.domainName !== undefined? props.domainName: props.hostedZone.zoneName,\n          hostedZone: props.hostedZone,\n          validation: CertificateValidation.fromDns(props.hostedZone),\n          subjectAlternativeNames: [\n            `*.${props.hostedZone.zoneName}`\n          ]\n        }\n      ) : undefined;\n\n\n    let customDomainProps: frontend.CustomDomainProps | undefined;\n\n    if (cert !== undefined && props.hostedZone !== undefined){\n      customDomainProps = {\n        certificate: cert,\n        hostedZone: props.hostedZone,\n        domainNames: props.domainName !== undefined? [props.domainName]:  [props.hostedZone.zoneName]\n      };\n    }\n\n    new frontend.SinglePageApp(this, 'site', {\n//      uploadPrefix: process.env.BITBUCKET_COMMIT,\n      angularOutputDirectory: path.join(__dirname, '../../dist/organizer-frontends'),\n      customDomainProps: customDomainProps\n    })\n  }\n}\n",
            "properties": [
                {
                    "name": "domainName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hostedZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PublicHostedZone",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "stage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GenderCategories",
            "id": "interface-GenderCategories-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "female",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "male",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GenderCategories",
            "id": "interface-GenderCategories-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "female",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "male",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GenderCategories-1"
        },
        {
            "name": "GeoFilterModel",
            "id": "interface-GeoFilterModel-32849a3ec78373b2181b6993a3f8932eeb9c15479a9623e616e76020cf329350324d45a83cbdbcf30a1b01899e2a468018e51f53bdad1e9d70cd9579f67afe07",
            "file": "projects/explorer/src/app/shared/models/geo-filters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GeoFilterModel {\n  id: string;\n  geoFilters: any;\n  geoFiltersSaved: any;\n}\n",
            "properties": [
                {
                    "name": "geoFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "geoFiltersSaved",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GeoFilterState",
            "id": "interface-GeoFilterState-b59ffd68cfaa03ac70f06927ef645e3b340419f24a1776f918e83e0e6678e786f3dbdbe3b95dddbb8ccbef8bf3469b944f6a2ef9a3194da28fdedb28bcb57cfc",
            "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\nimport * as ExplorerGeoFilterActions from './explorer-geo-filter.actions';\nimport { GeoFilterModel } from '../../models/geo-filters.model';\n\nexport const explorerGeoFilterFeatureKey = 'explorerGeoFilter';\n\nexport interface GeoFilterState extends EntityState<GeoFilterModel> {\n  geoFiltersSaved: any;\n  geoFilters: any;\n  error: any;\n}\n\nexport const adapter: EntityAdapter<any> = createEntityAdapter<any>();\n\nexport const initialState: GeoFilterState = adapter.getInitialState({\n  geoFiltersSaved: undefined,\n  geoFilters: undefined,\n  error: undefined,\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n\n  // on(ExplorerGeoFilterActions.geoFilterExplorerApplied,\n  //   (state, action) => adapter.setAll(action.geoFilters, state),\n  // ),\n\n  on(ExplorerGeoFilterActions.geoFilterExplorerApplied,\n    (state, action) => ({\n      ...state,\n      geoFilters: action,\n    }),\n  ),\n\n  on(ExplorerGeoFilterActions.geoFilterExplorerSaved,\n    (state, action) => ({\n      ...state,\n      geoFiltersSaved: action,\n    }),\n  ),\n);\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "geoFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "geoFiltersSaved",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "IncomeCategories",
            "id": "interface-IncomeCategories-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "c_125k_plus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "c_30_to_50k",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "c_30k_or_less",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "c_50_to_75k",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "c_75_to_125k",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 71
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IncomeCategories",
            "id": "interface-IncomeCategories-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "c_125k_plus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "c_30_to_50k",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "c_30k_or_less",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "c_50_to_75k",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "c_75_to_125k",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 71
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IncomeCategories-1"
        },
        {
            "name": "Indicators",
            "id": "interface-Indicators-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<AgeCategories>",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "degree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<DegreeCategories>",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<GenderCategories>",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "income",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<IncomeCategories>",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "marital",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<MaritalCategories>",
                    "optional": true,
                    "description": "",
                    "line": 80
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Indicators",
            "id": "interface-Indicators-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<AgeCategories>",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "degree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<DegreeCategories>",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<GenderCategories>",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "income",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<IncomeCategories>",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "marital",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<MaritalCategories>",
                    "optional": true,
                    "description": "",
                    "line": 80
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Indicators-1"
        },
        {
            "name": "Invite",
            "id": "interface-Invite-7629cec138fdb43ffa085e3ff2077e16fa4f2d689715ad49163d2e532ac9ae04643acbb990a4da25600ee6b839c43f8b05b5f1f4ab44d553dcb0e66a5500d702",
            "file": "projects/admin/src/app/pages/invite/invite.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { take, mergeMap } from 'rxjs/operators';\nimport { FindRolesGQL, SendInvitationGQL } from '../../shared/services/graphql/graphql.service';\nimport * as fromUserSelectors from '../../store/selectors/user.selectors';\nimport { UserState } from '../../store/reducers/user.reducer';\nimport { Role } from '../../shared/models/role.model';\n\nexport interface Invite {\n  email: string;\n  role: Role;\n}\n\n@Component({\n  selector: 'org-invite',\n  templateUrl: './invite.component.html',\n  styleUrls: ['./invite.component.less'],\n})\nexport class InviteComponent implements OnInit {\n  step = 0;\n  roles: Role[] = [];\n  isLoading = true;\n\n  emails: string[] = [];\n  constructor(private findRolesService: FindRolesGQL,\n              private sendInvitationService: SendInvitationGQL,\n              private store: Store<UserState>) {}\n\n  ngOnInit(): void {\n    this.store.pipe(select(fromUserSelectors.selectCurrentOrganizationUuid)).pipe(\n      mergeMap(org => this.findRolesService.fetch({organizationUuid: org }).pipe(take(1))),\n    ).subscribe(result => {\n      if (result?.data?.roles) {\n        this.roles = result.data.roles as Role[];\n        this.isLoading = false;\n      }\n    });\n  }\n\n  handleSubmitEmails(emails: string[]): void {\n    this.emails = emails;\n    this.step = 1;\n  }\n\n  handleSendInvite(users: Invite[]): void {\n    this.sendInvitationService.mutate({\n      input: {\n        organizationUuid: localStorage.getItem('selected_org') || '',\n        users: users.map(user => ({email: user.email, roleUuid: user.role.uuid})),\n      },\n    }).subscribe(() => {\n      this.step = 2;\n    });\n  }\n}\n\n\n\n\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LambdaApiProps",
            "id": "interface-LambdaApiProps-339b5636508352d71c0e067a877936643e480504f3101bb6cdc6735e4ef699e43bfe8d3baf46c95f2b9859258bdc277d0f548441b21187ae088c6c766780fb6b",
            "file": "infrastructure/lib/constructs/lambda-backed-api-gateway.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport {IFunction} from '@aws-cdk/aws-lambda'\nimport {HttpApi, HttpApiProps, CorsHttpMethod, DomainName, ApiMapping, HttpMethod, HttpNoneAuthorizer} from '@aws-cdk/aws-apigatewayv2'\nimport {LambdaProxyIntegration} from '@aws-cdk/aws-apigatewayv2-integrations';\nimport {HttpJwtAuthorizer, HttpJwtAuthorizerProps } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport {IHostedZone, ARecord, RecordTarget} from '@aws-cdk/aws-route53';\nimport {ApiGatewayv2DomainProperties} from '@aws-cdk/aws-route53-targets';\nimport {ICertificate} from '@aws-cdk/aws-certificatemanager';\n\nexport interface apiGatewayCustomDomainProps  {\n    hostedZone: IHostedZone\n    tlsCertificate: ICertificate\n    subdomain?: string\n}\n\n\nexport interface LambdaApiProps {\n    defaultHandler: IFunction\n    apiName?: string\n    apiGatewayCustomDomainProps?: apiGatewayCustomDomainProps\n    apiGatewayProps?: HttpApiProps\n    authorizerProps?: HttpJwtAuthorizerProps\n    corsAllowedOrigins?: string[]\n}\n\n// Note: this class uses @aws-cdk/aws-apigatewayv2, which is still in an experimental state.\n// If you bump the version of that package, you may need to update the code here to match\n// the new API.\nexport class LambdaApi extends cdk.Construct {\n    public api: HttpApi;\n    public apiGatewayUrl: ARecord | undefined;\n    public authorizer: HttpJwtAuthorizer | undefined;\n    constructor(scope: cdk.Construct, id: string, props: LambdaApiProps ) {\n        super(scope, id);\n\n        let apiGatewayProps: HttpApiProps;\n        this.authorizer = props.authorizerProps !== undefined ? new HttpJwtAuthorizer(props.authorizerProps) : undefined;\n\n        // When we encounter an un-configured route, throw a 404\n        const defaultIntegration = new LambdaProxyIntegration({handler: props.defaultHandler})\n        if(props.apiGatewayProps === undefined) {\n            apiGatewayProps = {\n                apiName: props.apiName,\n                defaultAuthorizer: this.authorizer,\n                defaultIntegration: defaultIntegration,\n                corsPreflight: {\n                    allowMethods: [\n                        CorsHttpMethod.GET,\n                        CorsHttpMethod.PUT,\n                        CorsHttpMethod.POST,\n                        CorsHttpMethod.DELETE\n                    ],\n                    allowOrigins: props.corsAllowedOrigins,\n                    allowHeaders: ['*'],\n                    exposeHeaders: ['origin'],\n                    allowCredentials: false\n                },\n                createDefaultStage: true,\n            };\n        } else {\n            apiGatewayProps = props.apiGatewayProps;\n        }\n\n        this.api = new HttpApi(this, 'HttpApiGateway', apiGatewayProps);\n\n        // Catch all route to enable unauthenticated OPTIONS requests for APIs with a default authorizer.\n        // If you don't have a default authorizer but you do want to serve OPTIONS requests for an endpoint\n        // that does have one, you'll need to configure it explicitly.\n        if (this.authorizer !== undefined){\n            this.api.addRoutes({\n                path: `/{proxy+}`,\n                methods: [\n                    HttpMethod.OPTIONS\n                ],\n                integration: defaultIntegration,\n                authorizer: new HttpNoneAuthorizer()\n            });\n        }\n\n        // Set custom domain name, if defined\n        if (props.apiGatewayCustomDomainProps !== undefined) {\n            const domainName = props.apiGatewayCustomDomainProps.subdomain !== undefined? `${props.apiGatewayCustomDomainProps.subdomain}.${props.apiGatewayCustomDomainProps.hostedZone.zoneName}`: props.apiGatewayCustomDomainProps.hostedZone.zoneName;\n            const domain = new DomainName(this, 'ApiGatewayCustomDomain', {\n                domainName: domainName,\n                certificate: props.apiGatewayCustomDomainProps.tlsCertificate\n            });\n            new ApiMapping(this, 'ApiGatewayApiMapping', {\n                api: this.api,\n                domainName: domain\n            });\n\n            this.apiGatewayUrl =  new ARecord(this, 'APIGatewayAlias', {\n                zone: props.apiGatewayCustomDomainProps.hostedZone,\n                recordName: domainName,\n                target: RecordTarget.fromAlias(new ApiGatewayv2DomainProperties(domain.regionalDomainName, domain.regionalHostedZoneId))\n            });\n        }\n\n    }\n}",
            "properties": [
                {
                    "name": "apiGatewayCustomDomainProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "apiGatewayCustomDomainProps",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "apiGatewayProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpApiProps",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "apiName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "authorizerProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpJwtAuthorizerProps",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "corsAllowedOrigins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "defaultHandler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFunction",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoginErrorResponse",
            "id": "interface-LoginErrorResponse-6d225b34be5f2c5998ce342e3157cade9485a1ccfb4ac1f629e414f21701a5dc77d6066ce668aed196d9a2ffe7c0c5598844419e3d60c536d844a8a0507dff1b",
            "file": "projects/admin/src/app/login/models/login-error-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LoginErrorResponse {\n  code: string | undefined;\n  description: string | undefined;\n  statusCode: number | undefined;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "statusCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoginState",
            "id": "interface-LoginState-b730a87c88cd0e213ce49228bb9cff975c781d78c8140cffef6ed9105b92ac535c59210cd478cf822383dc4eacec982b05afc2d3a2d74fce1fa84a188e102cae",
            "file": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport { LoginErrorResponse } from '../../models/login-error-response.model';\nimport * as fromActions from '../actions/login.actions';\n\nexport const loginFeatureKey = 'login';\n\nexport interface LoginState {\n  success: boolean;\n  failure: boolean;\n  error?: LoginErrorResponse;\n}\n\nexport const initialState: LoginState = {\n  success: false,\n  failure: false,\n};\n\nexport const loginReducer = createReducer(\n  initialState,\n\n  on(fromActions.loginSuccess, state => ({\n    ...state,\n    success: true,\n    failure: false,\n  })),\n\n  on(fromActions.loginFailure, (state, {error}) => ({\n    ...state,\n    success: false,\n    failure: true,\n    error,\n  })),\n);\n\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginErrorResponse",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "failure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MapSelection",
            "id": "interface-MapSelection-19bb0b0bdab0055cf852b7e63a717addb19f541f5a5f5366137624b759e687ad116b0150cf4846cd8b8d4458ce0c4fdb4c1482dab5071c30140fc7159ce34eda",
            "file": "projects/explorer/src/app/shared/components/us-map/map-selection.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MapSelection {\n  id?: string;\n  name?: string;\n  households?: number;\n  people?: number;\n  score?: number;\n  gender?: any;\n  age?: any;\n  degree?: any;\n  income?: any;\n  marital?: any;\n  category?: string;\n  level?: string;\n  meta?: any;\n  mapType?: string;\n  segment?: any;\n}\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "degree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "households",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "income",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "mapType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "marital",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "people",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "segment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MapServiceModel",
            "id": "interface-MapServiceModel-d3a26ee15d8076c47692bb8ec6c4ba24089bc42c784fd7a9ee268f21b12af6dcf46ad520f1291474eef8de1489086591183c4c8ef8fae106dfc830cbe2ef7358",
            "file": "projects/explorer/src/app/shared/models/map-service.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MapServiceModel {\n    Id?: any;\n    Name?: any;\n    Score?: any;\n    People?: any;\n    Households?: any;\n    Gender?: any;\n    Age?: any;\n    Degree?: any;\n    Income?: any;\n    Marital?: any;\n    'State Name'?: any;\n}\n",
            "properties": [
                {
                    "name": "Age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "Degree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "Gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "Households",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "Id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "Income",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "Marital",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "Name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "People",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "Score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "State Name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MaritalCategories",
            "id": "interface-MaritalCategories-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "female_married",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "female_non_traditional",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "female_unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "male_married",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "male_non_traditional",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "male_unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 89
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MaritalCategories",
            "id": "interface-MaritalCategories-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "female_married",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "female_non_traditional",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "female_unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "male_married",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "male_non_traditional",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "male_unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Datapoint>",
                    "optional": true,
                    "description": "",
                    "line": 89
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MaritalCategories-1"
        },
        {
            "name": "Member",
            "id": "interface-Member-73638d0c486f548eb8e457827318a9e4e7006a32d983f36a72b954cc002e9877fe21728b3e69639c2380d3ec35e62ea766b787291523961b428abc8ba922c48a",
            "file": "projects/admin/src/app/pages/admin/components/members/member.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Organization } from '../../../../shared/models/organization.model';\nimport { Role } from '../../../../shared/models/role.model';\nimport { User } from '../../../../shared/models/user.model';\n\nexport interface OrganizationUsers extends User {\n  organization: Organization;\n  role: Role;\n  organizationUuid: string;\n}\n\nexport interface Member {\n  uuid: string;\n  name: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  avatar?: string;\n  position: string;\n  organizationUsers: any[];\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "organizationUsers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "uuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Models",
            "id": "interface-Models-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "civic_scores",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<CivicModel>",
                    "optional": true,
                    "description": "",
                    "line": 95
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Models",
            "id": "interface-Models-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "civic_scores",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<CivicModel>",
                    "optional": true,
                    "description": "",
                    "line": 95
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Models-1"
        },
        {
            "name": "Organization",
            "id": "interface-Organization-99ec7e2020541f2f462e39b492f1855bee5c7ef7afb6c7dbeb3cfc058745c38489d5ca1b05878b55c4ac9d1b11ca51e746efff9e5f40a61fcf45e7c09c062063",
            "file": "projects/admin/src/app/shared/models/organization.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OrganizationEnum, StatusEnum, SubscriptionEnum } from '../services/graphql/graphql.service';\nimport { Role } from './role.model';\nexport interface Organization {\n  name: string;\n  type?: OrganizationEnum;\n  subscriptionType?: SubscriptionEnum;\n  uuid: string; // Organization uuid\n  organizationUuid?: string; // Parent organization uuid\n  roles: Role[];\n  countUsers?: number;\n  organizations?: Organization[];\n  status: StatusEnum;\n}\n",
            "properties": [
                {
                    "name": "countUsers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "organizations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Organization[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "organizationUuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusEnum",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "subscriptionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubscriptionEnum",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrganizationEnum",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "uuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "OrganizationUsers",
            "id": "interface-OrganizationUsers-73638d0c486f548eb8e457827318a9e4e7006a32d983f36a72b954cc002e9877fe21728b3e69639c2380d3ec35e62ea766b787291523961b428abc8ba922c48a",
            "file": "projects/admin/src/app/pages/admin/components/members/member.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Organization } from '../../../../shared/models/organization.model';\nimport { Role } from '../../../../shared/models/role.model';\nimport { User } from '../../../../shared/models/user.model';\n\nexport interface OrganizationUsers extends User {\n  organization: Organization;\n  role: Role;\n  organizationUuid: string;\n}\n\nexport interface Member {\n  uuid: string;\n  name: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  avatar?: string;\n  position: string;\n  organizationUsers: any[];\n}\n",
            "properties": [
                {
                    "name": "organization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Organization",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "organizationUuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "User"
        },
        {
            "name": "Role",
            "id": "interface-Role-45f52f165e71f5426ec732fee1b4401f79fb27f9b05f8b5a10cb58078ff67f0b219375fe0207654887f15e007e6cdd1efafde174412742144500f736bc25161e",
            "file": "projects/admin/src/app/shared/models/role.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Role {\n  name: string;\n  uuid: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "uuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RootQueryType",
            "id": "interface-RootQueryType-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "cache",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "explorer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Array<Maybe<Segment>>>",
                    "optional": true,
                    "description": "",
                    "line": 101
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RootQueryType",
            "id": "interface-RootQueryType-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "cache",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "explorer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Array<Maybe<Segment>>>",
                    "optional": true,
                    "description": "",
                    "line": 101
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RootQueryType-1"
        },
        {
            "name": "RootQueryTypeCacheArgs",
            "id": "interface-RootQueryTypeCacheArgs-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "flush",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 106
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RootQueryTypeCacheArgs",
            "id": "interface-RootQueryTypeCacheArgs-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "flush",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 106
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RootQueryTypeCacheArgs-1"
        },
        {
            "name": "RootQueryTypeExplorerArgs",
            "id": "interface-RootQueryTypeExplorerArgs-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "segment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 112
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RootQueryTypeExplorerArgs",
            "id": "interface-RootQueryTypeExplorerArgs-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "segment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 112
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RootQueryTypeExplorerArgs-1"
        },
        {
            "name": "Scalars",
            "id": "interface-Scalars-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "Boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "Float",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "ID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "Int",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "String",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>All built-in and custom scalars, mapped to their actual values</p>\n",
            "rawdescription": "\nAll built-in and custom scalars, mapped to their actual values",
            "methods": []
        },
        {
            "name": "Scalars",
            "id": "interface-Scalars-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "Boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "Float",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "ID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "Int",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "String",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>All built-in and custom scalars, mapped to their actual values</p>\n",
            "rawdescription": "\nAll built-in and custom scalars, mapped to their actual values",
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Scalars-1"
        },
        {
            "name": "Segment",
            "id": "interface-Segment-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "county",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "indicators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Indicators>",
                    "optional": true,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "segment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "totals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Total>",
                    "optional": true,
                    "description": "",
                    "line": 120
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Segment",
            "id": "interface-Segment-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "county",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "indicators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Indicators>",
                    "optional": true,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "segment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "totals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<Total>",
                    "optional": true,
                    "description": "",
                    "line": 120
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Segment-1"
        },
        {
            "name": "SinglePageAppProps",
            "id": "interface-SinglePageAppProps-b24bd7fac82f6251f111fa5db1bf1f02145ccdf88c06dd2601a1f55c01eef9c01918b16eab1fe81f33db8815bd2e198b0a3bc937bae4a4337944f54ba755b9ef",
            "file": "infrastructure/lib/constructs/cloudfront-s3-frontend.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport {Bucket, BucketAccessControl} from '@aws-cdk/aws-s3';\nimport * as s3Deploy from '@aws-cdk/aws-s3-deployment';\nimport { HostedZone, ARecord, RecordTarget, PublicHostedZone } from '@aws-cdk/aws-route53';\nimport { CloudFrontTarget} from '@aws-cdk/aws-route53-targets';\nimport { DnsValidatedCertificate, CertificateValidation, CfnCertificate, ICertificate } from '@aws-cdk/aws-certificatemanager'\nimport {Distribution, AllowedMethods, CachePolicy, CachedMethods, ViewerProtocolPolicy} from '@aws-cdk/aws-cloudfront'\nimport * as CFOrigin from '@aws-cdk/aws-cloudfront-origins'\nimport { join } from 'path';\nimport { CfnOutput, Duration, RemovalPolicy } from '@aws-cdk/core';\nimport { Source } from '@aws-cdk/aws-s3-deployment';\n\n\nexport interface CustomDomainProps {\n  hostedZone: PublicHostedZone,\n  domainNames: string[],\n  certificate: ICertificate,\n}\nexport interface SinglePageAppProps  {\n  customDomainProps?: CustomDomainProps,\n  uploadPrefix?: string,\n  angularOutputDirectory: string,\n}\n\nexport class SinglePageApp extends cdk.Construct {\n  constructor(scope: cdk.Construct, id: string, props: SinglePageAppProps) {\n    super(scope, id);\n\n    // Resources:\n    // Log aggregation bucket (CloudFront logs go here)\n    const logsBucket = new Bucket(this, 'LogBucket', {\n      accessControl: BucketAccessControl.LOG_DELIVERY_WRITE,\n      removalPolicy: cdk.RemovalPolicy.RETAIN // Keep server logs in the event that the stack gets deleted\n    })\n\n    const site = Source.asset(props.angularOutputDirectory, {\n      exclude: ['index.html']\n    })\n\n    const rootDocument = Source.asset(props.angularOutputDirectory, {\n      exclude: ['**', '!index.html']\n    })\n\n    // Site bucket (build artifacts get uploaded here)\n    const siteBucket = new Bucket(this, 'SiteBucket', {\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n      autoDeleteObjects: true,\n      enforceSSL: true,\n      publicReadAccess: false,\n      serverAccessLogsBucket: logsBucket,\n    });\n\n    // Uploads angular build output to S3, prefixed with the uploadPrefix tag for the deploy\n    const siteUpload = new s3Deploy.BucketDeployment(this, 'SiteUpload', {\n      destinationBucket: siteBucket,\n      sources: [site],\n      prune: false, // Don't delete existing files when uploading\n      destinationKeyPrefix: props.uploadPrefix,\n      memoryLimit: 1024\n    });\n\n    // Upload index to bucket root\n    const indexUpload = new s3Deploy.BucketDeployment(this, 'RootDocumentUpload', {\n      destinationBucket: siteBucket,\n      sources: [rootDocument],\n      cacheControl: [s3Deploy.CacheControl.fromString('max-age=0,no-cache,no-store,must-revalidate')],\n      prune: false\n    });\n\n    // Ensure the new site is uploaded before uploading the index\n    indexUpload.node.addDependency(siteUpload)\n\n\n    // Configure CloudFront to request files from the site bucket\n    // The angular app will determine the prefix to request files from\n    const origin = new CFOrigin.S3Origin(siteBucket,{\n      originPath: `/`\n    });\n\n    // Cloudfront CDN\n    const cdn = new Distribution(this, 'Cdn', {\n      enableLogging: true,\n      logBucket: logsBucket,\n      certificate: props.customDomainProps?.certificate,\n      domainNames:  props.customDomainProps?.domainNames,\n      defaultBehavior: {\n        origin: origin,\n        allowedMethods: AllowedMethods.ALLOW_GET_HEAD_OPTIONS,\n        cachePolicy: new CachePolicy(this, 'DefaultCachePolicy', {}),\n        cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,\n        viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n      },\n      additionalBehaviors: {\n        // Don't cache index.html\n        \"index.html\": {\n          origin: origin,\n          allowedMethods: AllowedMethods.ALLOW_GET_HEAD_OPTIONS,\n          cachePolicy: new CachePolicy(this, 'IndexCachePolicy', {\n            minTtl: Duration.seconds(0),\n            maxTtl: Duration.seconds(0),\n            defaultTtl: Duration.seconds(0)\n\n          }),\n          cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,\n          viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n        }\n      },\n      defaultRootObject: 'index.html',\n      errorResponses: [\n        {\n          httpStatus: 403, // S3 API returns 403 instead of 404 for missing files, so we need to return 200 here and allow angular's router to do its thing\n          responseHttpStatus: 200,\n          responsePagePath: '/index.html'\n        },\n        {\n          httpStatus: 500,\n          responsePagePath: '/index.html'\n        }\n      ]\n    });\n\n    props.customDomainProps !== undefined ? new ARecord(this, 'CdnRecord', {\n      target: RecordTarget.fromAlias(new CloudFrontTarget(cdn)),\n      zone: props.customDomainProps.hostedZone\n    }) : console.log('No public hosted zone defined, skipping DNS record creation');\n    cdn.node.addDependency(indexUpload);\n\n    // Outputs\n    new CfnOutput(this, 'SiteBucketName', {\n     value: siteBucket.bucketName,\n     description: 'Bucket where static assets are uploaded',\n    })\n\n    new CfnOutput(this, 'CdnDomainName', {\n      value: cdn.domainName,\n      description: 'Domain name for the CloudFront distribution (to access the site without a custom URL)',\n     })\n\n     new CfnOutput(this, 'DomainName', {\n      value: props.customDomainProps?.domainNames.join(',') || cdn.domainName,\n      description: 'Domain name(s) for the site',\n     })\n\n     new CfnOutput(this, 'LogBucketName', {\n      value: logsBucket.bucketName,\n      description: 'Domain name for the site',\n     })\n  }\n}",
            "properties": [
                {
                    "name": "angularOutputDirectory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "customDomainProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomDomainProps",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "uploadPrefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StateModel",
            "id": "interface-StateModel-8fa8eff9bc03ed5635f045d0cb677c2c1f8d010e599a72bdca51382cbed873757b9303fde10315a95e43b1fd75dacf4f55513b5618b3edafb7cfa69607a0e336",
            "file": "projects/explorer/src/app/shared/models/states.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StateModel {\n  category: string;\n  code: string;\n  households: number;\n  id: string;\n  name: string;\n  people: number;\n  value: number;\n  counties?: any[];\n}\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "counties",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "households",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "people",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Total",
            "id": "interface-Total-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "civic_score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "households",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "people",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 126
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Total",
            "id": "interface-Total-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de-1",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "civic_score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "households",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "people",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Maybe<>",
                    "optional": true,
                    "description": "",
                    "line": 126
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Total-1"
        },
        {
            "name": "TreeRegion",
            "id": "interface-TreeRegion-8a7c631ba899dd972ef9bd9e50ad387b3c43b4fad27a6a759b1498836efd0b827793ce40b70a5df34c781c1b8f99f11b0751a59d70bc314c783cc3adb6d0ada5",
            "file": "projects/explorer/src/app/shared/components/geo-filters-drawer/tree-region.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TreeRegion {\n  key: string;\n  name: string;\n  people: number;\n  households: number;\n  level?: number;\n  expanded?: boolean;\n  showExpand?: boolean;\n  children?: TreeRegion[];\n  isSelected: boolean;\n  isDisabled: boolean;\n  parentCode?: string;\n  search?: boolean;\n  loading?: boolean;\n  type?: string;\n  communityName?: string;\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeRegion[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "communityName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "households",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "parentCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "people",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/examples/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-3fd2c67b2a13ae6eb8ab3012cbf7a9940cf5db51eaf324edf58a1add0a19bd6ccdde8a5b0f407f7d9a1c058cd7018232e7616c965fc29a56f0aa7661bf2cd7f7-1",
            "file": "projects/explorer/src/app/admin/admin.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AdminService } from '../shared/services/admin.service';\nimport { NzMessageService } from 'ng-zorro-antd/message';\nimport mappingOf50States from './listOf50States';\nimport {isDigit} from 'codelyzer/angular/styles/chars';\n\nexport enum Status {\n  Active,\n  Unverified,\n  Blocked,\n}\n\nexport interface User {\n  userId: string;\n  firstName: string;\n  lastName: string;\n  avatar: string;\n  email: string;\n  phoneNumber: number;\n  emailVerified: boolean;\n  userAccounts: any[];\n  superAdmin: boolean;\n}\n\nexport interface Account {\n  id: string;\n  name: string;\n  segment: string[];\n  superAdmin?: boolean;\n  users: User[];\n  isDisabled: boolean;\n  status: {[userId: string]: Status};\n}\n\n\n@Component({\n  selector: 'exp-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss']\n})\nexport class AdminComponent implements OnInit {\n  statusType = Status;\n  accountsLoading = false;\n  expandedAccountId = '';\n  newAccountRowIsHidden = true;\n  newAccountProcessing = false;\n  inputAccountName = '';\n  selectedSegments: string[] = [];\n  mappingOf50States: any;\n  listOfSegmentOptions: string[] = [];\n  usersLoading = false;\n  inputEmailValue = '';\n  inputNameValue = '';\n  editId = '';\n  editName = '';\n  showActionMenu: {[userId: string]: boolean} = {};\n  showPasswordResetAlert = false;\n  allChecked = false;\n  setOfCheckedId = new Set<string>();\n  currentPageUsers: User[] = [];\n  indeterminate = false;\n  accounts: Account[] = [{\n    name: 'Super Admins',\n    segment: [],\n    superAdmin: true,\n    users: [],\n    id: '1',\n    status: {},\n    isDisabled: false,\n  }];\n  users: User[] = [];\n\n  constructor(private adminService: AdminService, private message: NzMessageService) { }\n\n  ngOnInit(): void {\n    this.mappingOf50States = mappingOf50States;\n    this.accountsLoading = true;\n    this.listOfSegmentOptions = Object.keys(mappingOf50States);\n    this.adminService.getAccounts().subscribe(accounts => {\n      accounts.forEach((act: Account) => {act.users = []; });\n      this.accounts = [...this.accounts, ...accounts];\n      this.adminService.getUsers().subscribe(users => {\n        this.users = users;\n        this.assignUsersToAccounts();\n      });\n    });\n  }\n\n  addAccount(name: string, segment: string[]): void {\n    this.newAccountProcessing = true;\n    this.accountsLoading = true;\n    this.adminService.createAccount(name, segment).subscribe(accounts => {\n      this.accountsLoading = false;\n      this.newAccountProcessing = false;\n      this.newAccountRowIsHidden = true;\n      const account = accounts.pop();\n      account.users = [];\n      this.accounts.splice(1, 0, account);\n      this.accounts = [...this.accounts];\n    });\n  }\n\n  disableAccount(account: Account, isActive: boolean): void {\n    this.accountsLoading = true;\n    const isDisabled = !isActive;\n    this.adminService.disableAccount(account.id, isDisabled).subscribe(() => {\n      this.accountsLoading = false;\n      account.isDisabled = isDisabled;\n    });\n  }\n\n  assignUsersToAccounts(): void {\n    this.accounts = this.accounts.map((account: Account) => {\n      account.users = this.getUsersForAccount(account);\n      account.status = account.users.reduce((statusObj: any, user) => {\n        statusObj[user.userId] = this.getStatus(user, account.id);\n        return statusObj;\n      }, {});\n      return account;\n    });\n    this.usersLoading = false;\n    this.accountsLoading = false;\n  }\n\n  getUsersForAccount(account: Account): User[] {\n    if (account.superAdmin) {\n      return this.users.filter(user => user.superAdmin);\n    }\n    return this.users.filter( user => {\n      const userBelongsToAccount = user.userAccounts.some(\n        userAccount => userAccount.account === account.id\n      );\n      return userBelongsToAccount;\n    });\n  }\n\n  getStatus(user: User, accountId: string): Status {\n    const userAccount = user.userAccounts.find(account => account.account === accountId);\n\n    if (!user.emailVerified) {\n      return Status.Unverified;\n    }\n\n    if (userAccount && userAccount.blocked) {\n      return Status.Blocked;\n    }\n    return Status.Active;\n  }\n\n  addUser(email: string, userName: string, account: Account): void {\n    const user = this.users.find(potentialUser => potentialUser.email === email);\n    const isSuperAdmin = !!account.superAdmin;\n    this.usersLoading = true;\n    this.inputEmailValue = '';\n    this.inputNameValue = '';\n    const [firstName, lastName] = userName.trim().split(' ');\n    if (account.users.find(accountUser => accountUser === user)) {\n      this.message.error(`${email} is already add to ${account.name}`, { nzDuration: 2500 });\n      this.usersLoading = false;\n    }\n    if (user) {\n      if (isSuperAdmin) {\n        this.adminService.assignSuperAdminToUser(user.userId, true).subscribe(users => {\n          const updatedUser = users.pop();\n          this.updateUserHelper(updatedUser);\n        });\n        return;\n      }\n      this.adminService.addUserToAccount(user.userId, account.id).subscribe(users => {\n        const updatedUser = users.pop();\n        this.updateUserHelper(updatedUser);\n      });\n      return;\n    }\n\n    if (!user){\n      // Only invite if user doesn't exist\n      this.adminService.inviteUser(email, account.id, firstName, lastName, isSuperAdmin).subscribe(users => {\n        const newUser = users.pop();\n        this.users = [...this.users, newUser];\n        this.assignUsersToAccounts();\n      });\n    }\n  }\n\n  startEdit(user: User): void {\n    this.editId = user.userId;\n    this.editName = user.firstName + (user.lastName ? ` ${user.lastName}` : '');\n    return;\n  }\n\n  stopEdit(): void {\n    this.editId = '';\n    this.editName = '';\n    return;\n  }\n\n  saveEdit(user: User): void {\n    this.usersLoading = true;\n    const listOfNames = this.editName.trim().split(' ');\n    if (listOfNames.length > 2) {\n      this.message.error('Please provided only a first name and a last name');\n      this.usersLoading = false;\n      return;\n    }\n    const [firstName, lastName] = listOfNames;\n    this.adminService.updateUser(user.userId, firstName, lastName).subscribe((users: any) => {\n      const updatedUser = users.pop();\n      this.updateUserHelper(updatedUser);\n      this.usersLoading = false;\n    });\n    this.stopEdit();\n  }\n\n  removeUser(userId: string, account: Account): void {\n    this.usersLoading = true;\n    if (account.superAdmin) {\n        this.adminService.assignSuperAdminToUser(userId, false).subscribe((users: any) => {\n          const updatedUser = users.pop();\n          this.updateUserHelper(updatedUser);\n        });\n        return;\n    }\n    this.adminService.removeUserFromAccount(userId, account.id).subscribe((users: any) => {\n      const updatedUser = users.pop();\n      this.updateUserHelper(updatedUser);\n    });\n  }\n\n  blockUser(userId: string, accountId: string, shouldBlock: boolean): void {\n    this.usersLoading = true;\n    this.adminService.blockUserFromAccount(userId, accountId, shouldBlock).subscribe((users: any) => {\n      this.usersLoading = false;\n      const blockedUser = users.pop();\n      this.updateUserHelper(blockedUser);\n    });\n  }\n\n  updateUserHelper(updatedUser: User): void {\n    this.users = this.users.map(user => {\n      if (user.userId === updatedUser.userId) {\n        return updatedUser;\n      }\n      return user;\n    });\n    this.assignUsersToAccounts();\n  }\n\n  resendInvite(email: string, userId: string, accountId: string): void {\n    this.adminService.resendInviteToUser(email, userId, accountId).subscribe(() => {\n      this.message.success(`Invite email sent to ${email}`, { nzDuration: 2500 });\n    });\n  }\n\n  resetPassword(user: any): void {\n    this.adminService.resetPassword(user.userId, user.email).subscribe( UpdatedUser => {\n      this.showPasswordResetAlert = true;\n      setInterval(() => {\n        this.showPasswordResetAlert = false;\n      }, 5000);\n    });\n  }\n\n  updateCheckedSet(userId: string, checked: boolean): void {\n    if (checked) {\n      this.setOfCheckedId.add(userId);\n    } else {\n      this.setOfCheckedId.delete(userId);\n    }\n  }\n\n  onItemChecked(userId: string, checked: boolean): void {\n    this.updateCheckedSet(userId, checked);\n    this.refreshCheckedStatus();\n  }\n\n  refreshCheckedStatus(): void {\n    // this.setOfCheckedId.forEach(item => console.log(item));\n    this.allChecked = this.users.every(({ userId }) => this.setOfCheckedId.has(userId));\n    this.indeterminate = this.users.some(({ userId }) => this.setOfCheckedId.has(userId)) && !this.allChecked;\n  }\n\n  onAllChecked(checked: boolean): void {\n    this.users.forEach(({ userId }) => this.updateCheckedSet(userId, checked));\n    this.refreshCheckedStatus();\n  }\n\n  onExpandChange(accountId: string, checked: boolean): void {\n    this.expandedAccountId = checked ? accountId : '';\n  }\n\n  showNewAccountRow(): void {\n    this.newAccountRowIsHidden = false;\n  }\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "emailVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "phoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "superAdmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "userAccounts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        },
        {
            "name": "User",
            "id": "interface-User-95fbda2bd228b374012c883d71fcc9d7d627419117638e9d971e8c3b281af7b1573c8d9ad100131227760df585f86b48e6fedf102d6c12d0fe5c3e9f07bbc02c-2",
            "file": "projects/admin/src/app/shared/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OrganizationUsers } from '../../pages/admin/components/members/member';\nimport { StatusEnum } from '../services/graphql/graphql.service';\n\nexport interface User {\n  uuid?: string; // Users uuid\n  email: string;\n  name: string;\n  picture: string;\n  nickname: string;\n  selectedOrganizationUuid?: string;\n  firstName?: string;\n  lastName?: string;\n  phone?: string;\n  title?: string;\n  status?: StatusEnum;\n  organizationUsers?: OrganizationUsers[];\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "nickname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "organizationUsers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrganizationUsers[]",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "picture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "selectedOrganizationUuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusEnum",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "uuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "User-2"
        },
        {
            "name": "UserResponse",
            "id": "interface-UserResponse-2b1f30951720cdfcbc3f82f5ec61fc6226a313fe2aea17a6d419c29fa0be438cd472b688cccc5a1a84de92b039bd88d1578b2e6672c66f9f55bb5843f60974b5",
            "file": "projects/explorer/src/app/shared/services/admin.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport {last, map} from 'rxjs/operators';\nimport {environment} from '../../../environments/environment';\n\nexport interface AccountResponse {\n  id: string;\n  name: string;\n  segment: string[];\n  isDisabled: boolean;\n}\n\nexport interface UserResponse {\n  user_id: string;\n  email: string;\n  phone_number: number;\n  first_name: string;\n  last_name: string;\n  email_verified: boolean;\n  accounts: any;\n  is_super_admin: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  apiUrl: string = environment.apiURL;\n\n  constructor(private http: HttpClient) {\n    if (environment.apiURL === '{PLACEHOLDER}') {\n      switch (window.location.hostname) {\n        case 'login.civicexplorer.com':\n          this.apiUrl = 'https://api.civicexplorer.com';\n          break;\n        case 'staging-www.civicexplorer.com':\n          this.apiUrl = 'https://staging-api.civicexplorer.com';\n          break;\n        case 'sandbox-www.civicexplorer.com':\n          this.apiUrl = 'https://sandbox-api.civicexplorer.com';\n          break;\n      }\n    }\n  }\n\n  getAccounts(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + '/explorer/account/all')\n    .pipe(map(res => {\n      return res.data.map((data: AccountResponse) => this.transformAccountData(data));\n    }));\n  }\n\n  createAccount(name: string, segment: string[]): Observable<any> {\n    const body = { name, segment };\n    return this.http.post<any>(this.apiUrl + '/explorer/account/create', body)\n    .pipe(map(res => {\n      return res.data.map((data: AccountResponse) => this.transformAccountData(data));\n    }));\n  }\n\n  disableAccount(accountId: string, isDisabled: boolean): Observable<any> {\n    const body = {id: accountId, isDisabled};\n    return this.http.post<any>(this.apiUrl + '/explorer/account/disable', body)\n    .pipe(map(res => {\n      return res.data.map((data: AccountResponse) => this.transformAccountData(data));\n    }));\n  }\n\n  transformAccountData(accountData: any): any {\n    return {\n      id: accountData.id,\n      name: accountData.name,\n      segment: accountData.segment,\n      isDisabled: accountData.isDisabled\n    };\n  }\n\n  getUsers(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + '/explorer/user/all')\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  updateUser(userId: string, firstName: string, lastName: string): Observable<any> {\n    const body = {user_id: userId,  first_name: firstName, last_name: lastName};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/update', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  inviteUser(email: string, accountId: string, firstName: string, lastName: string, isSuperAdmin: boolean): Observable<any> {\n    const body = { email, account_id: accountId, is_super_admin: isSuperAdmin, first_name: firstName, last_name: lastName};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/invite', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  resendInviteToUser(email: string, userId: string, accountId: string): Observable<any> {\n    const body = { email, user_id: userId, account_id: accountId};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/invite', body);\n  }\n\n  assignSuperAdminToUser(userId: string, isSuperAdmin: boolean): Observable<any> {\n    const body = { user_id: userId, is_super_admin: isSuperAdmin};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/make_super_admin', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  addUserToAccount(userId: string, accountId: string): Observable<any> {\n    const body = { user_id: userId, account_id: accountId };\n    return this.http.post<any>(this.apiUrl + '/explorer/user/add_to_account', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  removeUserFromAccount(userId: string, accountId: string): Observable<any> {\n    const body = { user_id: userId, account_id: accountId };\n    return this.http.post<any>(this.apiUrl + '/explorer/user/remove_from_account', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  blockUserFromAccount(userId: string, accountId: string, shouldBlock: boolean): Observable<any> {\n    const body = {\n      user_id: userId,\n      account_id: accountId,\n      blocked: shouldBlock\n    };\n    return this.http.post<any>(this.apiUrl + '/explorer/user/block_from_account', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  resetPassword(userId: string, email: string): Observable<any> {\n    const body = { email, user_id: userId};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/reset_password', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  transformUserData(userData: any): any {\n    return {\n      userId: userData.user_id,\n      avatar: userData.avatar,\n      email: userData.email,\n      emailVerified: userData.email_verified,\n      phoneNumber: userData.phone_number,\n      firstName: userData.first_name,\n      lastName: userData.last_name,\n      userAccounts: userData.accounts,\n      superAdmin: userData.is_super_admin,\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "accounts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "first_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "is_super_admin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "last_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "phone_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserState",
            "id": "interface-UserState-2fc9147963d75783d0158e47469dbc79787a9201032196d7f7e63da0b72ab2152a23760b55bcf10aeb96adb420d87f46f6ae7dc6a56021b942e534d248b7a3fb",
            "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Organization } from '../../shared/models/organization.model';\nimport * as fromActions from '../actions/user.actions';\n\nexport const userFeatureKey = 'user';\n\nexport interface UserState extends EntityState<Organization> {\n  email: string;\n  name: string;\n  nickname: string;\n  picture: string;\n  selectedOrganizationUuid: string;\n  addOrgsSuccess: boolean;\n  addOrgsFailure: boolean;\n}\n\nexport const adapter: EntityAdapter<Organization> = createEntityAdapter<Organization>({\n  selectId: (org: Organization) => org.uuid,\n});\nexport const initialState: UserState = adapter.getInitialState({\n  email: '',\n  name: '',\n  nickname: '',\n  picture: '',\n  selectedOrganizationUuid: '',\n  addOrgsSuccess: false,\n  addOrgsFailure: false,\n});\n\n\nexport const userReducer = createReducer(\n  initialState,\n\n  on(fromActions.addUserInfo, (state, { user }) => ({\n    ...state,\n    email: user.email,\n    name: user.name,\n    nickname: user.nickname,\n    picture: user.picture,\n  })),\n\n  on(fromActions.addSelectedOrgUuid, (state, { selectedOrganizationUuid }) => ({\n    ...state,\n    selectedOrganizationUuid,\n  })),\n\n  on(fromActions.requestOrganizationsSuccess, (state, { organizations }) => adapter.addMany(organizations, {\n    ...state,\n    addOrgsSuccess: true,\n    addOrgsFailure: false,\n  })),\n\n  on(fromActions.requestOrganizationsFailure, state => ({\n    ...state,\n    addOrgsFailure: true,\n    addOrgsSuccess: false,\n  })),\n);\n\nexport const {\n  selectAll,\n  selectEntities,\n  selectIds,\n  selectTotal,\n} = adapter.getSelectors();\n",
            "properties": [
                {
                    "name": "addOrgsFailure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "addOrgsSuccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nickname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "picture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selectedOrganizationUuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "Window",
            "id": "interface-Window-dd9b0215a9b955ce643c64b16c0f3a4c67c1913171ec2f155350ba2233c4831eeb146b93cf7581ea318fb9f5f29ab965d122096da04978f5c861e57bd6c163b6",
            "file": "projects/explorer/src/app/shared/services/intercom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Apollo, gql  } from 'apollo-angular';\n\ndeclare global {\n  interface Window { \n    Intercom: any; \n    intercomSettings: any;\n  }\n}\n\nconst GET_HASH = gql`\nquery GetHash($email: String!){\n  getIntercomHash(email: $email)\n}\n`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IntercomService {\n  constructor(private apollo: Apollo) { }\n\n  boot(): void {\n    const intercomSettings = {\n      app_id: 'dxv5uqrw',\n    }\n    window.Intercom('boot', intercomSettings);\n  }\n\n  updateForUser(user: any, intercomHash: string): void {\n    window.intercomSettings = {\n      app_id: 'dxv5uqrw',\n      email: user.email,\n      name: user.nickname,\n      user_hash: intercomHash,\n    }\n    window.Intercom('update');\n  }\n\n  updateForVisitor(): void {\n    window.intercomSettings = {\n      app_id: 'dxv5uqrw',\n    }\n    window.Intercom('update');\n  }\n\n  shutdown(): void {\n    window.Intercom('shutdown');\n  }\n\n  fetchHash(email: string): Observable<any> {\n    return this.apollo.watchQuery<any>({\n      query: GET_HASH,\n      variables: {\n        email: email,\n      }\n    }).valueChanges.pipe(map((result) => result.data.getIntercomHash));\n  }\n}\n",
            "properties": [
                {
                    "name": "Intercom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "intercomSettings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AcceptOrganizationUserInviteGQL",
            "id": "injectable-AcceptOrganizationUserInviteGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "AcceptOrganizationUserInviteDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1421
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1421,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AccountService",
            "id": "injectable-AccountService-61187969e23ea9eab920ca8f6177b7536b7f0ed0cec3847b20e3abd086412cad6f1f30679f10dcbf174b29622ade6a0d8f490bca1053a4ed4ba1ae355daa1827",
            "file": "projects/explorer/src/app/shared/services/account.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchAccounts",
                    "args": [
                        {
                            "name": "accountIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformAccountData",
                    "args": [
                        {
                            "name": "accountData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Apollo, gql  } from 'apollo-angular';\n\nconst GET_ALL_ACCOUNTS = gql`\nquery {\n  listAccounts {\n    uuid\n    name\n    segment\n    status\n  }\n}\n`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  constructor(private apollo: Apollo) { }\n\n  fetchAccounts(accountIds?: string[]): Observable<any> {\n    return this.apollo.watchQuery<any>({\n      query: GET_ALL_ACCOUNTS,\n    }).valueChanges.pipe(map((result) => result.data.listAccounts.map(this.transformAccountData)));\n  }\n\n  transformAccountData(accountData: any): any {\n    return {\n      id: accountData.uuid,\n      name: accountData.name,\n      segment: accountData.segment,\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AdminService",
            "id": "injectable-AdminService-2b1f30951720cdfcbc3f82f5ec61fc6226a313fe2aea17a6d419c29fa0be438cd472b688cccc5a1a84de92b039bd88d1578b2e6672c66f9f55bb5843f60974b5",
            "file": "projects/explorer/src/app/shared/services/admin.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [
                {
                    "name": "addUserToAccount",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "assignSuperAdminToUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isSuperAdmin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSuperAdmin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "blockUserFromAccount",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shouldBlock",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldBlock",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createAccount",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "segment",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "segment",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disableAccount",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccounts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "inviteUser",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isSuperAdmin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSuperAdmin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeUserFromAccount",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resendInviteToUser",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformAccountData",
                    "args": [
                        {
                            "name": "accountData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformUserData",
                    "args": [
                        {
                            "name": "userData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport {last, map} from 'rxjs/operators';\nimport {environment} from '../../../environments/environment';\n\nexport interface AccountResponse {\n  id: string;\n  name: string;\n  segment: string[];\n  isDisabled: boolean;\n}\n\nexport interface UserResponse {\n  user_id: string;\n  email: string;\n  phone_number: number;\n  first_name: string;\n  last_name: string;\n  email_verified: boolean;\n  accounts: any;\n  is_super_admin: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  apiUrl: string = environment.apiURL;\n\n  constructor(private http: HttpClient) {\n    if (environment.apiURL === '{PLACEHOLDER}') {\n      switch (window.location.hostname) {\n        case 'login.civicexplorer.com':\n          this.apiUrl = 'https://api.civicexplorer.com';\n          break;\n        case 'staging-www.civicexplorer.com':\n          this.apiUrl = 'https://staging-api.civicexplorer.com';\n          break;\n        case 'sandbox-www.civicexplorer.com':\n          this.apiUrl = 'https://sandbox-api.civicexplorer.com';\n          break;\n      }\n    }\n  }\n\n  getAccounts(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + '/explorer/account/all')\n    .pipe(map(res => {\n      return res.data.map((data: AccountResponse) => this.transformAccountData(data));\n    }));\n  }\n\n  createAccount(name: string, segment: string[]): Observable<any> {\n    const body = { name, segment };\n    return this.http.post<any>(this.apiUrl + '/explorer/account/create', body)\n    .pipe(map(res => {\n      return res.data.map((data: AccountResponse) => this.transformAccountData(data));\n    }));\n  }\n\n  disableAccount(accountId: string, isDisabled: boolean): Observable<any> {\n    const body = {id: accountId, isDisabled};\n    return this.http.post<any>(this.apiUrl + '/explorer/account/disable', body)\n    .pipe(map(res => {\n      return res.data.map((data: AccountResponse) => this.transformAccountData(data));\n    }));\n  }\n\n  transformAccountData(accountData: any): any {\n    return {\n      id: accountData.id,\n      name: accountData.name,\n      segment: accountData.segment,\n      isDisabled: accountData.isDisabled\n    };\n  }\n\n  getUsers(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + '/explorer/user/all')\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  updateUser(userId: string, firstName: string, lastName: string): Observable<any> {\n    const body = {user_id: userId,  first_name: firstName, last_name: lastName};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/update', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  inviteUser(email: string, accountId: string, firstName: string, lastName: string, isSuperAdmin: boolean): Observable<any> {\n    const body = { email, account_id: accountId, is_super_admin: isSuperAdmin, first_name: firstName, last_name: lastName};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/invite', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  resendInviteToUser(email: string, userId: string, accountId: string): Observable<any> {\n    const body = { email, user_id: userId, account_id: accountId};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/invite', body);\n  }\n\n  assignSuperAdminToUser(userId: string, isSuperAdmin: boolean): Observable<any> {\n    const body = { user_id: userId, is_super_admin: isSuperAdmin};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/make_super_admin', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  addUserToAccount(userId: string, accountId: string): Observable<any> {\n    const body = { user_id: userId, account_id: accountId };\n    return this.http.post<any>(this.apiUrl + '/explorer/user/add_to_account', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  removeUserFromAccount(userId: string, accountId: string): Observable<any> {\n    const body = { user_id: userId, account_id: accountId };\n    return this.http.post<any>(this.apiUrl + '/explorer/user/remove_from_account', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  blockUserFromAccount(userId: string, accountId: string, shouldBlock: boolean): Observable<any> {\n    const body = {\n      user_id: userId,\n      account_id: accountId,\n      blocked: shouldBlock\n    };\n    return this.http.post<any>(this.apiUrl + '/explorer/user/block_from_account', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  resetPassword(userId: string, email: string): Observable<any> {\n    const body = { email, user_id: userId};\n    return this.http.post<any>(this.apiUrl + '/explorer/user/reset_password', body)\n    .pipe(map(res => {\n      return res.data.map((data: UserResponse) => this.transformUserData(data));\n    }));\n  }\n\n  transformUserData(userData: any): any {\n    return {\n      userId: userData.user_id,\n      avatar: userData.avatar,\n      email: userData.email,\n      emailVerified: userData.email_verified,\n      phoneNumber: userData.phone_number,\n      firstName: userData.first_name,\n      lastName: userData.last_name,\n      userAccounts: userData.accounts,\n      superAdmin: userData.is_super_admin,\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AllDataGQL",
            "id": "injectable-AllDataGQL-e0922ef028d3641748e019987fde1d728e7bfeb1705e1553755d83aac1b6a2af75ccdb12b3f03f67679b9a2bb8c2eaa9cadffc736361259612afdad4dc54c8de",
            "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "AllDataDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 638
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type AllDataQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type AllDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>>, state?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>>, county?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )> }\n  )>>> }\n);\n\nexport const AllDataDocument = gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllDataGQL extends Apollo.Query<AllDataQuery, AllDataQueryVariables> {\n  document = AllDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 638,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AppEffects",
            "id": "injectable-AppEffects-8725268bec3ffcd29cf7da52ec3eb4190979bd7296791a94bf3e27270a74347e73916f8d651acd28fa5e3d22c0344f3673020f42d5758804481ef8e8f69f5044",
            "file": "projects/admin/src/app/store/effects/app.effects.ts",
            "properties": [
                {
                    "name": "init$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(ROOT_EFFECTS_INIT),\n      switchMap(() => [\n        fromUserActions.requestUserInfo(),\n        fromUserActions.requestOrganizations(),\n        fromUserActions.addSelectedOrgUuid({ selectedOrganizationUuid: localStorage.getItem('selected_org') || '' }),\n      ]),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType, ROOT_EFFECTS_INIT } from '@ngrx/effects';\nimport { switchMap } from 'rxjs/operators';\nimport * as fromUserActions from '../actions/user.actions';\n\n@Injectable()\nexport class AppEffects {\n\n  init$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ROOT_EFFECTS_INIT),\n      switchMap(() => [\n        fromUserActions.requestUserInfo(),\n        fromUserActions.requestOrganizations(),\n        fromUserActions.addSelectedOrgUuid({ selectedOrganizationUuid: localStorage.getItem('selected_org') || '' }),\n      ]),\n    ),\n  );\n\n  constructor(private actions$: Actions) {}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-3db7a4e23d934d0e1f3634cb5e74cb9a533920af00ca6ce9f5047768204d470b49fad1b2c546e4f69b56dd31821c5a60029d33d250b44397e626241d4f7c3e85",
            "file": "projects/admin/src/app/shared/services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "auth0",
                    "defaultValue": "new auth0.WebAuth({\n    clientID: AUTH_CONFIG.clientId,\n    domain: AUTH_CONFIG.domain,\n    redirectUri: AUTH_CONFIG.redirectUri,\n    responseType: AUTH_CONFIG.responseType,\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if user has been authenticated and direct them to login page if not\n\n",
                    "description": "<p>Check if user has been authenticated and direct them to login page if not</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2857,
                                "end": 2864,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": "boolean"
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUsed to call the oauth/login endpoint with credentials and callback options to handle error and successful login\n\n",
                    "description": "<p>Used to call the oauth/login endpoint with credentials and callback options to handle error and successful login</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 879,
                                "end": 884,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "email"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 864,
                                "end": 869,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 870,
                                "end": 878,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 871,
                                    "end": 877,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 149
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 906,
                                "end": 914,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "password"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 891,
                                "end": 896,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 897,
                                "end": 905,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 898,
                                    "end": 904,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 149
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLog the user out and clear the localstorage\n\n",
                    "description": "<p>Log the user out and clear the localstorage</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "setSession",
                    "args": [
                        {
                            "name": "authResult",
                            "type": "auth0.Auth0Result",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the access_token, id_token, and when token expires in the localstorage\n\n",
                    "description": "<p>Set the access_token, id_token, and when token expires in the localstorage</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2186,
                                "end": 2196,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "authResult"
                            },
                            "type": "auth0.Auth0Result",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2160,
                                "end": 2165,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 2166,
                                "end": 2185,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 2167,
                                    "end": 2184,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 177,
                                    "typeName": {
                                        "pos": 2167,
                                        "end": 2184,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 160,
                                        "left": {
                                            "pos": 2167,
                                            "end": 2172,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 0,
                                            "kind": 79,
                                            "escapedText": "auth0"
                                        },
                                        "right": {
                                            "pos": 2173,
                                            "end": 2184,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 0,
                                            "kind": 79,
                                            "escapedText": "Auth0Result"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as auth0 from 'auth0-js';\nimport * as fromActions from '../../../login/store/actions/login.actions';\nimport { AppState } from '../../../store/reducers';\nimport { AUTH_CONFIG } from './auth0-variables';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  // Configure Auth0\n  auth0 = new auth0.WebAuth({\n    clientID: AUTH_CONFIG.clientId,\n    domain: AUTH_CONFIG.domain,\n    redirectUri: AUTH_CONFIG.redirectUri,\n    responseType: AUTH_CONFIG.responseType,\n  });\n\n  constructor(\n    @Inject(DOCUMENT) private doc: Document,\n    private store: Store<AppState>,\n  ) { }\n\n  /**\n   * Used to call the oauth/login endpoint with credentials and callback options to handle error and successful login\n   *\n   * @param {string} email\n   * @param {string} password\n   * @memberof AuthService\n   */\n  login(email: string, password: string): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this.auth0.client.login({\n        realm: 'Username-Password-Authentication',\n        username: email,\n        password,\n      },\n      (err: auth0.Auth0Error | null, authResult: auth0.Auth0Result) => {\n        if (err) {\n          // Dispatch loginFailure action and save error response to the store\n          this.store.dispatch(fromActions.loginFailure({\n            error: {\n              code: err.code,\n              description: err.description,\n              statusCode: err.statusCode,\n            },\n          }));\n\n          return reject({\n            error: {\n              code: err.code,\n              description: err.description,\n              statusCode: err.statusCode,\n            },\n          });\n\n        } else if (authResult) {\n          this.setSession(authResult);\n          // Dispatch login success so we can act on it\n          this.store.dispatch(fromActions.loginSuccess());\n\n          return resolve(true);\n        }\n\n        return reject(false);\n      });\n    });\n  }\n\n  /**\n   * Set the access_token, id_token, and when token expires in the localstorage\n   *\n   * @param {auth0.Auth0Result} authResult\n   * @memberof AuthService\n   */\n  setSession(authResult: auth0.Auth0Result): void {\n    if (authResult.expiresIn && authResult.accessToken && authResult.idToken) {\n      // Set the time that the access token will expire at\n      const expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\n      // Set results in local storage for usage later\n      localStorage.setItem('access_token', authResult.accessToken);\n      localStorage.setItem('id_token', authResult.idToken);\n      localStorage.setItem('expires_at', expiresAt);\n    }\n  }\n\n  /**\n   * Check if user has been authenticated and direct them to login page if not\n   *\n   * @returns {boolean}\n   * @memberof AuthService\n   */\n  isAuthenticated(): boolean {\n    // Make sure token exists\n    const tokenExpiry = localStorage.getItem('expires_at');\n    if (tokenExpiry) {\n      // Check whether the current time is past the expires_at time saved in local storage\n      const expiresAt: number = JSON.parse(tokenExpiry) as number;\n      return new Date().getTime() < expiresAt;\n    }\n    return false;\n  }\n\n  /**\n   * Log the user out and clear the localstorage\n   *\n   * @memberof AuthService\n   */\n  logout(): void {\n    // Remove tokens and expiry time from localStorage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('expires_at');\n    localStorage.removeItem('selected_org');\n\n    this.auth0.logout({ clientID: AUTH_CONFIG.clientId, returnTo: `${this.doc.location.origin}/login` });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BaseComponent",
            "id": "injectable-BaseComponent-ab4ca5071100cbc07d6fb55a5683742d241a1992d2daec80b9e7c2619ab8b19137c2088ea92322d53ea79d62c6912645050902676eee5838eed126d598dd96ac",
            "file": "projects/admin/src/app/core/base/base.component.ts",
            "properties": [
                {
                    "name": "ngUnsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class BaseComponent implements OnDestroy {\n  ngUnsubscribe$ = new Subject<void>();\n\n  ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ChartDataGQL",
            "id": "injectable-ChartDataGQL-1a3044d3ad0687f4c8de838ab4e03aaa6047989f4ab2742053cf3c53ba004b895606aba28f6447743a51492357bf1d231536e2ac5ce266013c87de942766c2ee",
            "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "ChartDataDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 606
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import * as Types from '../../../types';\n\nimport { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\n\nexport interface AgeCategories {\n  __typename?: 'AgeCategories';\n  c_18_to_24?: Maybe<Datapoint>;\n  c_25_to_34?: Maybe<Datapoint>;\n  c_35_to_44?: Maybe<Datapoint>;\n  c_45_to_54?: Maybe<Datapoint>;\n  c_55_to_64?: Maybe<Datapoint>;\n  c_65_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface CivicModel {\n  __typename?: 'CivicModel';\n  most_engaged?: Maybe<Scalars['Int']>;\n  active_participant?: Maybe<Scalars['Int']>;\n  participant?: Maybe<Scalars['Int']>;\n  occasional_participant?: Maybe<Scalars['Int']>;\n  least_engaged?: Maybe<Scalars['Int']>;\n}\n\nexport interface Datapoint {\n  __typename?: 'Datapoint';\n  total?: Maybe<Scalars['String']>;\n  civic_score?: Maybe<Scalars['Float']>;\n  models?: Maybe<Models>;\n}\n\nexport interface DegreeCategories {\n  __typename?: 'DegreeCategories';\n  less_than_high_school?: Maybe<Datapoint>;\n  high_school?: Maybe<Datapoint>;\n  some_college?: Maybe<Datapoint>;\n  bachelors?: Maybe<Datapoint>;\n  graduate?: Maybe<Datapoint>;\n}\n\nexport interface GenderCategories {\n  __typename?: 'GenderCategories';\n  male?: Maybe<Datapoint>;\n  female?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface IncomeCategories {\n  __typename?: 'IncomeCategories';\n  c_30k_or_less?: Maybe<Datapoint>;\n  c_30_to_50k?: Maybe<Datapoint>;\n  c_50_to_75k?: Maybe<Datapoint>;\n  c_75_to_125k?: Maybe<Datapoint>;\n  c_125k_plus?: Maybe<Datapoint>;\n  unknown?: Maybe<Datapoint>;\n}\n\nexport interface Indicators {\n  __typename?: 'Indicators';\n  age?: Maybe<AgeCategories>;\n  gender?: Maybe<GenderCategories>;\n  income?: Maybe<IncomeCategories>;\n  degree?: Maybe<DegreeCategories>;\n  marital?: Maybe<MaritalCategories>;\n}\n\nexport interface MaritalCategories {\n  __typename?: 'MaritalCategories';\n  male_married?: Maybe<Datapoint>;\n  female_married?: Maybe<Datapoint>;\n  male_non_traditional?: Maybe<Datapoint>;\n  female_non_traditional?: Maybe<Datapoint>;\n  male_unknown?: Maybe<Datapoint>;\n  female_unknown?: Maybe<Datapoint>;\n}\n\nexport interface Models {\n  __typename?: 'Models';\n  civic_scores?: Maybe<CivicModel>;\n}\n\nexport interface RootQueryType {\n  __typename?: 'RootQueryType';\n  cache?: Maybe<Scalars['String']>;\n  explorer?: Maybe<Array<Maybe<Segment>>>;\n}\n\n\nexport interface RootQueryTypeCacheArgs {\n  flush?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface RootQueryTypeExplorerArgs {\n  level?: Maybe<Scalars['String']>;\n  segment?: Maybe<Scalars['String']>;\n}\n\nexport interface Segment {\n  __typename?: 'Segment';\n  segment?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  county?: Maybe<Scalars['String']>;\n  totals?: Maybe<Total>;\n  indicators?: Maybe<Indicators>;\n}\n\nexport interface Total {\n  __typename?: 'Total';\n  people?: Maybe<Scalars['Int']>;\n  households?: Maybe<Scalars['Int']>;\n  civic_score?: Maybe<Scalars['Float']>;\n}\n\nexport type ChartDataQueryVariables = Types.Exact<{\n  input?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ChartDataQuery = (\n  { __typename?: 'RootQueryType' }\n  & { national?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Segment' }\n    & Pick<Types.Segment, 'segment' | 'state' | 'county'>\n    & { totals?: Types.Maybe<(\n      { __typename?: 'Total' }\n      & Pick<Types.Total, 'people' | 'households' | 'civic_score'>\n    )>, indicators?: Types.Maybe<(\n      { __typename?: 'Indicators' }\n      & { gender?: Types.Maybe<(\n        { __typename?: 'GenderCategories' }\n        & { male?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, female?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, age?: Types.Maybe<(\n        { __typename?: 'AgeCategories' }\n        & { c_65_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_55_to_64?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_45_to_54?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_35_to_44?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_25_to_34?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_18_to_24?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, degree?: Types.Maybe<(\n        { __typename?: 'DegreeCategories' }\n        & { graduate?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, bachelors?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, some_college?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, less_than_high_school?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )>, income?: Types.Maybe<(\n        { __typename?: 'IncomeCategories' }\n        & { c_125k_plus?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_75_to_125k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_50_to_75k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30_to_50k?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )>, c_30k_or_less?: Types.Maybe<(\n          { __typename?: 'Datapoint' }\n          & Pick<Types.Datapoint, 'total' | 'civic_score'>\n          & { models?: Types.Maybe<(\n            { __typename?: 'Models' }\n            & { civic_scores?: Types.Maybe<(\n              { __typename?: 'CivicModel' }\n              & Pick<Types.CivicModel, 'most_engaged' | 'active_participant' | 'participant' | 'occasional_participant' | 'least_engaged'>\n            )> }\n          )> }\n        )> }\n      )> }\n    )> }\n  )>>> }\n);\n\nexport const ChartDataDocument = gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartDataGQL extends Apollo.Query<ChartDataQuery, ChartDataQueryVariables> {\n  document = ChartDataDocument;\n\n  constructor(apollo: Apollo.Apollo) {\n    super(apollo);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 606,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ChartDataGqlService",
            "id": "injectable-ChartDataGqlService-c339f2a0a89592dac51fb3f9e8955beb63447149985d4d92a3a0afd128549a886ddf5b0d1d2ec6634de2ccc32b2f35b9c4829786e2617871ec12298c6eeb793d",
            "file": "projects/explorer/src/app/shared/services/chart-data-gql.service.ts",
            "properties": [
                {
                    "name": "chartDataGQL",
                    "defaultValue": "gql`\n    query chartData($level: String, $segment: StringOrList, $include: StringOrList ) {\n  county: explorer(level: $level, segment: $segment, include: $include) {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "chartDataNational",
                    "defaultValue": "gql`\n    query chartData($include: StringOrList) {\n  county: explorer(include: $include) {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 320,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "countyData",
                    "defaultValue": "gql`\n  query chartData ($segment: StringOrList){\n    county:explorer (level: \"county\", segment: $segment) {\n      segment\n      state\n      county\n      totals {\n        people\n        households\n        civic_score\n      }\n    }\n  }\n    `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 646,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "multMapData",
                    "defaultValue": "gql`\n  query chartData ($level: String, $segment: StringOrList){\n    county:explorer (level: $level, segment: $segment) {\n      segment\n      state\n      county\n      congress\n      postcode\n      totals {\n        people\n        households\n        civic_score\n      }\n    }\n  }\n    `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 661,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchData",
                    "defaultValue": "gql`\n  query chartData ($input: SearchInput){\n    county:search (input: $input) {\n      label,\n      id,\n      state,\n      stateName,\n      level\n    }\n  }\n    `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 678,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stateData",
                    "defaultValue": "gql`\n  query chartData {\n    states:explorer (level: \"state\") {\n      segment\n      state\n      county\n      totals {\n        people\n        households\n        civic_score\n      }\n    }\n  }\n    `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 631,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {gql} from 'apollo-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class ChartDataGqlService {\n  public chartDataGQL = gql`\n    query chartData($level: String, $segment: StringOrList, $include: StringOrList ) {\n  county: explorer(level: $level, segment: $segment, include: $include) {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  public chartDataNational = gql`\n    query chartData($include: StringOrList) {\n  county: explorer(include: $include) {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        unknown {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  public stateData = gql`\n  query chartData {\n    states:explorer (level: \"state\") {\n      segment\n      state\n      county\n      totals {\n        people\n        households\n        civic_score\n      }\n    }\n  }\n    `;\n\n  public countyData = gql`\n  query chartData ($segment: StringOrList){\n    county:explorer (level: \"county\", segment: $segment) {\n      segment\n      state\n      county\n      totals {\n        people\n        households\n        civic_score\n      }\n    }\n  }\n    `;\n\n  public multMapData = gql`\n  query chartData ($level: String, $segment: StringOrList){\n    county:explorer (level: $level, segment: $segment) {\n      segment\n      state\n      county\n      congress\n      postcode\n      totals {\n        people\n        households\n        civic_score\n      }\n    }\n  }\n    `;\n\n  public searchData = gql`\n  query chartData ($input: SearchInput){\n    county:search (input: $input) {\n      label,\n      id,\n      state,\n      stateName,\n      level\n    }\n  }\n    `;\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 688
            },
            "type": "injectable"
        },
        {
            "name": "ChartsService",
            "id": "injectable-ChartsService-b448b1a844924cd16df2294eefb4762872e76dc042f691b693831f62d134d368d75c1f165af19afd67cbe7bfd602d18d8de741443a241848c07bb8a1255f8901",
            "file": "projects/explorer/src/app/shared/services/charts.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "barChartData",
                    "args": [
                        {
                            "name": "selection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "capitalize",
                    "args": [
                        {
                            "name": "s",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBuckets",
                    "args": [
                        {
                            "name": "bucket",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bucket",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCivicActualAndPercentage",
                    "args": [
                        {
                            "name": "bucket",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bucketList",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chartData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "forSeries",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bucket",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bucketList",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "forSeries",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectionObjectConstruction",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChartsService {\n\n  constructor() { }\n\n  barChartData(selection: any): any[] {\n    const barCharts = [];\n    barCharts.push(this.getData(selection?.age, selection?.name, 'Age'));\n    barCharts.push(this.getBuckets(selection?.age, 'Civic Score By Age'));\n    barCharts.push(this.getData(selection?.degree, selection?.name, 'Education Level'));\n    barCharts.push(this.getBuckets(selection?.degree, 'Civic Score By Education Level'));\n    barCharts.push(this.getData(selection?.income, selection?.name, 'Income'));\n    barCharts.push(this.getBuckets(selection?.income, 'Civic Score By Income'));\n    // barCharts.push(this.getData(selection?.marital, selection?.name, 'Marital Status'));\n    // barCharts.push(this.getBuckets(selection?.marital, 'Civic Score By Marital Status'));\n    barCharts.push(this.getData(selection?.gender, selection?.name, 'Gender'));\n    barCharts.push(this.getBuckets(selection?.gender, 'Civic Score By Gender'));\n\n    return barCharts;\n  }\n\n  getData(input: any, name: string, title: string): any {\n    const chartData: any = { categories: [''], series: [], title };\n    chartData.categories = [];\n    let count = 0;\n    for (const c in input) {\n      if (c) {\n        if (c !== '__typename') {\n          let correctedC = c.replace('c_', '');\n          correctedC = correctedC.replace(/_/g, ' ');\n          correctedC = this.capitalize(correctedC);\n          chartData.categories.push(correctedC);\n          chartData.series.push({name: correctedC, data: [{name: correctedC, y: Number(input[c].total), x: count}]});\n          count++;\n        }\n      }\n    }\n    return chartData;\n  }\n\n  getBuckets(bucket: any, title: string): any {\n    const bucketList = [ 'Most Engaged', 'Active Participant', 'Participant', 'Occasional Participant', 'Least Engaged' ];\n    const chartData: { categories: string[]; series: any[]; percentage: any[]; totals: any; title: string; type: boolean }\n      = { categories: [], series: [], percentage: [], totals: {}, title, type: true};\n    const tempArray = [];\n    for (const group in bucket) {\n      if (group && group !== '__typename') {\n        chartData.categories.push(group);\n        let correctedC = group.replace('c_', '');\n        correctedC = correctedC.replace(/_/g, ' ');\n        correctedC = this.capitalize(correctedC);\n        tempArray.push(correctedC);\n        let getTotal = 0;\n        for (const total in bucket[group].models.civic_scores) {\n          if (total && total !== '__typename') {\n            getTotal = getTotal + Number(bucket[group].models.civic_scores[total]);\n          }\n        }\n        chartData.totals[group] = getTotal;\n      }\n    }\n    chartData.series = this.getCivicActualAndPercentage(bucket, bucketList, chartData, true);\n    chartData.percentage = this.getCivicActualAndPercentage(bucket, bucketList, chartData, false);\n    chartData.categories = tempArray;\n    return chartData;\n  }\n\n  getCivicActualAndPercentage(bucket: any, bucketList: any, chartData: any, forSeries: boolean): any[] {\n    const results = [];\n    for (const list of bucketList) {\n      let changeForGraphQl = list.toLowerCase();\n      changeForGraphQl = changeForGraphQl.replace(/ /g, '_');\n      const tempObj: {name: string; data: any[]} = {name: list, data: []};\n      for (const dataList of chartData.categories) {\n\n        if (dataList !== '__typename') {\n          if (forSeries) {\n            tempObj.data.push(Number(bucket[dataList].models.civic_scores[changeForGraphQl] || 0));\n          } else {\n            tempObj.data.push(\n              Math.floor(Number(\n                ((Number(bucket[dataList].models.civic_scores[changeForGraphQl] || 0) / chartData.totals[dataList]) * 100),\n              )),\n            );\n          }\n        }\n      }\n      results.push(tempObj);\n    }\n    return results;\n  }\n\n  capitalize(s: any): any\n  {\n    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n    return s && s[0].toUpperCase() + s.slice(1);\n  }\n\n  selectionObjectConstruction(data: any): any {\n    const tempObj: any = {};\n    tempObj.people = data.totals.people;\n    tempObj.households = data.totals.households;\n    tempObj.score = data.totals.civic_score;\n    tempObj.gender = data.indicators.gender;\n    tempObj.age = data.indicators.age;\n    tempObj.degree = data.indicators.degree;\n    tempObj.income = data.indicators.income;\n    tempObj.marital = data.indicators.marital;\n\n    return tempObj;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "CommunitiesService",
            "id": "injectable-CommunitiesService-53077599f8730323afc5047b3aa1b8719dd29e009911a306817247a31df9ee7cb76337b0d6f2effd3b0d0df7befe77a4c46a263da75c14d8d22ef12531fb0af8",
            "file": "projects/explorer/src/app/shared/services/communities.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "communityInput",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "communityInput",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCommunity",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCommunities",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transformCommunity",
                    "args": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "communityInput",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "communityInput",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst GET_ALL = gql`\n  query ListCommunities($accountId: ID!){\n    listCommunities(accountId: $accountId) {\n      uuid\n      name\n      description\n      notes\n      selections\n      criteriaFilters\n      geoFilters\n    }\n  }\n`;\n\nconst CREATE = gql`\n  mutation CreateCommunity($input: CommunityInput!){\n    createCommunity(input: $input) {\n      name\n      description\n      notes\n      status\n    }\n  }\n`;\n\nconst UPDATE = gql`\n  mutation UpdateCommunity($input: CommunityInput!){\n    updateCommunity(input: $input) {\n      name\n      description\n      notes\n      status\n    }\n  }\n`;\n\nconst DELETE_COMMUNITY = gql`\n  mutation DeleteCommunity($input: CommunityInput!) {\n    deleteCommunity(input: $input)\n  }\n`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommunitiesService {\n\n  constructor(private apollo: Apollo) { }\n\n  getCurrentAccount(): string {\n    return localStorage.getItem('explorer_account') || '';\n  }\n\n  getCommunities(): Observable<any> {\n    const accountId = this.getCurrentAccount(); \n    return this.apollo.watchQuery<any>({\n      query: GET_ALL,\n      variables: {\n        accountId\n      }\n    }).valueChanges.pipe(map((result) => result.data.listCommunities.map(this.transformCommunity)));\n  }\n\n  create(communityInput: any): Observable<any> {\n    const accountId = this.getCurrentAccount(); \n    return this.apollo.mutate({\n      mutation: CREATE,\n      variables: {\n        input: {\n          accountId,\n          ...communityInput\n        }\n      }\n    }).pipe(map((result: any) => result.data.createCommunity));\n  }\n\n  update(communityInput: any): Observable<any> {\n    const accountId = this.getCurrentAccount(); \n    return this.apollo.mutate({\n      mutation: UPDATE,\n      variables: {\n        input: {\n          accountId,\n          ...communityInput\n        }\n      }\n    }).pipe(map((result: any) => result.data.updateCommunity));\n  }\n\n  deleteCommunity(uuid: string) {\n    return this.apollo.mutate<any>({\n      mutation: DELETE_COMMUNITY,\n      variables: {\n        input: {\n          uuid: uuid,\n        }\n      }}).pipe(map((result: any) => result.data.deleteCommunity));\n  }\n\n  transformCommunity(community: any): any {\n    if (typeof community.selections === 'string'){\n      community.selections = JSON.parse(community.selections);\n    }\n    if (typeof community.criteriaFilters === 'string'){\n      community.criteriaFilters = JSON.parse(community.criteriaFilters);\n    }\n    if (typeof community.geoFilters === 'string'){\n      community.geoFilters = JSON.parse(community.geoFilters);\n    }\n    return community;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CreateOrganizationGQL",
            "id": "injectable-CreateOrganizationGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "CreateOrganizationDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1147
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1147,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CurrentUserService",
            "id": "injectable-CurrentUserService-803fc5b8464189c184b6486d661fb56a07849f0492c5f33f6b9ea78254007eb8f6223ae8225f4cdcdb9416bc7d811d65007f47a2c63cba7e649b728c956ceb02",
            "file": "projects/explorer/src/app/shared/services/current-user.service.ts",
            "properties": [
                {
                    "name": "accounts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "audience",
                    "defaultValue": "environment.auth.audience",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearAccountSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAccounts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSuperAdmin",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAccounts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AuthService } from '@auth0/auth0-angular';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport {AdminService} from './admin.service';\nimport {environment} from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentUserService {\n  public audience: string = environment.auth.audience;\n  private currentUser: any;\n  private selectedAccount: any;\n  private accounts?: any[];\n\n  constructor(\n    private auth: AuthService,\n  ) {\n    if (environment.auth.audience === '{PLACEHOLDER}') {\n      switch (window.location.hostname) {\n      case 'login.civicexplorer.com':\n        this.audience = 'http://helmteam.us';\n        break;\n      case 'staging-www.civicexplorer.com':\n        this.audience = 'http://helmteam.us';\n        break;\n      }\n    }\n  }\n\n  setUser(user: any): any {\n    this.currentUser = user;\n    this.accounts = user[this.audience + '/app_metadata']?.explorer?.accounts.filter((act: any) => !(act.blocked || act.isAccountDisabled));\n    this.setAccounts();\n    return this.currentUser;\n  }\n\n  setAccounts(): void {\n    if (this.accounts?.length === 1) {\n      this.selectAccount(this.accounts[0]);\n    } else {\n      // tslint:disable-next-line:radix\n      const savedAccount = localStorage.getItem('explorer_account') || '';\n      if (savedAccount) {\n        this.selectAccount(this.accounts?.find(a => a.id === savedAccount));\n      }\n    }\n  }\n\n  getUser(): Observable<any> {\n    if (this.currentUser) {\n      return of(this.currentUser);\n    }\n\n    return this.auth.user$.pipe(\n      map((user: any) => {\n        if (user) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return this.setUser(user);\n        }\n      }),\n    );\n  }\n\n  isSuperAdmin(): Observable<boolean> {\n    if (this.currentUser) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return of(this.currentUser[this.audience + '/app_metadata']?.explorer?.admin);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return this.getUser().pipe(\n      map(user => {\n        if (user) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return user[this.audience + '/app_metadata']?.explorer?.admin;\n        }\n        return;\n      }),\n    );\n  }\n\n  getAccounts(): Observable<any> {\n    if (this.accounts) {\n      return of(this.accounts);\n    }\n\n    return this.getUser().pipe(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      map(() => this.accounts),\n    );\n  }\n\n  selectAccount(account: any): void {\n    this.selectedAccount = account;\n    if (account && account.id) {\n      localStorage.setItem('explorer_account', account.id);\n    }\n  }\n\n  getAccount(): Observable<any> {\n    if (this.selectedAccount) {\n      return of(this.selectedAccount);\n    }\n\n    return this.getUser().pipe(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      map(() => this.selectedAccount),\n    );\n  }\n\n  destroy(): void {\n    this.currentUser = undefined;\n    this.selectedAccount = undefined;\n    localStorage.removeItem('explorer_account');\n  }\n\n  clearAccountSelection(): void {\n    this.selectedAccount = undefined;\n    localStorage.removeItem('explorer_account');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DeleteOrganizationUserGQL",
            "id": "injectable-DeleteOrganizationUserGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "DeleteOrganizationUserDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1193
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1193,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DisableOrganizationGQL",
            "id": "injectable-DisableOrganizationGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "DisableOrganizationDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1211
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1211,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EnableOrganizationGQL",
            "id": "injectable-EnableOrganizationGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "EnableOrganizationDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1229
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1229,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ExplorerEffects",
            "id": "injectable-ExplorerEffects-2269c42aaee72bed308499399e76b50b32b6ac4e91c595a78189e501c9f500ef7bfa3834648872e023b3e9a78e75da1652368de5c966322541d0b8cc36d168d9",
            "file": "projects/explorer/src/app/shared/stores/state-store/explorer.effects.ts",
            "properties": [
                {
                    "name": "loadStates$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(ExplorerActions.loadExplorersStates),\n    mergeMap(() => this.mapservice.getStateData().pipe(\n      map(states => ExplorerActions.loadExplorersStatesSuccess({states})),\n      catchError(error => of(ExplorerActions.loadExplorersStatesFailure(error))),\n    )),\n  ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { mergeMap, map, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\nimport * as ExplorerActions from './explorer.actions';\nimport { MapService } from '../../services/map.service';\n\n\n\n@Injectable()\nexport class ExplorerEffects {\n\n  loadStates$ = createEffect(() => this.actions$.pipe(\n    ofType(ExplorerActions.loadExplorersStates),\n    mergeMap(() => this.mapservice.getStateData().pipe(\n      map(states => ExplorerActions.loadExplorersStatesSuccess({states})),\n      catchError(error => of(ExplorerActions.loadExplorersStatesFailure(error))),\n    )),\n  ),\n  );\n\n\n  constructor(private actions$: Actions, private mapservice: MapService) {}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mapservice",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapservice",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ExplorerFiltersEffects",
            "id": "injectable-ExplorerFiltersEffects-cac6d65775bd35e48041530a291e76ff63ad5f1b9165000c1baa04d89435fcb520d639915e5343bc3f7b035c54f6940571cdbc5a0e4dacb23fef652b562191a6",
            "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, concatMap } from 'rxjs/operators';\nimport { Observable, EMPTY, of } from 'rxjs';\n\nimport * as ExplorerFiltersActions from './explorer-filters.actions';\n\n\n\n@Injectable()\nexport class ExplorerFiltersEffects {\n\n  // loadExplorerFilterss$ = createEffect(() => {\n  //   return this.actions$.pipe(\n  //\n  //     ofType(ExplorerFiltersActions.loadExplorerFilterss),\n  //     concatMap(() =>\n  //       /** An EMPTY observable only emits completion. Replace with your own observable API request */\n  //       EMPTY.pipe(\n  //         map(data => ExplorerFiltersActions.loadExplorerFilterssSuccess({ data })),\n  //         catchError(error => of(ExplorerFiltersActions.loadExplorerFilterssFailure({ error }))))\n  //     )\n  //   );\n  // });\n\n\n\n  constructor(private actions$: Actions) {}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ExplorerGeoFilterEffects",
            "id": "injectable-ExplorerGeoFilterEffects-c7e1af65dc1d76874955cad668e0d07335718202b48bb9652ada096dd0cd44a776588a67f3c0d32a82f345aadc2fce69284e40ed618adac008ca289b948009fd",
            "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, concatMap } from 'rxjs/operators';\nimport { Observable, EMPTY, of } from 'rxjs';\n\nimport * as ExplorerGeoFilterActions from './explorer-geo-filter.actions';\n\n\n\n@Injectable()\nexport class ExplorerGeoFilterEffects {\n\n  // loadExplorerGeoFilters$ = createEffect(() => {\n  //   return this.actions$.pipe(\n  //\n  //     ofType(ExplorerGeoFilterActions.loadExplorerGeoFilters),\n  //     concatMap(() =>\n  //       /** An EMPTY observable only emits completion. Replace with your own observable API request */\n  //       EMPTY.pipe(\n  //         map(data => ExplorerGeoFilterActions.loadExplorerGeoFiltersSuccess({ data })),\n  //         catchError(error => of(ExplorerGeoFilterActions.loadExplorerGeoFiltersFailure({ error }))))\n  //     )\n  //   );\n  // });\n\n\n\n  constructor(private actions$: Actions) {}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FindMembersGQL",
            "id": "injectable-FindMembersGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "FindMembersDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1319
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1319,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FindMyOrganizationsGQL",
            "id": "injectable-FindMyOrganizationsGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "FindMyOrganizationsDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 985
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 985,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FindOrganizationsGQL",
            "id": "injectable-FindOrganizationsGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "FindOrganizationsDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 965
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 965,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FindOrganizationsWithRolesGQL",
            "id": "injectable-FindOrganizationsWithRolesGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "FindOrganizationsWithRolesDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1105
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1105,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FindOrganizationTreesGQL",
            "id": "injectable-FindOrganizationTreesGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "FindOrganizationTreesDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1042
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1042,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FindRolesGQL",
            "id": "injectable-FindRolesGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "FindRolesDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1248
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1248,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FindUserGQL",
            "id": "injectable-FindUserGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "FindUserDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1286
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1286,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GeographicService",
            "id": "injectable-GeographicService-1f24153d10b9f46f0ad99abc939c4d092b90f8d65aa17ca94177e409fd1d32e46a5afb2486707bdb2c0cea92a6d3e8deebf3b004fd8633d31fb03c538864c4ff",
            "file": "projects/explorer/src/app/shared/services/geographic.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>postcodes {\nid\nname\n}\ncongressional {\nid\nname\n}</p>\n",
            "rawdescription": "\n\npostcodes {\nid\nname\n}\ncongressional {\nid\nname\n}\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst GET_ALL = gql`\n  query {\n    segment {\n      id\n      name\n      segments {\n          counties {\n              id\n              name\n          }\n      }\n    }\n  }\n`;\n\n/**\n  postcodes {\n      id\n      name\n  }\n  congressional {\n      id\n      name\n  }\n */\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeographicService {\n\n  constructor(private apollo: Apollo) { }\n\n  fetchAll(): Observable<any> {\n    return this.apollo.watchQuery<any>({\n      query: GET_ALL,\n    }).valueChanges.pipe(map((result) => result?.data?.segment));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GQL",
            "id": "injectable-GQL-0e545a4aeada50af2811b022bb96fb73d01def43f607baa9d1e43fb8ee2489d72da4e20a952384051511dfa410de7caf79d8dec6d615cf3d1b522f7507699f00",
            "file": "projects/forms/src/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "Document",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 154
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n  DateTime: any;\n  /** A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier. */\n  UUID: any;\n};\n\nexport type CreateFormInput = {\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: InputMaybe<Scalars['String']>;\n};\n\nexport type Form = {\n  __typename?: 'Form';\n  uuid: Scalars['UUID'];\n  name?: Maybe<Scalars['String']>;\n  organizationUuid: Scalars['UUID'];\n  status?: Maybe<Status>;\n  createdBy: Scalars['UUID'];\n  createdAt?: Maybe<Scalars['DateTime']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  description?: Maybe<Scalars['String']>;\n  content?: Maybe<Scalars['String']>;\n};\n\nexport type FormConnection = {\n  __typename?: 'FormConnection';\n  edges: Array<FormEdge>;\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\nexport type FormEdge = {\n  __typename?: 'FormEdge';\n  node: Form;\n  cursor: Scalars['String'];\n};\n\nexport type FormFilterInput = {\n  createdBy?: InputMaybe<Scalars['UUID']>;\n  formFolderID?: InputMaybe<Scalars['UUID']>;\n  search?: InputMaybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createForm?: Maybe<Form>;\n};\n\n\nexport type MutationCreateFormArgs = {\n  input: CreateFormInput;\n};\n\nexport type OrderByInput = {\n  direction?: InputMaybe<OrderType>;\n  fieldName: OrderFieldName;\n};\n\nexport enum OrderFieldName {\n  Name = 'NAME',\n  Created = 'CREATED',\n  Updated = 'UPDATED'\n}\n\nexport enum OrderType {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  hasNextPage: Scalars['Boolean'];\n  startCursor?: Maybe<Scalars['String']>;\n  endCursor?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  _service: _Service;\n  form?: Maybe<Form>;\n  forms: FormConnection;\n};\n\n\nexport type QueryFormArgs = {\n  uuid: Scalars['UUID'];\n};\n\n\nexport type QueryFormsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  filter?: InputMaybe<FormFilterInput>;\n  orderBy?: InputMaybe<OrderByInput>;\n};\n\nexport enum Status {\n  Deleted = 'DELETED',\n  Draft = 'DRAFT',\n  Published = 'PUBLISHED'\n}\n\nexport type _Service = {\n  __typename?: '_Service';\n  /** The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied */\n  sdl?: Maybe<Scalars['String']>;\n};\n\nexport type Unnamed_1_QueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type Unnamed_1_Query = { __typename?: 'Query', forms: { __typename?: 'FormConnection', edges: Array<{ __typename?: 'FormEdge', node: { __typename?: 'Form', name?: string | null | undefined, uuid: any, organizationUuid: any, status?: Status | null | undefined, createdBy: any, createdAt?: any | null | undefined, updatedAt?: any | null | undefined, description?: string | null | undefined, content?: string | null | undefined } }> } };\n\nexport const Document = gql`\n    {\n  forms(first: 2) {\n    edges {\n      node {\n        name\n        uuid\n        organizationUuid\n        status\n        createdBy\n        createdAt\n        updatedAt\n        description\n        content\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GQL extends Apollo.Query<Query, QueryVariables> {\n    document = Document;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 154,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HighchartMapService",
            "id": "injectable-HighchartMapService-d808c32faf52c7a3c84e054902c99a6bb3bd8619f63616ec48e9bdf1fffab9333968e7e13b778b1225afcdcdbc044a0b5f9385e724df14b187e286461c01a990",
            "file": "projects/explorer/src/app/shared/services/highchart-map.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addNewSeries",
                    "args": [
                        {
                            "name": "mapData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "joinBy",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mapData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "joinBy",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChart",
                    "args": [
                        {
                            "name": "mapData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "joinBy",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mapData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "joinBy",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getJsonfile",
                    "args": [
                        {
                            "name": "region",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "region",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ThousandSuffixesPipe } from '../pipes/thousand-suff.pipe';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HighchartMapService {\n\n  constructor(private thousandSuff: ThousandSuffixesPipe, private http: HttpClient) { }\n\n  getChart(mapData: any, data: any, joinBy?: any[]): any {\n    const getSuffixes = (a: any, b: any) => this.thousandSuff.transform(a, b);\n    const map = {\n      chart: {\n        backgroundColor: 'transparent',\n        height: '50%',\n        style: {\n          cursor: 'grab',\n        },\n      },\n      credits: {\n        enabled: false,\n      },\n      legend: {\n        enabled: false,\n      },\n      tooltip: {\n        useHTML: true,\n        // tslint:disable-next-line:typedef\n        formatter(): any {\n          // @ts-ignore\n          if (this.point.value !== 0) {\n            let score = 0;\n            // @ts-ignore\n            if (this.point?.options?.valueUpdated) {\n              // @ts-ignore\n              score = Math.round(((Number(this.point.value) + Number.EPSILON) * 100) / 10);\n            } else {\n              // @ts-ignore\n              score = Math.round((Number(this.point.value) + Number.EPSILON) * 100);\n            }\n            let colorValue = 'tooltip-score-color-two';\n            if (score > 33 && score < 47) {\n              colorValue = 'tooltip-score-color-three';\n            } else if (score > 46 && score < 55) {\n              colorValue = 'tooltip-score-color-four';\n            } else if (score > 54 && score < 60) {\n              colorValue = 'tooltip-score-color-five';\n            } else if (score > 59 && score < 70) {\n              colorValue = 'tooltip-score-color-six';\n            } else if (score > 69) {\n              colorValue = 'tooltip-score-color-seven';\n            }\n            // @ts-ignore\n            const name = this.point.county ? this.point.county : this.point.name;\n            // @ts-ignore\n            const people = this.point.county\n              // @ts-ignore\n              ? getSuffixes(Number(this.point.totals.people), 2) : getSuffixes(Number(this.point.people), 2);\n            // @ts-ignore\n            const households = this.point.county\n              // @ts-ignore\n              ? getSuffixes(Number(this.point.totals.households), 2) : getSuffixes(Number(this.point.households), 2);\n\n            // @ts-ignore\n            return `<div class=\"tooltip-wrapper\"><div class=\"tooltip-upper\"><span class=\"tooltip-score ${colorValue}\">${score}</span><span class=\"tooltip-name\">${name}</span></div><div class=\"tooltip-lower\"><div class=\"tooltip-lower-left\"><span class=\"tooltip-person-icon\"></span>PEOPLE<br><span class=\"tooltip-lower-numbers\">${people}</span></div><div class=\"tooltip-lower-right\"><span class=\"tooltip-home-icon\"></span>HOUSEHOLDS<br><span class=\"tooltip-lower-numbers\">${households}</span></div></div></div>`;\n          } else {\n            return '<div class=\"tooltip-wrapper\">Call your sales representative for access to this data.</div>';\n          }\n        },\n      },\n      title: {\n        text: '',\n      },\n      colorAxis: {\n        min: 0,\n        max: 25,\n        stops: [\n          [0, '#ebebeb'],\n          [0.010, '#dfc27d'],\n          [0.014, '#f6e8c3'],\n          [0.018, '#e1ead7'],\n          [0.020, '#c7eae5'],\n          [0.025, '#80cdc1'],\n          [0.030, '#01665e'],\n          [1, '#3d3d3d'],\n        ],\n        labels: {\n          format: '{value}%',\n        },\n      },\n\n      mapNavigation: {\n        enabled: false,\n        buttonOptions: {\n          verticalAlign: 'bottom',\n        },\n      },\n      plotOptions: {\n        map: {\n          states: {\n            hover: {\n              color: '#F8BA03',\n            },\n          },\n        },\n        mapline: {\n          showInLegend: false,\n          enableMouseTracking: false,\n        },\n      },\n      series: [\n        {\n          name: 'National',\n          mapData,\n          data,\n          visible: true,\n          joinBy,\n          states: {\n            hover: {\n              color: 'rgba(225, 234, 215, 0.5)',\n              borderColor: 'gray',\n            },\n            select: {\n              enabled: true,\n              color: '#d9d7d7',\n            },\n          },\n          point: {\n            events: {\n            },\n          },\n        },\n      ],\n    };\n    return map;\n  }\n\n  addNewSeries(mapData: any, data: any, joinBy?: any[]): any {\n    const newSeries = {\n      mapData,\n      data,\n      joinBy,\n      states: {\n        hover: {\n          color: 'rgba(225, 234, 215, 0.5)',\n          borderColor: 'gray',\n        },\n        select: {\n          enabled: true,\n          color: '#d9d7d7',\n        },\n      },\n      events: {\n      },\n\n      dataLabels: {\n        enabled: false,\n      },\n    };\n    return newSeries;\n  }\n  getJsonfile(region: string, location: string): Observable<any> {\n    if (region === 'district') {\n      return this.http.get(`assets/maps/postal-districts/${location}-cd-1e2.json`);\n    } else if (region === 'postal') {\n      return this.http.get(`assets/maps/postal-districts/${location}-zip-1e2.json`);\n    }else {\n      return this.http.get(`assets/maps/counties/${location}-all.geo.json`);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "thousandSuff",
                        "type": "ThousandSuffixesPipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "thousandSuff",
                        "type": "ThousandSuffixesPipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IntercomService",
            "id": "injectable-IntercomService-dd9b0215a9b955ce643c64b16c0f3a4c67c1913171ec2f155350ba2233c4831eeb146b93cf7581ea318fb9f5f29ab965d122096da04978f5c861e57bd6c163b6",
            "file": "projects/explorer/src/app/shared/services/intercom.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "boot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchHash",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shutdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateForUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "intercomHash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "intercomHash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateForVisitor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Apollo, gql  } from 'apollo-angular';\n\ndeclare global {\n  interface Window { \n    Intercom: any; \n    intercomSettings: any;\n  }\n}\n\nconst GET_HASH = gql`\nquery GetHash($email: String!){\n  getIntercomHash(email: $email)\n}\n`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IntercomService {\n  constructor(private apollo: Apollo) { }\n\n  boot(): void {\n    const intercomSettings = {\n      app_id: 'dxv5uqrw',\n    }\n    window.Intercom('boot', intercomSettings);\n  }\n\n  updateForUser(user: any, intercomHash: string): void {\n    window.intercomSettings = {\n      app_id: 'dxv5uqrw',\n      email: user.email,\n      name: user.nickname,\n      user_hash: intercomHash,\n    }\n    window.Intercom('update');\n  }\n\n  updateForVisitor(): void {\n    window.intercomSettings = {\n      app_id: 'dxv5uqrw',\n    }\n    window.Intercom('update');\n  }\n\n  shutdown(): void {\n    window.Intercom('shutdown');\n  }\n\n  fetchHash(email: string): Observable<any> {\n    return this.apollo.watchQuery<any>({\n      query: GET_HASH,\n      variables: {\n        email: email,\n      }\n    }).valueChanges.pipe(map((result) => result.data.getIntercomHash));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MapService",
            "id": "injectable-MapService-c9089120aa058025b7e071a4b8e7aefc2f8c58b099f768049eb33a9c0303438b4e63a07fbfd37be866f7c06f1f6e5600aa1374b5b6cdf254fdfadc565e33ecaa",
            "file": "projects/explorer/src/app/shared/services/map.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAllAllData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllChartData",
                    "args": [
                        {
                            "name": "segment",
                            "type": "any | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "filters",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "segment",
                            "type": "any | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllChartDataNational",
                    "args": [
                        {
                            "name": "filters",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCountyData",
                    "args": [
                        {
                            "name": "selecetedMap",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selected",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filters",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selecetedMap",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selected",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSearchData",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStateData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { AllDataGQL } from './map-charts.generated';\nimport { ChartDataGQL } from './bar-charts.generated';\nimport * as Apollo from 'apollo-angular';\nimport { ChartDataGqlService } from './chart-data-gql.service';\n\n@Injectable({\n  providedIn: 'root',\n})\n\n\nexport class MapService {\n  private apiUrl: string = environment.apiURL;\n\n  constructor(\n    private http: HttpClient,\n    private allData: AllDataGQL,\n    private chartDataGQL: ChartDataGQL,\n    private apollo: Apollo.Apollo,\n    private ChartDataGql: ChartDataGqlService,\n  ) {\n\n    if (environment.apiURL === '{PLACEHOLDER}') {\n      switch (window.location.hostname) {\n        case 'login.civicexplorer.com':\n          this.apiUrl = 'https://production.explorer.organizer.helmahead.com';\n          break;\n        case 'staging-www.civicexplorer.com':\n          this.apiUrl = 'https://staging.explorer.organizer.helmahead.com';\n          break;\n        case 'sandbox-www.civicexplorer.com':\n          this.apiUrl = 'https://sandbox.explorer.organizer.helmahead.com';\n          break;\n      }\n    }\n  }\n\n  getStateData(): Observable<any> {\n    return this.apollo.watchQuery<any>({query: this.ChartDataGql.stateData}).valueChanges.pipe(map(res => {\n      const tempVal = res.data;\n      const finalVersion: {states: any} = {states: ''};\n      const tempHolder = tempVal.states.map((data: any) => ({\n        id: data.segment,\n        code: data.segment.replace('US-', ''),\n        name: data.state,\n        value: data.totals.civic_score,\n        people: data.totals.people,\n        households: data.totals.households,\n        category: 'state',\n      }));\n      finalVersion.states = tempHolder;\n      return finalVersion.states;\n    }));\n  }\n\n  getCountyData(selecetedMap: string, selected: string, filters?: string | null): Observable<any> {\n    return this.apollo.watchQuery<any>({\n      query: this.ChartDataGql.multMapData,\n      variables: {level: selecetedMap, segment: { state: selected}}})\n      .valueChanges.pipe(map(res => res));\n  }\n\n  getAllAllData(): Observable<any> {\n    return this.allData.watch().valueChanges.pipe(map((res: any) => {\n      const tempVal = res.data;\n      const finalVersion: {counties: any; countries: any; states: any} = {counties: '', countries: '', states: ''};\n      let tempHolder;\n      tempHolder = tempVal.county.map((data: any) => ({\n        id: data.segment,\n        code: data.segment.toLowerCase(),\n        name: data.county,\n        value: data.totals.civic_score,\n        people: data.totals.people,\n        households: data.totals.households,\n        state: data.state,\n        category: 'county',\n      }));\n      finalVersion.counties = tempHolder;\n      tempHolder = tempVal.state.map((data: any) => ({\n        id: data.segment,\n        code: data.segment.replace('US-', ''),\n        name: data.state,\n        value: data.totals.civic_score,\n        people: data.totals.people,\n        households: data.totals.households,\n        category: 'state',\n      }));\n      finalVersion.states = tempHolder;\n      tempHolder = tempVal.national.map((data: any) => ({\n        id: data.segment,\n        name: data.segment,\n        score: data.totals.civic_score,\n        people: data.totals.people,\n        households: data.totals.households,\n        gender: data.indicators.gender,\n        age: data.indicators.age,\n        degree: data.indicators.degree,\n        income: data.indicators.income,\n        category: 'country',\n      }));\n      finalVersion.countries = tempHolder;\n      return finalVersion;\n    }));\n  }\n\n  getAllChartData(segment: any | undefined, level?: string | null, filters?: string | null): Observable<any>{\n    const abortController = new AbortController();\n    return this.apollo.watchQuery<any>\n    ({\n      query: this.ChartDataGql.chartDataGQL,\n      variables: {level, segment, include: filters},\n      context: { fetchOptions: { signal: abortController.signal }, queryDeduplication: false}})\n      .valueChanges.pipe(map(res => res));\n  }\n\n  getAllChartDataNational(filters: any): Observable<any>{\n    const abortController = new AbortController();\n    return this.apollo.watchQuery<any>\n    ({\n      query: this.ChartDataGql.chartDataNational,\n      variables: {include: filters},\n      context: { fetchOptions: { signal: abortController.signal }, queryDeduplication: false}})\n      .valueChanges.pipe(map(res => res));\n  }\n\n  getSearchData(input: any): Observable<any> {\n    return this.apollo.watchQuery<any>({\n      query: this.ChartDataGql.searchData,\n      variables: {input: {term: input}}})\n      .valueChanges.pipe(map(res => res));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "allData",
                        "type": "AllDataGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartDataGQL",
                        "type": "ChartDataGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ChartDataGql",
                        "type": "ChartDataGqlService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "allData",
                        "type": "AllDataGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartDataGQL",
                        "type": "ChartDataGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ChartDataGql",
                        "type": "ChartDataGqlService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MixpanelService",
            "id": "injectable-MixpanelService-f64944152a9906bf215da4b309cb61d56b412d69a9409cfd77e0b19cc95a88046e3b6609bfd6219257e0719cb67cc63046b182402e3ecf52aac5e35210d2f22f",
            "file": "projects/explorer/src/app/shared/services/mixpanel.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "identify",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIdentify a user with a unique ID to track user activity across devices, tie a user to their events, and create a user profile.\n\n@ param ['123'] String.\n@ memberof MixpanelService\n",
                    "description": "<p>Identify a user with a unique ID to track user activity across devices, tie a user to their events, and create a user profile.</p>\n<p>@ param [&#39;123&#39;] String.\n@ memberof MixpanelService</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitialize mixpanel.\n\n@ param userToken\n@ memberof MixpanelService\n",
                    "description": "<p>Initialize mixpanel.</p>\n<p>@ param userToken\n@ memberof MixpanelService</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "items",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPush new Super Properties to mixpanel.\n\n@ param [items={}] Items object with custom properties that will be include with each event you send.\n@ memberof MixpanelService\n",
                    "description": "<p>Push new Super Properties to mixpanel.</p>\n<p>@ param [items={}] Items object with custom properties that will be include with each event you send.\n@ memberof MixpanelService</p>\n",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPeople",
                    "args": [
                        {
                            "name": "items",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "track",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPush new action to mixpanel.\n\n@ param id Name of the action to track.\n@ param [action={}] Actions object with custom properties.\n@ memberof MixpanelService\n",
                    "description": "<p>Push new action to mixpanel.</p>\n<p>@ param id Name of the action to track.\n@ param [action={}] Actions object with custom properties.\n@ memberof MixpanelService</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport * as mixpanel from 'mixpanel-browser';\nimport {environment} from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MixpanelService {\n\n  constructor() { }\n  /**\n   * Initialize mixpanel.\n   *\n   * @ param userToken\n   * @ memberof MixpanelService\n   */\n  init(): void {\n    // TODO add token\n    let trackingNumber = environment.trackingNumber;\n\n    if (environment.trackingNumber === '{PLACEHOLDER}') {\n      switch (window.location.hostname) {\n        case 'login.civicexplorer.com':\n          trackingNumber = '84898ca8909d420056544b2d33ffdb0c';\n          break;\n        case 'staging-www.civicexplorer.com':\n          trackingNumber = 'cd5f22344c2ba0be1dd3964f898988c8';\n          break;\n      }\n    }\n    mixpanel.init(trackingNumber);\n  }\n\n  /**\n   * Push new Super Properties to mixpanel.\n   *\n   * @ param [items={}] Items object with custom properties that will be include with each event you send.\n   * @ memberof MixpanelService\n   */\n  register(items: any = {}): void {\n    mixpanel.register(items);\n  }\n\n  setPeople(items: any = {}): void {\n    mixpanel.people.set(items);\n  }\n\n  /**\n   * Identify a user with a unique ID to track user activity across devices, tie a user to their events, and create a user profile.\n   *\n   * @ param ['123'] String.\n   * @ memberof MixpanelService\n   */\n  identify(id: string): void {\n    mixpanel.identify(id);\n  }\n\n  /**\n   * Push new action to mixpanel.\n   *\n   * @ param id Name of the action to track.\n   * @ param [action={}] Actions object with custom properties.\n   * @ memberof MixpanelService\n   */\n  track(id: string, action: any = {}): void {\n    mixpanel.track(id, action);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "OrganizationService",
            "id": "injectable-OrganizationService-eec5057b5398e78eaa02944b956ecc00111b6533c0127d398d6031b9a083692dbfb55ea4bad4962bdde8031b811ea05353893800ed99a2482b65d7138d35e60f",
            "file": "projects/admin/src/app/select-organization/services/organization.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getOrganizations",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ApolloQueryResult<FindMyOrganizationsQuery>>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ApolloQueryResult<FindMembersQuery>>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapUsersToMembers",
                    "args": [
                        {
                            "name": "users",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Member[]",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "users",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { Member, OrganizationUsers } from '../../pages/admin/components/members/member';\nimport { FindMembersGQL,\n  FindMembersQuery,\n  FindMyOrganizationsGQL,\n  FindMyOrganizationsQuery,\n  Maybe,\n  SchemaOrganizationUser,\n} from '../../shared/services/graphql/graphql.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrganizationService {\n\n  constructor(private findOrganizationsService: FindMyOrganizationsGQL,\n    private findMembersService: FindMembersGQL) { }\n\n  getOrganizations(): Observable<ApolloQueryResult<FindMyOrganizationsQuery>> {\n    return this.findOrganizationsService.fetch().pipe(take(1));\n  }\n\n  getUsers(): Observable<ApolloQueryResult<FindMembersQuery>> {\n    return this.findMembersService.fetch().pipe(take(1));\n  }\n\n  mapUsersToMembers(users: any[]): Member[] {\n    let members: Member[] = [];\n\n    if (!users) return members;\n    if (users.length == 0) return members;\n\n    const currentOrgId = localStorage.getItem('selected_org');\n\n    users.map(user => {\n      const u = user; //user.node;\n      const currentOrg = u?.organizationUsers?.find(\n        (orgUser:Maybe<SchemaOrganizationUser>) => orgUser?.organization?.uuid === currentOrgId\n      );\n\n      members.push({\n        uuid: u?.uuid ?? '',\n        name: `${u?.firstName} ${u?.lastName}`,\n        firstName: u?.firstName ?? '',\n        lastName: u?.lastName ?? '',\n        email: u?.email ?? '',\n        phone: u?.phone || '',\n        position: currentOrg?.title || '',\n        organizationUsers: u?.organizationUsers?.map( (orgUser:Maybe<SchemaOrganizationUser>) =>\n            ({\n              organization: {\n                uuid: orgUser?.organization?.uuid ?? '',\n                name: orgUser?.organization?.name ?? ''\n              },\n              role: {\n                uuid: orgUser?.role?.uuid ?? '',\n                name: orgUser?.role?.name ?? ''\n              }\n            })\n          ) ?? [{\n                 organization: {uuid:'', name:''},\n                 role: {uuid:'', name:''}\n               }]\n      })\n    })\n\n    return members;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "findOrganizationsService",
                        "type": "FindMyOrganizationsGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "findMembersService",
                        "type": "FindMembersGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "findOrganizationsService",
                        "type": "FindMyOrganizationsGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "findMembersService",
                        "type": "FindMembersGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OrgCompLibService",
            "id": "injectable-OrgCompLibService-5f12bbf7178d3047af4560f14a4b19cbfe2d8a72972cce7d0304e2d634594e48588f1b16dab4fb932dd4a7c6dca90613561c8439d3bbdc1f232725b8652db275",
            "file": "projects/org-comp-lib/src/lib/org-comp-lib.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrgCompLibService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "RequestUserPasswordResetGQL",
            "id": "injectable-RequestUserPasswordResetGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "RequestUserPasswordResetDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1371
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1371,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ResetUserPasswordGQL",
            "id": "injectable-ResetUserPasswordGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "ResetUserPasswordDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1387
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1387,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SendInvitationGQL",
            "id": "injectable-SendInvitationGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "SendInvitationDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1128
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1128,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UpdateOrganizationUserGQL",
            "id": "injectable-UpdateOrganizationUserGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "UpdateOrganizationUserDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1170
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1170,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UpdateUserGQL",
            "id": "injectable-UpdateUserGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "UpdateUserDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1405
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1405,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserEffects",
            "id": "injectable-UserEffects-9e4cd4b3d186794ee69691036b673bdaab0a62a56946622eda9134dadb89b3832fd6c364035c39eb2864ab49a6ccb31428c6edf0b5daa352bd4e10bb1fe5d1da",
            "file": "projects/admin/src/app/store/effects/user.effects.ts",
            "properties": [
                {
                    "name": "requestUserInfo$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromActions.requestUserInfo),\n      tap(() => {\n        this.userService.getUserInfo();\n      }),\n    ),\n  { dispatch: false },\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "requestUserOrganizations$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromActions.requestOrganizations),\n      switchMap(() => this.orgService.getOrganizations()\n        .pipe(\n          map(result => fromActions.requestOrganizationsSuccess({ organizations: result.data.myOrganizations as Organization[] })),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrganizationService } from '../../select-organization/services/organization.service';\nimport { Organization } from '../../shared/models/organization.model';\nimport { UserService } from '../../shared/services/user/user.service';\nimport * as fromActions from '../actions/user.actions';\n\n\n@Injectable()\nexport class UserEffects {\n\n  requestUserInfo$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromActions.requestUserInfo),\n      tap(() => {\n        this.userService.getUserInfo();\n      }),\n    ),\n  { dispatch: false },\n  );\n\n  requestUserOrganizations$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromActions.requestOrganizations),\n      switchMap(() => this.orgService.getOrganizations()\n        .pipe(\n          map(result => fromActions.requestOrganizationsSuccess({ organizations: result.data.myOrganizations as Organization[] })),\n        ),\n      ),\n    ),\n  );\n\n  constructor(private actions$: Actions, private userService: UserService, private orgService: OrganizationService) {}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "orgService",
                        "type": "OrganizationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "orgService",
                        "type": "OrganizationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-c44e87892bdc57408547880bcbc2f656a0a3803e853e6cec12cad29d3bc7b8970772a27b15a3cd98912822aa92895f388c618fc8d1012976beb0380a820972d5",
            "file": "projects/admin/src/app/shared/services/user/user.service.ts",
            "properties": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addSelectedOrganizationUuid",
                    "args": [
                        {
                            "name": "orgUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds the selected organization uuid to the user in the store\n\n",
                    "description": "<p>Adds the selected organization uuid to the user in the store</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1606,
                                "end": 1613,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "orgUuid"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1591,
                                "end": 1596,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Organization uuid</p>\n",
                            "typeExpression": {
                                "pos": 1597,
                                "end": 1605,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 1598,
                                    "end": 1604,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 149
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "getUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet user info from Auth0\n\n",
                    "description": "<p>Get user info from Auth0</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "isHelmAdmin$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA selector that returns if the user is a Helm admin\n\n",
                    "description": "<p>A selector that returns if the user is a Helm admin</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1895,
                                "end": 1902,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "isPasswordResetTokenValid",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Maybe | undefined>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nQuery password reset token validation\n\n",
                    "description": "<p>Query password reset token validation</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2147,
                                "end": 2152,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2132,
                                "end": 2137,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 2138,
                                "end": 2146,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 2139,
                                    "end": 2145,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 149
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2159,
                                "end": 2166,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as fromActions from '../../../store/actions/user.actions';\nimport * as fromSelectors from '../../../store/selectors/user.selectors';\nimport { AuthService } from '../auth/auth.service';\nimport { UserState } from '../../../store/reducers/user.reducer';\nimport { User } from '../../models/user.model';\nimport { Maybe, ValidatePasswordResetTokenGQL } from '../graphql/graphql.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n\n  constructor(\n    public auth: AuthService,\n    private store: Store<UserState>,\n    private validatePasswordResetTokenService: ValidatePasswordResetTokenGQL,\n  ) { }\n\n  /**\n   * Get user info from Auth0\n   *\n   * @memberof UserService\n   */\n  getUserInfo(): void {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      throw new Error('Access token must exist to fetch profile');\n    }\n\n    // Call auth0 using the access token to grab the user info and save to the store\n    this.auth.auth0.client.userInfo(accessToken, (err, userInfo) => {\n      if (userInfo) {\n        const user: User = {\n          name: userInfo.name,\n          nickname: userInfo.nickname,\n          email: userInfo.email || '',\n          picture: userInfo.picture,\n        };\n        this.store.dispatch(fromActions.addUserInfo({ user: { ...user }}));\n      }\n    });\n  }\n\n  /**\n   * Adds the selected organization uuid to the user in the store\n   *\n   * @param {string} orgUuid Organization uuid\n   * @memberof UserService\n   */\n  addSelectedOrganizationUuid(orgUuid: string): void {\n    this.store.dispatch(fromActions.addSelectedOrgUuid({ selectedOrganizationUuid: orgUuid }));\n  }\n\n  /**\n   * A selector that returns if the user is a Helm admin\n   *\n   * @returns {Observable<boolean>}\n   * @memberof UserService\n   */\n  isHelmAdmin$(): Observable<boolean> {\n    return this.store.pipe(select(fromSelectors.selectIsHelmAdmin));\n  }\n\n  /**\n   * Query password reset token validation\n   *\n   * @param {string} token\n   * @returns {(Observable<Maybe<boolean> | undefined>)}\n   * @memberof UserService\n   */\n  isPasswordResetTokenValid(token: string): Observable<Maybe<boolean> | undefined> {\n    return this.validatePasswordResetTokenService.fetch({ token })\n      .pipe(\n        map(res => res?.data?.validatePasswordResetToken),\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validatePasswordResetTokenService",
                        "type": "ValidatePasswordResetTokenGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatePasswordResetTokenService",
                        "type": "ValidatePasswordResetTokenGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ValidateAssociationTokenGQL",
            "id": "injectable-ValidateAssociationTokenGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "ValidateAssociationTokenDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1339
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1339,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ValidatePasswordResetTokenGQL",
            "id": "injectable-ValidatePasswordResetTokenGQL-7c4fcc2530b05e0a2196a73dbf884a5a619b3556a84b7e912f2883d6bf50cd7c85c6b7be84c28d920b38b73433a580ee0c1d2580dad68d8891f378b331551f37",
            "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "ValidatePasswordResetTokenDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 1355
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n\n\nexport type AcceptOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<AcceptOrganizationUserInputUser>;\n};\n\nexport type AcceptOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport enum ActivityLogEnum {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Delete = 'DELETE',\n  Remove = 'REMOVE',\n  Suspend = 'SUSPEND',\n  Activate = 'ACTIVATE',\n  Block = 'BLOCK'\n}\n\nexport type AssignRolePermissionInput = {\n  roleUuid: Scalars['String'];\n  permissionUuid: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type AssignUserPermissionInputType = {\n  __typename?: 'AssignUserPermissionInputType';\n  organizationUserId: Scalars['String'];\n  permissionId: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type CreateOrganizationHostnameInput = {\n  hostname: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  domainType: DomainTypeEnum;\n  fromEmail?: Maybe<Scalars['String']>;\n  fromName?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganizationInput = {\n  name: Scalars['String'];\n  organizationUuid?: Maybe<Scalars['ID']>;\n  adminEmail: Scalars['String'];\n  subscriptionType: SubscriptionEnum;\n  organizationType: OrganizationEnum;\n};\n\nexport type CreateRoleInput = {\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteOrganizationHostnameInput = {\n  uuid: Scalars['String'];\n};\n\nexport type DeleteRoleInput = {\n  uuid: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport enum DomainTypeEnum {\n  Email = 'EMAIL',\n  LandingPage = 'LANDING_PAGE'\n}\n\nexport type InviteOrganizationUserInput = {\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<InviteOrganizationUserInputUser>;\n};\n\nexport type InviteOrganizationUserInputUser = {\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type InviteOrganizationUserInvitationErrors = {\n  __typename?: 'InviteOrganizationUserInvitationErrors';\n  email: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type InviteOrganizationUserPayload = {\n  __typename?: 'InviteOrganizationUserPayload';\n  organizationUuid: Scalars['String'];\n  invitationErrors?: Maybe<Array<Maybe<InviteOrganizationUserInvitationErrors>>>;\n  invitedUsers?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type InviteOrganizationUsersEmailRoleInput = {\n  email: Scalars['String'];\n  roleUuid: Scalars['String'];\n};\n\nexport type InviteOrganizationUsersInput = {\n  organizationUuid: Scalars['String'];\n  users: Array<Maybe<InviteOrganizationUsersEmailRoleInput>>;\n};\n\nexport type MigratePayload = {\n  __typename?: 'MigratePayload';\n  success?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  acceptOrganizationUserInvite?: Maybe<Scalars['String']>;\n  createOrganization?: Maybe<SchemaOrganization>;\n  disableOrganization?: Maybe<SchemaOrganization>;\n  enableOrganization?: Maybe<SchemaOrganization>;\n  inviteOrganizationUsers?: Maybe<InviteOrganizationUserPayload>;\n  assignUserPermission?: Maybe<SchemaUserPermission>;\n  blockUser?: Maybe<SchemaUser>;\n  deleteUser?: Maybe<SchemaUser>;\n  disableUser?: Maybe<SchemaUser>;\n  enableUser?: Maybe<SchemaUser>;\n  requestUserPasswordReset?: Maybe<Scalars['Boolean']>;\n  resetUserPassword?: Maybe<Scalars['Boolean']>;\n  assignRolePermission?: Maybe<SchemaRolePermission>;\n  createRole?: Maybe<SchemaRole>;\n  deleteRole?: Maybe<SchemaRole>;\n  updateRole?: Maybe<SchemaRole>;\n  blockOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  deleteOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateOrganizationUser?: Maybe<SchemaOrganizationUser>;\n  updateUser?: Maybe<SchemaUser>;\n  createOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n  deleteOrganizationHostname?: Maybe<SchemaOrganizationHostname>;\n};\n\n\nexport type MutationAcceptOrganizationUserInviteArgs = {\n  input: AcceptOrganizationUserInput;\n};\n\n\nexport type MutationCreateOrganizationArgs = {\n  input: CreateOrganizationInput;\n};\n\n\nexport type MutationDisableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationInviteOrganizationUsersArgs = {\n  input: InviteOrganizationUsersInput;\n};\n\n\nexport type MutationAssignUserPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationBlockUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDisableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationEnableUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationRequestUserPasswordResetArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\nexport type MutationAssignRolePermissionArgs = {\n  input: AssignRolePermissionInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input: CreateRoleInput;\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input: DeleteRoleInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationBlockOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationDeleteOrganizationUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type MutationUpdateOrganizationUserArgs = {\n  input: UpdateOrganizationUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationCreateOrganizationHostnameArgs = {\n  input: CreateOrganizationHostnameInput;\n};\n\n\nexport type MutationDeleteOrganizationHostnameArgs = {\n  input: DeleteOrganizationHostnameInput;\n};\n\nexport enum OrganizationEnum {\n  Advocacy = 'ADVOCACY',\n  Agency = 'AGENCY',\n  Association = 'ASSOCIATION',\n  Corporate = 'CORPORATE',\n  Education = 'EDUCATION',\n  Electoral = 'ELECTORAL',\n  Foundation = 'FOUNDATION',\n  Mixed = 'MIXED',\n  Nonprofit = 'NONPROFIT',\n  Other = 'OTHER',\n  Pac = 'PAC',\n  Philanthropy = 'PHILANTHROPY'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  organization?: Maybe<SchemaOrganization>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  myOrganizations?: Maybe<Array<Maybe<SchemaOrganization>>>;\n  permission?: Maybe<SchemaPermission>;\n  permissions?: Maybe<Array<Maybe<SchemaPermission>>>;\n  role?: Maybe<SchemaRole>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  user?: Maybe<SchemaUser>;\n  users?: Maybe<Array<Maybe<SchemaUser>>>;\n  validateAssociationToken?: Maybe<ValidateAssociationTokenPayload>;\n  validatePasswordResetToken?: Maybe<Scalars['Boolean']>;\n  organizationHostname?: Maybe<SchemaOrganizationHostname>;\n  organizationHostnames?: Maybe<Array<Maybe<SchemaOrganizationHostname>>>;\n  migrate?: Maybe<MigratePayload>;\n};\n\n\nexport type QueryOrganizationArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationsArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryPermissionArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRoleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryRolesArgs = {\n  organizationUuid: Scalars['ID'];\n};\n\n\nexport type QueryUserArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  search?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryValidateAssociationTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryValidatePasswordResetTokenArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type QueryOrganizationHostnameArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryOrganizationHostnamesArgs = {\n  organizationUuid: Scalars['ID'];\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\n\nexport type QueryMigrateArgs = {\n  reset: Scalars['Boolean'];\n  seed: Scalars['Boolean'];\n};\n\nexport type ResetUserPasswordInput = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SchemaActivityLog = {\n  __typename?: 'SchemaActivityLog';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  action?: Maybe<ActivityLogEnum>;\n  modelName?: Maybe<Scalars['String']>;\n  modelUuid?: Maybe<Scalars['ID']>;\n};\n\nexport type SchemaOrganization = {\n  __typename?: 'SchemaOrganization';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested1>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationHostname = {\n  __typename?: 'SchemaOrganizationHostname';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  createdBy?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  status?: Maybe<StatusEnum>;\n  hostname?: Maybe<Scalars['String']>;\n  verifiedAt?: Maybe<Scalars['String']>;\n  txtValue?: Maybe<Scalars['String']>;\n  domainType?: Maybe<DomainTypeEnum>;\n};\n\nexport type SchemaOrganizationNested1 = {\n  __typename?: 'SchemaOrganizationNested1';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested2>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested2 = {\n  __typename?: 'SchemaOrganizationNested2';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested3>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested3 = {\n  __typename?: 'SchemaOrganizationNested3';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested4>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested4 = {\n  __typename?: 'SchemaOrganizationNested4';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizations?: Maybe<Array<Maybe<SchemaOrganizationNested5>>>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationNested5 = {\n  __typename?: 'SchemaOrganizationNested5';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  name: Scalars['String'];\n  organizationType?: Maybe<OrganizationEnum>;\n  subscriptionType?: Maybe<SubscriptionEnum>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n  roles?: Maybe<Array<Maybe<SchemaRole>>>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  countUsers?: Maybe<Scalars['Int']>;\n};\n\nexport type SchemaOrganizationPermission = {\n  __typename?: 'SchemaOrganizationPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaOrganizationUser = {\n  __typename?: 'SchemaOrganizationUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<SchemaUser>;\n  userUuid?: Maybe<Scalars['ID']>;\n  organization?: Maybe<SchemaOrganization>;\n  organizationUuid?: Maybe<Scalars['ID']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaPermission = {\n  __typename?: 'SchemaPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  abilities?: Maybe<Scalars['String']>;\n  organizationPermissions?: Maybe<Array<Maybe<SchemaOrganizationPermission>>>;\n  rolePermissions?: Maybe<Array<Maybe<SchemaRolePermission>>>;\n  userPermissions?: Maybe<Array<Maybe<SchemaUserPermission>>>;\n};\n\nexport type SchemaRole = {\n  __typename?: 'SchemaRole';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  organizationUuid: Scalars['ID'];\n  description?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaRolePermission = {\n  __typename?: 'SchemaRolePermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  role?: Maybe<SchemaRole>;\n  roleUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport type SchemaUser = {\n  __typename?: 'SchemaUser';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  status?: Maybe<StatusEnum>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  resetToken?: Maybe<Scalars['String']>;\n  organizationUsers?: Maybe<Array<Maybe<SchemaOrganizationUser>>>;\n};\n\nexport type SchemaUserPermission = {\n  __typename?: 'SchemaUserPermission';\n  uuid: Scalars['ID'];\n  createdAt?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['String']>;\n  organizationUser?: Maybe<SchemaOrganizationUser>;\n  organizationUserUuid?: Maybe<Scalars['ID']>;\n  permission?: Maybe<SchemaPermission>;\n  permissionUuid?: Maybe<Scalars['ID']>;\n  ability?: Maybe<Scalars['String']>;\n};\n\nexport enum StatusEnum {\n  Deleted = 'DELETED',\n  Blocked = 'BLOCKED',\n  Suspended = 'SUSPENDED',\n  Pending = 'PENDING',\n  Active = 'ACTIVE'\n}\n\nexport enum SubscriptionEnum {\n  Explorer = 'EXPLORER',\n  Starter = 'STARTER',\n  Basic = 'BASIC',\n  Premium = 'PREMIUM',\n  Enterprise = 'ENTERPRISE'\n}\n\nexport type UpdateOrganizationUserInput = {\n  uuid: Scalars['ID'];\n  roleUuid?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRoleInput = {\n  uuid: Scalars['String'];\n  organizationId: Scalars['String'];\n  roleName: Scalars['String'];\n  roleDescription?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  uuid: Scalars['ID'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type ValidateAssociationTokenPayload = {\n  __typename?: 'ValidateAssociationTokenPayload';\n  token?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type FindOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name'>\n  )>>> }\n);\n\nexport type FindMyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindMyOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { myOrganizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'status'>\n  )>>> }\n);\n\nexport type FindOrganizationTreesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationTreesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n    & { organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n      & { organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n        & { organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n          & { organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            & { organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'organizationUuid' | 'name' | 'countUsers' | 'status'>\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type FindOrganizationsWithRolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FindOrganizationsWithRolesQuery = (\n  { __typename?: 'Query' }\n  & { organizations?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name' | 'organizationUuid'>\n    & { roles?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid'>\n    )>>>, organizations?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationNested1' }\n      & Pick<SchemaOrganizationNested1, 'uuid' | 'name' | 'organizationUuid'>\n      & { roles?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid'>\n      )>>>, organizations?: Maybe<Array<Maybe<(\n        { __typename?: 'SchemaOrganizationNested2' }\n        & Pick<SchemaOrganizationNested2, 'uuid' | 'name' | 'organizationUuid'>\n        & { roles?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaRole' }\n          & Pick<SchemaRole, 'uuid'>\n        )>>>, organizations?: Maybe<Array<Maybe<(\n          { __typename?: 'SchemaOrganizationNested3' }\n          & Pick<SchemaOrganizationNested3, 'uuid' | 'name' | 'organizationUuid'>\n          & { roles?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaRole' }\n            & Pick<SchemaRole, 'uuid'>\n          )>>>, organizations?: Maybe<Array<Maybe<(\n            { __typename?: 'SchemaOrganizationNested4' }\n            & Pick<SchemaOrganizationNested4, 'uuid' | 'name' | 'organizationUuid'>\n            & { roles?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaRole' }\n              & Pick<SchemaRole, 'uuid'>\n            )>>>, organizations?: Maybe<Array<Maybe<(\n              { __typename?: 'SchemaOrganizationNested5' }\n              & Pick<SchemaOrganizationNested5, 'uuid' | 'name' | 'organizationUuid'>\n              & { roles?: Maybe<Array<Maybe<(\n                { __typename?: 'SchemaRole' }\n                & Pick<SchemaRole, 'uuid'>\n              )>>> }\n            )>>> }\n          )>>> }\n        )>>> }\n      )>>> }\n    )>>> }\n  )>>> }\n);\n\nexport type SendInvitationMutationVariables = Exact<{\n  input: InviteOrganizationUsersInput;\n}>;\n\n\nexport type SendInvitationMutation = (\n  { __typename?: 'Mutation' }\n  & { inviteOrganizationUsers?: Maybe<(\n    { __typename?: 'InviteOrganizationUserPayload' }\n    & Pick<InviteOrganizationUserPayload, 'organizationUuid' | 'invitedUsers'>\n    & { invitationErrors?: Maybe<Array<Maybe<(\n      { __typename?: 'InviteOrganizationUserInvitationErrors' }\n      & Pick<InviteOrganizationUserInvitationErrors, 'email' | 'description'>\n    )>>> }\n  )> }\n);\n\nexport type CreateOrganizationMutationVariables = Exact<{\n  input: CreateOrganizationInput;\n}>;\n\n\nexport type CreateOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid' | 'name'>\n  )> }\n);\n\nexport type UpdateOrganizationUserMutationVariables = Exact<{\n  input: UpdateOrganizationUserInput;\n}>;\n\n\nexport type UpdateOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DeleteOrganizationUserMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteOrganizationUserMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteOrganizationUser?: Maybe<(\n    { __typename?: 'SchemaOrganizationUser' }\n    & Pick<SchemaOrganizationUser, 'uuid' | 'organizationUuid'>\n    & { role?: Maybe<(\n      { __typename?: 'SchemaRole' }\n      & Pick<SchemaRole, 'uuid' | 'name'>\n    )> }\n  )> }\n);\n\nexport type DisableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DisableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { disableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type EnableOrganizationMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type EnableOrganizationMutation = (\n  { __typename?: 'Mutation' }\n  & { enableOrganization?: Maybe<(\n    { __typename?: 'SchemaOrganization' }\n    & Pick<SchemaOrganization, 'uuid'>\n  )> }\n);\n\nexport type FindRolesQueryVariables = Exact<{\n  organizationUuid: Scalars['ID'];\n}>;\n\n\nexport type FindRolesQuery = (\n  { __typename?: 'Query' }\n  & { roles?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaRole' }\n    & Pick<SchemaRole, 'uuid' | 'name'>\n  )>>> }\n);\n\nexport type FindUserQueryVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type FindUserQuery = (\n  { __typename?: 'Query' }\n  & { user?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'status' | 'firstName' | 'lastName' | 'email' | 'phone' | 'resetToken'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'uuid' | 'status' | 'organizationUuid' | 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type FindMembersQueryVariables = Exact<{\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type FindMembersQuery = (\n  { __typename?: 'Query' }\n  & { users?: Maybe<Array<Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid' | 'firstName' | 'lastName' | 'email' | 'phone'>\n    & { organizationUsers?: Maybe<Array<Maybe<(\n      { __typename?: 'SchemaOrganizationUser' }\n      & Pick<SchemaOrganizationUser, 'title'>\n      & { organization?: Maybe<(\n        { __typename?: 'SchemaOrganization' }\n        & Pick<SchemaOrganization, 'uuid' | 'name'>\n      )>, role?: Maybe<(\n        { __typename?: 'SchemaRole' }\n        & Pick<SchemaRole, 'uuid' | 'name'>\n      )> }\n    )>>> }\n  )>>> }\n);\n\nexport type ValidateAssociationTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidateAssociationTokenQuery = (\n  { __typename?: 'Query' }\n  & { validateAssociationToken?: Maybe<(\n    { __typename?: 'ValidateAssociationTokenPayload' }\n    & Pick<ValidateAssociationTokenPayload, 'status' | 'email' | 'name'>\n  )> }\n);\n\nexport type ValidatePasswordResetTokenQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type ValidatePasswordResetTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'validatePasswordResetToken'>\n);\n\nexport type RequestUserPasswordResetMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type RequestUserPasswordResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestUserPasswordReset'>\n);\n\nexport type ResetUserPasswordMutationVariables = Exact<{\n  input: ResetUserPasswordInput;\n}>;\n\n\nexport type ResetUserPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'resetUserPassword'>\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser?: Maybe<(\n    { __typename?: 'SchemaUser' }\n    & Pick<SchemaUser, 'uuid'>\n  )> }\n);\n\nexport type AcceptOrganizationUserInviteMutationVariables = Exact<{\n  input: AcceptOrganizationUserInput;\n}>;\n\n\nexport type AcceptOrganizationUserInviteMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'acceptOrganizationUserInvite'>\n);\n\nexport const FindOrganizationsDocument = gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsGQL extends Apollo.Query<FindOrganizationsQuery, FindOrganizationsQueryVariables> {\n    document = FindOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMyOrganizationsDocument = gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMyOrganizationsGQL extends Apollo.Query<FindMyOrganizationsQuery, FindMyOrganizationsQueryVariables> {\n    document = FindMyOrganizationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationTreesDocument = gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationTreesGQL extends Apollo.Query<FindOrganizationTreesQuery, FindOrganizationTreesQueryVariables> {\n    document = FindOrganizationTreesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindOrganizationsWithRolesDocument = gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindOrganizationsWithRolesGQL extends Apollo.Query<FindOrganizationsWithRolesQuery, FindOrganizationsWithRolesQueryVariables> {\n    document = FindOrganizationsWithRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SendInvitationGQL extends Apollo.Mutation<SendInvitationMutation, SendInvitationMutationVariables> {\n    document = SendInvitationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrganizationDocument = gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrganizationGQL extends Apollo.Mutation<CreateOrganizationMutation, CreateOrganizationMutationVariables> {\n    document = CreateOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrganizationUserDocument = gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrganizationUserGQL extends Apollo.Mutation<UpdateOrganizationUserMutation, UpdateOrganizationUserMutationVariables> {\n    document = UpdateOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteOrganizationUserDocument = gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteOrganizationUserGQL extends Apollo.Mutation<DeleteOrganizationUserMutation, DeleteOrganizationUserMutationVariables> {\n    document = DeleteOrganizationUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableOrganizationDocument = gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableOrganizationGQL extends Apollo.Mutation<DisableOrganizationMutation, DisableOrganizationMutationVariables> {\n    document = DisableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const EnableOrganizationDocument = gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class EnableOrganizationGQL extends Apollo.Mutation<EnableOrganizationMutation, EnableOrganizationMutationVariables> {\n    document = EnableOrganizationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindRolesDocument = gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindRolesGQL extends Apollo.Query<FindRolesQuery, FindRolesQueryVariables> {\n    document = FindRolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindUserDocument = gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindUserGQL extends Apollo.Query<FindUserQuery, FindUserQueryVariables> {\n    document = FindUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FindMembersDocument = gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FindMembersGQL extends Apollo.Query<FindMembersQuery, FindMembersQueryVariables> {\n    document = FindMembersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidateAssociationTokenDocument = gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidateAssociationTokenGQL extends Apollo.Query<ValidateAssociationTokenQuery, ValidateAssociationTokenQueryVariables> {\n    document = ValidateAssociationTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ValidatePasswordResetTokenDocument = gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ValidatePasswordResetTokenGQL extends Apollo.Query<ValidatePasswordResetTokenQuery, ValidatePasswordResetTokenQueryVariables> {\n    document = ValidatePasswordResetTokenDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestUserPasswordResetDocument = gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestUserPasswordResetGQL extends Apollo.Mutation<RequestUserPasswordResetMutation, RequestUserPasswordResetMutationVariables> {\n    document = RequestUserPasswordResetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ResetUserPasswordDocument = gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ResetUserPasswordGQL extends Apollo.Mutation<ResetUserPasswordMutation, ResetUserPasswordMutationVariables> {\n    document = ResetUserPasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateUserDocument = gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {\n    document = UpdateUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AcceptOrganizationUserInviteDocument = gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AcceptOrganizationUserInviteGQL extends Apollo.Mutation<AcceptOrganizationUserInviteMutation, AcceptOrganizationUserInviteMutationVariables> {\n    document = AcceptOrganizationUserInviteDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1355,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo.Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AccountSelectionGuard",
            "id": "injectable-AccountSelectionGuard-5905047620d09d5ea7711049e121cdcc7e66a0f77af0527fc1237a90fc3335d06e9187f6046ac7afd40ab4e4f81c74baf5b73c40109af316ade2a2a61fdf4790",
            "file": "projects/explorer/src/app/shared/services/account-selection.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean | UrlTree>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CurrentUserService } from './current-user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountSelectionGuard implements CanActivate {\n\n  constructor(\n    private currentUserService: CurrentUserService,\n    private router: Router,\n  ) { }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    // Already have a selected account\n    return this.currentUserService.getAccount().pipe(\n      map((account: any) => {\n        if (account) {\n          return true;\n        } else {\n          return this.router.createUrlTree(['/accounts']);\n        }\n      }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "AuthGuardMaintenance",
            "id": "injectable-AuthGuardMaintenance-229577ee1b73677383681a63a0dbe7cc6f2b331e5a3d2f59bf1cdfe7f9731748d8ebc2adcb73aff1f9e425e3c100c77cf2574f5b4fca93091f6303a806e0d362",
            "file": "projects/explorer/src/app/shared/services/auth-maintenance.service.ts",
            "properties": [
                {
                    "name": "turnMaintenanceOn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthGuardMaintenance implements CanActivate {\n  turnMaintenanceOn = false;\n\n  constructor(\n      private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.turnMaintenanceOn) {\n      this.router.navigate(['/maintenance']).then();\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "AuthGuardService",
            "id": "injectable-AuthGuardService-464e36e329eee122b0ab60b9cc4616bf9ccea0897a3c8d50583e2009637ee2fba3a774d3f7a6937d6952cd255d14ee22c78e11fae20ac9cf50167b5e56041113",
            "file": "projects/admin/src/app/shared/services/auth/auth-guard.service.ts",
            "properties": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuardService implements CanActivate {\n\n  constructor(public auth: AuthService, public router: Router) { }\n\n  canActivate(): boolean {\n    if (!this.auth.isAuthenticated()) {\n      this.router.navigate(['/login']);\n      return false;\n    }\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AccountInterceptor",
            "id": "injectable-AccountInterceptor-ff7794d317a8d4955f4ea547866057d64b719be99693140d1f436cc4b54e25c782f8d924f3aaf35bc6b39eda89c2ef8cff52a6b4cf78fac5a65fb77f8c3fc285",
            "file": "projects/explorer/src/app/accounts/account.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentUserService } from '../shared/services/current-user.service';\n\n@Injectable()\nexport class AccountInterceptor implements HttpInterceptor {\n  constructor(private currentUserService: CurrentUserService) {\n\n  }\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.currentUserService.getAccount().pipe(\n      switchMap((account) => {\n        const modifiedReq = req.clone({\n          headers: req.headers.set('account', `${account?.account}`),\n        });\n        return next.handle(modifiedReq);\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "Account",
            "id": "class-Account-3bb7f65df92711dca6cc7cd0969791f30319f0681385a930ef3fd794fa06725e39a16ae5f0d220f5b1cbe0fa78833bfcc01388dd7c3a09392b610c6282c1a348",
            "file": "projects/admin/src/app/pages/admin/components/accounts/account.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Account {\n  name: string = '';\n  members?: number = 0;\n  uuid?: string = '';\n  subaccounts?: Account[] = [];\n  status?: string = '';\n}\n",
            "properties": [
                {
                    "name": "members",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subaccounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "uuid",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppInfrastructureStack",
            "id": "class-AppInfrastructureStack-07ecf3d51babdb189b7203e7c8094494519a856eb7f000aa11e1d7284b05cf05ac73e0ca15b1d9dc0da4b9f28d5c199342e406a5ac34c3a4ecaa14f78d4896a8",
            "file": "infrastructure/lib/app-infrastructure-stack.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport * as lambdaWithApiGateway from './constructs/lambda-backed-api-gateway';\nimport { DockerImageCode, DockerImageFunction } from '@aws-cdk/aws-lambda';\nimport {DnsValidatedCertificate, CertificateValidation} from '@aws-cdk/aws-certificatemanager';\nimport { Vpc, SubnetType } from '@aws-cdk/aws-ec2';\nimport { StringParameter } from '@aws-cdk/aws-ssm';\nimport path = require('path')\nimport { IHostedZone } from '@aws-cdk/aws-route53';\nimport { LambdaProxyIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\nimport { HttpMethod, HttpNoneAuthorizer } from '@aws-cdk/aws-apigatewayv2';\nimport { Duration } from '@aws-cdk/core';\n\nexport interface AppInfrastructureStackProps extends cdk.StackProps {\n  stage: string\n  hostedZone?: IHostedZone\n  domainName?: string\n  isDevelopment?: boolean\n}\n\nexport class AppInfrastructureStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props: AppInfrastructureStackProps) {\n    super(scope, id, props);\n\n    const isDevelopment = props.isDevelopment? props.isDevelopment: false\n\n    const cert = props.hostedZone !== undefined ? new DnsValidatedCertificate(this, 'ssl-certificate',\n        {\n          domainName: props.domainName !== undefined? props.domainName: props.hostedZone.zoneName,\n          hostedZone: props.hostedZone,\n          validation: CertificateValidation.fromDns(props.hostedZone),\n          subjectAlternativeNames: [\n            `*.${props.hostedZone.zoneName}`\n          ]\n        }\n      ) : undefined;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "props",
                        "type": "AppInfrastructureStackProps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "props",
                        "type": "AppInfrastructureStackProps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ContinuousIntegrationInfrastructureStack",
            "id": "class-ContinuousIntegrationInfrastructureStack-b38b782a9943080fa5c556b6b91c6869827386525bfad0c32b921503f4197d8150eb47476a641c2868763cbd44d20f59b3e382162bac2cd1df66f58708238030",
            "file": "infrastructure/lib/ci-infrastructure-stack.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport { OpenIdConnectProvider, OpenIdConnectPrincipal, Role, ManagedPolicy} from '@aws-cdk/aws-iam';\nimport { join } from 'path';\nimport { CfnOutput, Duration } from '@aws-cdk/core';\nimport { CONSTANTS } from './config';\nimport {StringParameter} from '@aws-cdk/aws-ssm'\n\n\nexport interface ContinuousIntegrationInfrastructureStackProps extends cdk.StackProps {\n  stage: string;\n}\n\nexport class ContinuousIntegrationInfrastructureStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props: ContinuousIntegrationInfrastructureStackProps) {\n    super(scope, id, props);\n\n    const oidcProviderArn = StringParameter.fromStringParameterAttributes(this, `${CONSTANTS.stackPrefix}-oidc-provider-arn`, {\n      parameterName: `/${props.stage}/shared/config/OIDC_PROVIDER_ARN`,\n      // 'version' can be specified but is optional.\n    }).stringValue;\n    const oidcProvider = OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, `${CONSTANTS.stackPrefix}-oidc-provider`,\n        oidcProviderArn);\n    const bitbucketPipelinesRole = new Role(this, `${CONSTANTS.stackPrefix}-bitbucket-pipelines-role`, {\n      assumedBy: new OpenIdConnectPrincipal(oidcProvider),\n      managedPolicies: [ManagedPolicy.fromAwsManagedPolicyName(\"AdministratorAccess\")],\n      roleName: `${CONSTANTS.stackPrefix}-bitbucket-${props.stage.toLowerCase()}`\n    });\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "props",
                        "type": "ContinuousIntegrationInfrastructureStackProps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "props",
                        "type": "ContinuousIntegrationInfrastructureStackProps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DnsInfrastructureStack",
            "id": "class-DnsInfrastructureStack-b4aa0b483a02c9a4c2d79c027eb8819b82c3203dd5646a67deb7450bdc057e7039b46c49e3f55dc81025772404a94f7fb00f7c71e9f02862ba4505a1201fdbc6",
            "file": "infrastructure/lib/dns-infrastructure-stack.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport { CrossAccountZoneDelegationRecord, PublicHostedZone } from '@aws-cdk/aws-route53';\nimport { Role, CfnRole, AccountPrincipal, Effect, PolicyStatement} from '@aws-cdk/aws-iam';\nimport { Fn, CfnOutput, RemovalPolicy } from '@aws-cdk/core';\nimport { CONSTANTS } from './config';\n\n\nexport interface DnsInfrastructureStackProps extends cdk.StackProps {\n  domainName: string;\n  trustedAccounts?: string[]\n  parentDomainName?: string\n}\n\n\nexport class DnsInfrastructureStack extends cdk.Stack {\n  public domain: PublicHostedZone;\n  public delegationRole: string;\n  constructor(scope: cdk.Construct, id: string, props: DnsInfrastructureStackProps) {\n    super(scope, id, props);\n\n    const delegateDns = props.parentDomainName !== undefined;\n    const hostedZoneProps = {\n      zoneName: `${props.domainName}`,\n      crossAccountZoneDelegationPrincipal: props.trustedAccounts !== undefined ? new AccountPrincipal(props.trustedAccounts.pop()): undefined,\n      crossAccountZoneDelegationRoleName: props.trustedAccounts !== undefined ? `helm-dns-delegation-role-${this.node.addr.substring(0,10)}`: undefined\n    }\n\n    this.domain = new PublicHostedZone(this, `${CONSTANTS.stackPrefix}-hosted-zone`, hostedZoneProps);\n\n    this.domain.crossAccountZoneDelegationRole?.assumeRolePolicy?.addStatements(\n      new PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        effect: Effect.ALLOW,\n        principals: props.trustedAccounts?.map(element => {\n          return new AccountPrincipal(element)\n        })\n      })\n    )\n\n    if (this.domain.crossAccountZoneDelegationRole !== undefined){\n      this.delegationRole = this.domain.crossAccountZoneDelegationRole.roleName;\n\n      const cfnDelegationRole = this.domain.crossAccountZoneDelegationRole.node.defaultChild as CfnRole;\n      cfnDelegationRole.applyRemovalPolicy(RemovalPolicy.DESTROY);\n      new CfnOutput(this, 'delegation-role-name', {\n        value: this.domain.crossAccountZoneDelegationRole.roleName\n      })\n    }\n\n    if (delegateDns){\n      new CrossAccountZoneDelegationRecord(this, `${CONSTANTS.stackPrefix}-domain-delegation`, {\n        delegatedZone: this.domain,\n        parentHostedZoneName: props.parentDomainName,\n        delegationRole: Role.fromRoleArn(this, 'delegationrole', cdk.Arn.format({\n          resource: 'role',\n          service: 'iam',\n          region: '',\n          account: this.node.tryGetContext('sharedServices').dns.accountId,\n          resourceName: this.node.tryGetContext('sharedServices').dns.delegationRoleName\n        }, this))\n      });\n    }\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "props",
                        "type": "DnsInfrastructureStackProps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "props",
                        "type": "DnsInfrastructureStackProps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "delegationRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "domain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PublicHostedZone",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FrontendStack",
            "id": "class-FrontendStack-381390bef62e39bbee04c9e752a56f3de52dad13477ed58ff2b67d8d6d013f04ae1fea38be32c0c509476b0fea11721007a657b991994b15db38389dbece4107",
            "file": "infrastructure/lib/frontend-infrastructure-stack.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport * as frontend from './constructs/cloudfront-s3-frontend';\nimport {DnsValidatedCertificate, CertificateValidation} from '@aws-cdk/aws-certificatemanager';\nimport {IHostedZone, PublicHostedZone} from '@aws-cdk/aws-route53';\nimport { Source } from '@aws-cdk/aws-s3-deployment';\nimport path = require('path')\n\n\nexport interface FrontendStackProps extends cdk.StackProps {\n  stage: string\n  hostedZone?: PublicHostedZone\n  domainName?: string\n}\n\nexport class FrontendStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props: FrontendStackProps) {\n    super(scope, id, props);\n\n    const cert = props.hostedZone !== undefined ? new DnsValidatedCertificate(this, 'ssl-certificate',\n        {\n          domainName: props.domainName !== undefined? props.domainName: props.hostedZone.zoneName,\n          hostedZone: props.hostedZone,\n          validation: CertificateValidation.fromDns(props.hostedZone),\n          subjectAlternativeNames: [\n            `*.${props.hostedZone.zoneName}`\n          ]\n        }\n      ) : undefined;\n\n\n    let customDomainProps: frontend.CustomDomainProps | undefined;\n\n    if (cert !== undefined && props.hostedZone !== undefined){\n      customDomainProps = {\n        certificate: cert,\n        hostedZone: props.hostedZone,\n        domainNames: props.domainName !== undefined? [props.domainName]:  [props.hostedZone.zoneName]\n      };\n    }\n\n    new frontend.SinglePageApp(this, 'site', {\n//      uploadPrefix: process.env.BITBUCKET_COMMIT,\n      angularOutputDirectory: path.join(__dirname, '../../dist/organizer-frontends'),\n      customDomainProps: customDomainProps\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "props",
                        "type": "FrontendStackProps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "props",
                        "type": "FrontendStackProps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LambdaApi",
            "id": "class-LambdaApi-339b5636508352d71c0e067a877936643e480504f3101bb6cdc6735e4ef699e43bfe8d3baf46c95f2b9859258bdc277d0f548441b21187ae088c6c766780fb6b",
            "file": "infrastructure/lib/constructs/lambda-backed-api-gateway.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport {IFunction} from '@aws-cdk/aws-lambda'\nimport {HttpApi, HttpApiProps, CorsHttpMethod, DomainName, ApiMapping, HttpMethod, HttpNoneAuthorizer} from '@aws-cdk/aws-apigatewayv2'\nimport {LambdaProxyIntegration} from '@aws-cdk/aws-apigatewayv2-integrations';\nimport {HttpJwtAuthorizer, HttpJwtAuthorizerProps } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport {IHostedZone, ARecord, RecordTarget} from '@aws-cdk/aws-route53';\nimport {ApiGatewayv2DomainProperties} from '@aws-cdk/aws-route53-targets';\nimport {ICertificate} from '@aws-cdk/aws-certificatemanager';\n\nexport interface apiGatewayCustomDomainProps  {\n    hostedZone: IHostedZone\n    tlsCertificate: ICertificate\n    subdomain?: string\n}\n\n\nexport interface LambdaApiProps {\n    defaultHandler: IFunction\n    apiName?: string\n    apiGatewayCustomDomainProps?: apiGatewayCustomDomainProps\n    apiGatewayProps?: HttpApiProps\n    authorizerProps?: HttpJwtAuthorizerProps\n    corsAllowedOrigins?: string[]\n}\n\n// Note: this class uses @aws-cdk/aws-apigatewayv2, which is still in an experimental state.\n// If you bump the version of that package, you may need to update the code here to match\n// the new API.\nexport class LambdaApi extends cdk.Construct {\n    public api: HttpApi;\n    public apiGatewayUrl: ARecord | undefined;\n    public authorizer: HttpJwtAuthorizer | undefined;\n    constructor(scope: cdk.Construct, id: string, props: LambdaApiProps ) {\n        super(scope, id);\n\n        let apiGatewayProps: HttpApiProps;\n        this.authorizer = props.authorizerProps !== undefined ? new HttpJwtAuthorizer(props.authorizerProps) : undefined;\n\n        // When we encounter an un-configured route, throw a 404\n        const defaultIntegration = new LambdaProxyIntegration({handler: props.defaultHandler})\n        if(props.apiGatewayProps === undefined) {\n            apiGatewayProps = {\n                apiName: props.apiName,\n                defaultAuthorizer: this.authorizer,\n                defaultIntegration: defaultIntegration,\n                corsPreflight: {\n                    allowMethods: [\n                        CorsHttpMethod.GET,\n                        CorsHttpMethod.PUT,\n                        CorsHttpMethod.POST,\n                        CorsHttpMethod.DELETE\n                    ],\n                    allowOrigins: props.corsAllowedOrigins,\n                    allowHeaders: ['*'],\n                    exposeHeaders: ['origin'],\n                    allowCredentials: false\n                },\n                createDefaultStage: true,\n            };\n        } else {\n            apiGatewayProps = props.apiGatewayProps;\n        }\n\n        this.api = new HttpApi(this, 'HttpApiGateway', apiGatewayProps);\n\n        // Catch all route to enable unauthenticated OPTIONS requests for APIs with a default authorizer.\n        // If you don't have a default authorizer but you do want to serve OPTIONS requests for an endpoint\n        // that does have one, you'll need to configure it explicitly.\n        if (this.authorizer !== undefined){\n            this.api.addRoutes({\n                path: `/{proxy+}`,\n                methods: [\n                    HttpMethod.OPTIONS\n                ],\n                integration: defaultIntegration,\n                authorizer: new HttpNoneAuthorizer()\n            });\n        }\n\n        // Set custom domain name, if defined\n        if (props.apiGatewayCustomDomainProps !== undefined) {\n            const domainName = props.apiGatewayCustomDomainProps.subdomain !== undefined? `${props.apiGatewayCustomDomainProps.subdomain}.${props.apiGatewayCustomDomainProps.hostedZone.zoneName}`: props.apiGatewayCustomDomainProps.hostedZone.zoneName;\n            const domain = new DomainName(this, 'ApiGatewayCustomDomain', {\n                domainName: domainName,\n                certificate: props.apiGatewayCustomDomainProps.tlsCertificate\n            });\n            new ApiMapping(this, 'ApiGatewayApiMapping', {\n                api: this.api,\n                domainName: domain\n            });\n\n            this.apiGatewayUrl =  new ARecord(this, 'APIGatewayAlias', {\n                zone: props.apiGatewayCustomDomainProps.hostedZone,\n                recordName: domainName,\n                target: RecordTarget.fromAlias(new ApiGatewayv2DomainProperties(domain.regionalDomainName, domain.regionalHostedZoneId))\n            });\n        }\n\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "props",
                        "type": "LambdaApiProps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "props",
                        "type": "LambdaApiProps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpApi",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "apiGatewayUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ARecord | undefined",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authorizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpJwtAuthorizer | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LambdaWithServerlessPostgres",
            "id": "class-LambdaWithServerlessPostgres-5640e7de6f228708569faa50d5292d723344be6820c914a38d7b8e8273b2591936725a0a47a2f760818b2a732c307ceaf36b3f799dc1567bff2bf0cdb6576023",
            "file": "infrastructure/lib/constructs/lambda-serverless-postgres.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\n\nexport class LambdaWithServerlessPostgres extends cdk.Construct {}",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Permission",
            "id": "class-Permission-0387d69e35147cba0239ec1b0fb9229eadca739499c9129c210ffbca64ff588bb087822b17974d3378a54e4bae79c86a0e5a902a7382ab98a69d2c4e57baf690",
            "file": "projects/admin/src/app/pages/admin/components/permissions/permission.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Permission {\n  question: string = '';\n  role: string = '';\n}\n",
            "properties": [
                {
                    "name": "question",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "role",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QueueBackedLambda",
            "id": "class-QueueBackedLambda-9a25ce3d06dd0f7e36c6680135cc4b23ab134f7a79f10419bcace000e212ad48a266decedb4f731d83be1d53c1b4fb44937f6a830469e131bca59f51ce7e55ab",
            "file": "infrastructure/lib/constructs/queue-backed-lambda.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\n\nexport class QueueBackedLambda extends cdk.Construct {}",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SinglePageApp",
            "id": "class-SinglePageApp-b24bd7fac82f6251f111fa5db1bf1f02145ccdf88c06dd2601a1f55c01eef9c01918b16eab1fe81f33db8815bd2e198b0a3bc937bae4a4337944f54ba755b9ef",
            "file": "infrastructure/lib/constructs/cloudfront-s3-frontend.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\nimport {Bucket, BucketAccessControl} from '@aws-cdk/aws-s3';\nimport * as s3Deploy from '@aws-cdk/aws-s3-deployment';\nimport { HostedZone, ARecord, RecordTarget, PublicHostedZone } from '@aws-cdk/aws-route53';\nimport { CloudFrontTarget} from '@aws-cdk/aws-route53-targets';\nimport { DnsValidatedCertificate, CertificateValidation, CfnCertificate, ICertificate } from '@aws-cdk/aws-certificatemanager'\nimport {Distribution, AllowedMethods, CachePolicy, CachedMethods, ViewerProtocolPolicy} from '@aws-cdk/aws-cloudfront'\nimport * as CFOrigin from '@aws-cdk/aws-cloudfront-origins'\nimport { join } from 'path';\nimport { CfnOutput, Duration, RemovalPolicy } from '@aws-cdk/core';\nimport { Source } from '@aws-cdk/aws-s3-deployment';\n\n\nexport interface CustomDomainProps {\n  hostedZone: PublicHostedZone,\n  domainNames: string[],\n  certificate: ICertificate,\n}\nexport interface SinglePageAppProps  {\n  customDomainProps?: CustomDomainProps,\n  uploadPrefix?: string,\n  angularOutputDirectory: string,\n}\n\nexport class SinglePageApp extends cdk.Construct {\n  constructor(scope: cdk.Construct, id: string, props: SinglePageAppProps) {\n    super(scope, id);\n\n    // Resources:\n    // Log aggregation bucket (CloudFront logs go here)\n    const logsBucket = new Bucket(this, 'LogBucket', {\n      accessControl: BucketAccessControl.LOG_DELIVERY_WRITE,\n      removalPolicy: cdk.RemovalPolicy.RETAIN // Keep server logs in the event that the stack gets deleted\n    })\n\n    const site = Source.asset(props.angularOutputDirectory, {\n      exclude: ['index.html']\n    })\n\n    const rootDocument = Source.asset(props.angularOutputDirectory, {\n      exclude: ['**', '!index.html']\n    })\n\n    // Site bucket (build artifacts get uploaded here)\n    const siteBucket = new Bucket(this, 'SiteBucket', {\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n      autoDeleteObjects: true,\n      enforceSSL: true,\n      publicReadAccess: false,\n      serverAccessLogsBucket: logsBucket,\n    });\n\n    // Uploads angular build output to S3, prefixed with the uploadPrefix tag for the deploy\n    const siteUpload = new s3Deploy.BucketDeployment(this, 'SiteUpload', {\n      destinationBucket: siteBucket,\n      sources: [site],\n      prune: false, // Don't delete existing files when uploading\n      destinationKeyPrefix: props.uploadPrefix,\n      memoryLimit: 1024\n    });\n\n    // Upload index to bucket root\n    const indexUpload = new s3Deploy.BucketDeployment(this, 'RootDocumentUpload', {\n      destinationBucket: siteBucket,\n      sources: [rootDocument],\n      cacheControl: [s3Deploy.CacheControl.fromString('max-age=0,no-cache,no-store,must-revalidate')],\n      prune: false\n    });\n\n    // Ensure the new site is uploaded before uploading the index\n    indexUpload.node.addDependency(siteUpload)\n\n\n    // Configure CloudFront to request files from the site bucket\n    // The angular app will determine the prefix to request files from\n    const origin = new CFOrigin.S3Origin(siteBucket,{\n      originPath: `/`\n    });\n\n    // Cloudfront CDN\n    const cdn = new Distribution(this, 'Cdn', {\n      enableLogging: true,\n      logBucket: logsBucket,\n      certificate: props.customDomainProps?.certificate,\n      domainNames:  props.customDomainProps?.domainNames,\n      defaultBehavior: {\n        origin: origin,\n        allowedMethods: AllowedMethods.ALLOW_GET_HEAD_OPTIONS,\n        cachePolicy: new CachePolicy(this, 'DefaultCachePolicy', {}),\n        cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,\n        viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n      },\n      additionalBehaviors: {\n        // Don't cache index.html\n        \"index.html\": {\n          origin: origin,\n          allowedMethods: AllowedMethods.ALLOW_GET_HEAD_OPTIONS,\n          cachePolicy: new CachePolicy(this, 'IndexCachePolicy', {\n            minTtl: Duration.seconds(0),\n            maxTtl: Duration.seconds(0),\n            defaultTtl: Duration.seconds(0)\n\n          }),\n          cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,\n          viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n        }\n      },\n      defaultRootObject: 'index.html',\n      errorResponses: [\n        {\n          httpStatus: 403, // S3 API returns 403 instead of 404 for missing files, so we need to return 200 here and allow angular's router to do its thing\n          responseHttpStatus: 200,\n          responsePagePath: '/index.html'\n        },\n        {\n          httpStatus: 500,\n          responsePagePath: '/index.html'\n        }\n      ]\n    });\n\n    props.customDomainProps !== undefined ? new ARecord(this, 'CdnRecord', {\n      target: RecordTarget.fromAlias(new CloudFrontTarget(cdn)),\n      zone: props.customDomainProps.hostedZone\n    }) : console.log('No public hosted zone defined, skipping DNS record creation');\n    cdn.node.addDependency(indexUpload);\n\n    // Outputs\n    new CfnOutput(this, 'SiteBucketName', {\n     value: siteBucket.bucketName,\n     description: 'Bucket where static assets are uploaded',\n    })\n\n    new CfnOutput(this, 'CdnDomainName', {\n      value: cdn.domainName,\n      description: 'Domain name for the CloudFront distribution (to access the site without a custom URL)',\n     })\n\n     new CfnOutput(this, 'DomainName', {\n      value: props.customDomainProps?.domainNames.join(',') || cdn.domainName,\n      description: 'Domain name(s) for the site',\n     })\n\n     new CfnOutput(this, 'LogBucketName', {\n      value: logsBucket.bucketName,\n      description: 'Domain name for the site',\n     })\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "props",
                        "type": "SinglePageAppProps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "scope",
                        "type": "cdk.Construct",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "props",
                        "type": "SinglePageAppProps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SinglePageApp",
            "id": "class-SinglePageApp-160b873d79b0da0fa8bd52728c5a2aeecd543c03f7797e41f588ac61747db12eaeaac7e9877ca0f90f6e9e3b42ac71ed79bf8729d2d136a280222273b503ab40-1",
            "file": "infrastructure/lib/constructs/dns-validated-ssl-certificate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cdk from '@aws-cdk/core';\n\nexport class SinglePageApp extends cdk.Construct{}",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SinglePageApp-1"
        }
    ],
    "directives": [
        {
            "name": "BaseComponent",
            "id": "directive-BaseComponent-94d4d1a1b27ee026a4cc234ef7f7d23b59b144a9900fae80528b34f341dff5561b3195262d8c98fe9bc44ecba0ef1792635442a2b55df5f7c7f8879e20070fcc",
            "file": "projects/explorer/src/core/base.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Directive()\n// tslint:disable-next-line:directive-class-suffix\nexport class BaseComponent implements OnDestroy {\n    ngUnsubscribe$ = new Subject<void>();\n\n    ngOnDestroy(): void {\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n}\n",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "ngUnsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnDestroy"
            ]
        }
    ],
    "components": [
        {
            "name": "AccountCollapseComponent",
            "id": "component-AccountCollapseComponent-967751c03d2ab7929bf9a4cfe63762e67e81f3a8b21d9065927cf7d5037eb55d8498c6bec6c47e3af8598ac7f8deb27a9e6bf45b45fe3612551135c3f7a0b068",
            "file": "projects/admin/src/app/pages/admin/components/accounts/account-collapse/account-collapse.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-admin-account-collapse",
            "styleUrls": [
                "./account-collapse.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./account-collapse.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Account[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentAccount",
                    "defaultValue": "{} as Account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "customStyle",
                    "defaultValue": "{\n    background: '#f7f7f7',\n    'margin-bottom': '24px',\n    border: '0px',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "disable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "enable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrent",
                    "args": [
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Account } from '../account';\nimport {\n  EnableOrganizationGQL,\n  DisableOrganizationGQL,\n  StatusEnum,\n} from '../../../../../shared/services/graphql/graphql.service';\n\n@Component({\n  selector: 'org-admin-account-collapse',\n  templateUrl: './account-collapse.component.html',\n  styleUrls: ['./account-collapse.component.less'],\n})\nexport class AccountCollapseComponent implements OnInit {\n  customStyle = {\n    background: '#f7f7f7',\n    'margin-bottom': '24px',\n    border: '0px',\n  };\n  currentAccount: Account = {} as Account;\n\n  @Input() accounts: Account[] = [];\n\n  constructor(\n    private enableOrganization: EnableOrganizationGQL,\n    private disableOrganization: DisableOrganizationGQL\n  ) {}\n\n  ngOnInit() {}\n\n  enable(): void {\n    if (this.currentAccount.uuid) {\n      this.enableOrganization\n        .mutate({\n          uuid: this.currentAccount.uuid,\n        })\n        .subscribe(() => {\n          this.currentAccount.status = StatusEnum.Pending;\n        });\n    }\n  }\n\n  disable(): void {\n    if (this.currentAccount.uuid) {\n      this.disableOrganization\n        .mutate({\n          uuid: this.currentAccount.uuid,\n        })\n        .subscribe(() => {\n          this.currentAccount.status = StatusEnum.Suspended;\n        });\n    }\n  }\n\n  setCurrent(account: Account): void {\n    this.currentAccount = account;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account-collapse.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "enableOrganization",
                        "type": "EnableOrganizationGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "disableOrganization",
                        "type": "DisableOrganizationGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "enableOrganization",
                        "type": "EnableOrganizationGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "disableOrganization",
                        "type": "DisableOrganizationGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nz-collapse [nzBordered]=\"false\" class=\"w-100\" nz-accordion>\n  <nz-collapse-panel\n    #p\n    *ngFor=\"let account of accounts\"\n    [nzHeader]=\"header\"\n    [nzExtra]=\"moreIcon\"\n    [ngStyle]=\"customStyle\"\n    [nzExpandedIcon]=\"expandedIcon\"\n    [nzShowArrow]=\"account.subaccounts && account.subaccounts.length > 0\"\n  >\n    <div *ngIf=\"account.subaccounts && account.subaccounts.length > 0\">\n      <org-admin-account-collapse\n        [accounts]=\"account.subaccounts\"\n      ></org-admin-account-collapse>\n    </div>\n    <ng-template #header>\n      <div class=\"d-inline-block\">\n        <div nz-row nzAlign=\"middle\">\n          <nz-avatar nzIcon=\"user\"></nz-avatar>\n          <div class=\"ms-3\">\n            <div class=\"fw-bold\">{{ account.name }}</div>\n            <div>\n              <span>{{ account.members }} members </span>\n              <span\n                *ngIf=\"account.subaccounts && account.subaccounts.length > 0\"\n              >\n                | {{ account.subaccounts.length }} Subaccounts\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template #expandedIcon let-active>\n      <i\n        nz-icon\n        nzType=\"caret-left\"\n        class=\"ant-collapse-arrow\"\n        [nzRotate]=\"p.nzActive ? 90 : -90\"\n      ></i>\n    </ng-template>\n    <ng-template #moreIcon>\n      <a\n        nz-button\n        nzType=\"link\"\n        nz-dropdown\n        nzTrigger=\"click\"\n        [nzDropdownMenu]=\"menu\"\n        (mouseover)=\"setCurrent(account)\"\n        (click)=\"$event.stopPropagation()\"\n      >\n        <i nz-icon nzType=\"more\"></i>\n      </a>\n    </ng-template>\n  </nz-collapse-panel>\n</nz-collapse>\n\n<nz-dropdown-menu #menu=\"nzDropdownMenu\">\n  <ul nz-menu nzSelectable>\n    <li\n      nz-menu-item\n      (click)=\"enable()\"\n      *ngIf=\"currentAccount.status === 'SUSPENDED'; else elseBlock\"\n    >\n      <span>Enable Organization</span>\n      <i class=\"ms-2\" nz-icon nzType=\"export\" nzTheme=\"outline\"></i>\n    </li>\n    <ng-template #elseBlock>\n      <li nz-menu-item (click)=\"disable()\">\n        <span>Disable Organization</span>\n        <i class=\"ms-2\" nz-icon nzType=\"export\" nzTheme=\"outline\"></i>\n      </li>\n    </ng-template>\n    <li nz-menu-item>\n      <span>Manage permissions</span>\n      <i class=\"ms-2\" nz-icon nzType=\"export\" nzTheme=\"outline\"></i>\n    </li>\n  </ul>\n</nz-dropdown-menu>\n"
        },
        {
            "name": "AccountsComponent",
            "id": "component-AccountsComponent-007e28f142aa5460a0b7e163884dead85255cc0b076d4b8348066f11696c6c7b034229c2fddc939f2908594b67bf1f3472117bc092939d29ba7ceaf30ba6f21a",
            "file": "projects/explorer/src/app/accounts/accounts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-accounts",
            "styleUrls": [
                "./accounts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accounts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "populateAccounts",
                    "args": [
                        {
                            "name": "isSuperAdmin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isSuperAdmin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '@auth0/auth0-angular';\nimport { AccountService } from '../shared/services/account.service';\nimport { CurrentUserService } from '../shared/services/current-user.service';\nimport { MixpanelService } from '../shared/services/mixpanel.service';\nimport { AdminService } from '../shared/services/admin.service';\n// import {environment} from '../../environments/environment';\n\n@Component({\n  selector: 'exp-accounts',\n  templateUrl: './accounts.component.html',\n  styleUrls: ['./accounts.component.scss'],\n})\nexport class AccountsComponent implements OnInit {\n  accounts: any[] = [];\n\n  constructor(\n    public auth: AuthService,\n    private accountService: AccountService,\n    private currentUserService: CurrentUserService,\n    private router: Router,\n    private mixpanel: MixpanelService,\n  ) { }\n\n  ngOnInit(): void {\n    this.currentUserService.isSuperAdmin().subscribe((isSuperAdmin: boolean) => {\n      this.populateAccounts(isSuperAdmin);\n    });\n  }\n\n  populateAccounts(isSuperAdmin: boolean): void {\n    this.accountService.fetchAccounts().subscribe((accounts: any) => {\n      this.accounts = accounts.map((account: any) => {\n        return {\n          admin: true,\n          ...account\n        };\n      });\n    });\n    return;\n  }\n\n  selectAccount(account: any): void {\n    this.mixpanel.track('Account Selection', {selected: account});\n    this.currentUserService.selectAccount(account);\n    this.router.navigate(['/dashboard']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  min-width: 300px;\n  margin: 0 auto;\n}\n\n#accounts {\n  margin: 20px auto 0;\n  text-align: center;\n  \n  .accounts-list {\n    list-style-type: none;\n    color: #1b1f21;\n\n    li {\n      padding: 20px;\n      border: 3px solid #1b1f21;\n      border-width: 0 3px 3px;\n      position: relative;\n      cursor: pointer;\n\n      &:hover {\n        background: #fff;\n      }\n\n      &:first-child {\n        border-top-width: 3px;\n      }\n\n      .account-name {\n        display: block;\n        font-size: 18px;\n      }\n\n      .account-role {\n        display: block;\n        font-size: 14px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./accounts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"accounts\">\n  <ul class=\"accounts-list\">\n    <li *ngFor=\"let account of accounts\" (click)=\"selectAccount(account)\">\n      <span class=\"account-name\">{{account.name}}</span>\n      <span class=\"account-role\">Role: {{ account.admin ? 'Administrator' : 'User' }}</span>\n    </li>\n    <li *ngIf=\"!accounts?.length\">\n      <span class=\"account-name\">No assigned accounts</span>\n    </li>\n  </ul>\n</div>\n"
        },
        {
            "name": "AccountsComponent",
            "id": "component-AccountsComponent-3a20e91ee07721e4b735e0e2b4bb69fa7b9e6a3f97713de07ae1a4af5eae36749807776c786ceebe149ff026d2749807aeac8696fc48526ed3bada4baeb4c02f-1",
            "file": "projects/admin/src/app/pages/admin/components/accounts/accounts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-admin-accounts",
            "styleUrls": [
                "./accounts.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./accounts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isHelmAdmin$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "mapOrganizationData",
                    "args": [
                        {
                            "name": "organizations",
                            "type": "Organization[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Account[]",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "organizations",
                            "type": "Organization[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { select, Store } from '@ngrx/store';\nimport * as fromUserSelectors from '../../../../store/selectors/user.selectors';\nimport { FindOrganizationTreesGQL } from '../../../../shared/services/graphql/graphql.service';\nimport { UserService } from '../../../../shared/services/user/user.service';\nimport { Account } from './account';\nimport { UserState } from '../../../../store/reducers/user.reducer';\nimport { Organization } from '../../../../shared/models/organization.model';\n@Component({\n  selector: 'org-admin-accounts',\n  templateUrl: './accounts.component.html',\n  styleUrls: ['./accounts.component.less'],\n})\nexport class AccountsComponent implements OnInit {\n  isHelmAdmin$: Observable<boolean>;\n  accounts: Account[] = [];\n  isLoading = true;\n\n  constructor(\n    private findOrganizationsService: FindOrganizationTreesGQL,\n    private userService: UserService,\n    private store: Store<UserState>\n  ) {\n    this.isHelmAdmin$ = this.userService.isHelmAdmin$();\n  }\n\n  ngOnInit(): void {\n    this.isLoading = true;\n\n    combineLatest([\n      this.store.pipe(select(fromUserSelectors.selectCurrentOrganizationUuid)),\n      this.findOrganizationsService.fetch().pipe(take(1)),\n    ]).subscribe(([uuid, result]) => {\n      this.accounts = this.mapOrganizationData(\n        (result.data.organizations as Organization[]) || []\n      ).filter((org) => org.uuid === uuid);\n      this.isLoading = false;\n    });\n  }\n\n  mapOrganizationData(organizations: Organization[]): Account[] {\n    return (organizations || []).map((organization) => ({\n      name: organization?.name || '',\n      uuid: organization?.uuid || '',\n      members: organization?.countUsers || 0,\n      subaccounts: this.mapOrganizationData(organization?.organizations || []),\n      status: organization?.status || '',\n    }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".account-btn {\n  background-color: #eee;\n}\n",
                    "styleUrl": "./accounts.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "findOrganizationsService",
                        "type": "FindOrganizationTreesGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "findOrganizationsService",
                        "type": "FindOrganizationTreesGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AccountsComponent-1",
            "templateData": "<div class=\"d-flex justify-content-center\">\n  <nz-spin nzSimple *ngIf=\"isLoading\"></nz-spin>\n</div>\n<ng-container *ngIf=\"!isLoading\">\n  <div nz-row nzAlign=\"middle\" class=\"pt-5 pb-4\">\n    <div nz-col nzSpan=\"12\" class=\"search-btn\">\n      <nz-input-group\n        nzSearch\n        nzSize=\"large\"\n        [nzAddOnAfter]=\"suffixIconButton\"\n        class=\"rounded-3 w-75\"\n      >\n        <input type=\"text\" nz-input placeholder=\"Search members, accounts...\" />\n      </nz-input-group>\n      <ng-template #suffixIconButton>\n        <button nz-button nzType=\"primary\" nzSearch class=\"w-auto px-3\">\n          <i nz-icon nzType=\"search\"></i>\n        </button>\n      </ng-template>\n    </div>\n    <div *ngIf=\"isHelmAdmin$ | async\" nz-col nzSpan=\"9\" class=\"ms-auto\">\n      <div nz-row nzJustify=\"space-between\">\n        <div nz-col nzSpan=\"11\">\n          <a\n            routerLink='/create-org'\n            nz-button\n            nzType=\"primary\"\n            nzSize=\"large\"\n            class=\"text-uppercase action-btn\"\n          >Create Organization</a>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div nz-row>\n    <org-admin-account-collapse\n      class=\"w-100\"\n      [accounts]=\"accounts\"\n    ></org-admin-account-collapse>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "AdminComponent",
            "id": "component-AdminComponent-3fd2c67b2a13ae6eb8ab3012cbf7a9940cf5db51eaf324edf58a1add0a19bd6ccdde8a5b0f407f7d9a1c058cd7018232e7616c965fc29a56f0aa7661bf2cd7f7",
            "file": "projects/explorer/src/app/admin/admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-admin",
            "styleUrls": [
                "./admin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accounts",
                    "defaultValue": "[{\n    name: 'Super Admins',\n    segment: [],\n    superAdmin: true,\n    users: [],\n    id: '1',\n    status: {},\n    isDisabled: false,\n  }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account[]",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "accountsLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "allChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "currentPageUsers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "editId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "editName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "expandedAccountId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "indeterminate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "inputAccountName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "inputEmailValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "inputNameValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "listOfSegmentOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "mappingOf50States",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "newAccountProcessing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "newAccountRowIsHidden",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "selectedSegments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "setOfCheckedId",
                    "defaultValue": "new Set<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "showActionMenu",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "showPasswordResetAlert",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "statusType",
                    "defaultValue": "Status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "usersLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "addAccount",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "segment",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "segment",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "assignUsersToAccounts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "blockUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shouldBlock",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldBlock",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disableAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isActive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isActive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStatus",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Status",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsersForAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "User[]",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAllChecked",
                    "args": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onExpandChange",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onItemChecked",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshCheckedStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resendInvite",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveEdit",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showNewAccountRow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startEdit",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCheckedSet",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserHelper",
                    "args": [
                        {
                            "name": "updatedUser",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "updatedUser",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AdminService } from '../shared/services/admin.service';\nimport { NzMessageService } from 'ng-zorro-antd/message';\nimport mappingOf50States from './listOf50States';\nimport {isDigit} from 'codelyzer/angular/styles/chars';\n\nexport enum Status {\n  Active,\n  Unverified,\n  Blocked,\n}\n\nexport interface User {\n  userId: string;\n  firstName: string;\n  lastName: string;\n  avatar: string;\n  email: string;\n  phoneNumber: number;\n  emailVerified: boolean;\n  userAccounts: any[];\n  superAdmin: boolean;\n}\n\nexport interface Account {\n  id: string;\n  name: string;\n  segment: string[];\n  superAdmin?: boolean;\n  users: User[];\n  isDisabled: boolean;\n  status: {[userId: string]: Status};\n}\n\n\n@Component({\n  selector: 'exp-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss']\n})\nexport class AdminComponent implements OnInit {\n  statusType = Status;\n  accountsLoading = false;\n  expandedAccountId = '';\n  newAccountRowIsHidden = true;\n  newAccountProcessing = false;\n  inputAccountName = '';\n  selectedSegments: string[] = [];\n  mappingOf50States: any;\n  listOfSegmentOptions: string[] = [];\n  usersLoading = false;\n  inputEmailValue = '';\n  inputNameValue = '';\n  editId = '';\n  editName = '';\n  showActionMenu: {[userId: string]: boolean} = {};\n  showPasswordResetAlert = false;\n  allChecked = false;\n  setOfCheckedId = new Set<string>();\n  currentPageUsers: User[] = [];\n  indeterminate = false;\n  accounts: Account[] = [{\n    name: 'Super Admins',\n    segment: [],\n    superAdmin: true,\n    users: [],\n    id: '1',\n    status: {},\n    isDisabled: false,\n  }];\n  users: User[] = [];\n\n  constructor(private adminService: AdminService, private message: NzMessageService) { }\n\n  ngOnInit(): void {\n    this.mappingOf50States = mappingOf50States;\n    this.accountsLoading = true;\n    this.listOfSegmentOptions = Object.keys(mappingOf50States);\n    this.adminService.getAccounts().subscribe(accounts => {\n      accounts.forEach((act: Account) => {act.users = []; });\n      this.accounts = [...this.accounts, ...accounts];\n      this.adminService.getUsers().subscribe(users => {\n        this.users = users;\n        this.assignUsersToAccounts();\n      });\n    });\n  }\n\n  addAccount(name: string, segment: string[]): void {\n    this.newAccountProcessing = true;\n    this.accountsLoading = true;\n    this.adminService.createAccount(name, segment).subscribe(accounts => {\n      this.accountsLoading = false;\n      this.newAccountProcessing = false;\n      this.newAccountRowIsHidden = true;\n      const account = accounts.pop();\n      account.users = [];\n      this.accounts.splice(1, 0, account);\n      this.accounts = [...this.accounts];\n    });\n  }\n\n  disableAccount(account: Account, isActive: boolean): void {\n    this.accountsLoading = true;\n    const isDisabled = !isActive;\n    this.adminService.disableAccount(account.id, isDisabled).subscribe(() => {\n      this.accountsLoading = false;\n      account.isDisabled = isDisabled;\n    });\n  }\n\n  assignUsersToAccounts(): void {\n    this.accounts = this.accounts.map((account: Account) => {\n      account.users = this.getUsersForAccount(account);\n      account.status = account.users.reduce((statusObj: any, user) => {\n        statusObj[user.userId] = this.getStatus(user, account.id);\n        return statusObj;\n      }, {});\n      return account;\n    });\n    this.usersLoading = false;\n    this.accountsLoading = false;\n  }\n\n  getUsersForAccount(account: Account): User[] {\n    if (account.superAdmin) {\n      return this.users.filter(user => user.superAdmin);\n    }\n    return this.users.filter( user => {\n      const userBelongsToAccount = user.userAccounts.some(\n        userAccount => userAccount.account === account.id\n      );\n      return userBelongsToAccount;\n    });\n  }\n\n  getStatus(user: User, accountId: string): Status {\n    const userAccount = user.userAccounts.find(account => account.account === accountId);\n\n    if (!user.emailVerified) {\n      return Status.Unverified;\n    }\n\n    if (userAccount && userAccount.blocked) {\n      return Status.Blocked;\n    }\n    return Status.Active;\n  }\n\n  addUser(email: string, userName: string, account: Account): void {\n    const user = this.users.find(potentialUser => potentialUser.email === email);\n    const isSuperAdmin = !!account.superAdmin;\n    this.usersLoading = true;\n    this.inputEmailValue = '';\n    this.inputNameValue = '';\n    const [firstName, lastName] = userName.trim().split(' ');\n    if (account.users.find(accountUser => accountUser === user)) {\n      this.message.error(`${email} is already add to ${account.name}`, { nzDuration: 2500 });\n      this.usersLoading = false;\n    }\n    if (user) {\n      if (isSuperAdmin) {\n        this.adminService.assignSuperAdminToUser(user.userId, true).subscribe(users => {\n          const updatedUser = users.pop();\n          this.updateUserHelper(updatedUser);\n        });\n        return;\n      }\n      this.adminService.addUserToAccount(user.userId, account.id).subscribe(users => {\n        const updatedUser = users.pop();\n        this.updateUserHelper(updatedUser);\n      });\n      return;\n    }\n\n    if (!user){\n      // Only invite if user doesn't exist\n      this.adminService.inviteUser(email, account.id, firstName, lastName, isSuperAdmin).subscribe(users => {\n        const newUser = users.pop();\n        this.users = [...this.users, newUser];\n        this.assignUsersToAccounts();\n      });\n    }\n  }\n\n  startEdit(user: User): void {\n    this.editId = user.userId;\n    this.editName = user.firstName + (user.lastName ? ` ${user.lastName}` : '');\n    return;\n  }\n\n  stopEdit(): void {\n    this.editId = '';\n    this.editName = '';\n    return;\n  }\n\n  saveEdit(user: User): void {\n    this.usersLoading = true;\n    const listOfNames = this.editName.trim().split(' ');\n    if (listOfNames.length > 2) {\n      this.message.error('Please provided only a first name and a last name');\n      this.usersLoading = false;\n      return;\n    }\n    const [firstName, lastName] = listOfNames;\n    this.adminService.updateUser(user.userId, firstName, lastName).subscribe((users: any) => {\n      const updatedUser = users.pop();\n      this.updateUserHelper(updatedUser);\n      this.usersLoading = false;\n    });\n    this.stopEdit();\n  }\n\n  removeUser(userId: string, account: Account): void {\n    this.usersLoading = true;\n    if (account.superAdmin) {\n        this.adminService.assignSuperAdminToUser(userId, false).subscribe((users: any) => {\n          const updatedUser = users.pop();\n          this.updateUserHelper(updatedUser);\n        });\n        return;\n    }\n    this.adminService.removeUserFromAccount(userId, account.id).subscribe((users: any) => {\n      const updatedUser = users.pop();\n      this.updateUserHelper(updatedUser);\n    });\n  }\n\n  blockUser(userId: string, accountId: string, shouldBlock: boolean): void {\n    this.usersLoading = true;\n    this.adminService.blockUserFromAccount(userId, accountId, shouldBlock).subscribe((users: any) => {\n      this.usersLoading = false;\n      const blockedUser = users.pop();\n      this.updateUserHelper(blockedUser);\n    });\n  }\n\n  updateUserHelper(updatedUser: User): void {\n    this.users = this.users.map(user => {\n      if (user.userId === updatedUser.userId) {\n        return updatedUser;\n      }\n      return user;\n    });\n    this.assignUsersToAccounts();\n  }\n\n  resendInvite(email: string, userId: string, accountId: string): void {\n    this.adminService.resendInviteToUser(email, userId, accountId).subscribe(() => {\n      this.message.success(`Invite email sent to ${email}`, { nzDuration: 2500 });\n    });\n  }\n\n  resetPassword(user: any): void {\n    this.adminService.resetPassword(user.userId, user.email).subscribe( UpdatedUser => {\n      this.showPasswordResetAlert = true;\n      setInterval(() => {\n        this.showPasswordResetAlert = false;\n      }, 5000);\n    });\n  }\n\n  updateCheckedSet(userId: string, checked: boolean): void {\n    if (checked) {\n      this.setOfCheckedId.add(userId);\n    } else {\n      this.setOfCheckedId.delete(userId);\n    }\n  }\n\n  onItemChecked(userId: string, checked: boolean): void {\n    this.updateCheckedSet(userId, checked);\n    this.refreshCheckedStatus();\n  }\n\n  refreshCheckedStatus(): void {\n    // this.setOfCheckedId.forEach(item => console.log(item));\n    this.allChecked = this.users.every(({ userId }) => this.setOfCheckedId.has(userId));\n    this.indeterminate = this.users.some(({ userId }) => this.setOfCheckedId.has(userId)) && !this.allChecked;\n  }\n\n  onAllChecked(checked: boolean): void {\n    this.users.forEach(({ userId }) => this.updateCheckedSet(userId, checked));\n    this.refreshCheckedStatus();\n  }\n\n  onExpandChange(accountId: string, checked: boolean): void {\n    this.expandedAccountId = checked ? accountId : '';\n  }\n\n  showNewAccountRow(): void {\n    this.newAccountRowIsHidden = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%\n}\n\nnz-select {\n  width: 100%;\n}\n\n.action-item {\n  display: block;\n}\n\n",
                    "styleUrl": "./admin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "adminService",
                        "type": "AdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "NzMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "adminService",
                        "type": "AdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "NzMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<br />\n<br />\n<button nz-button (click)=\"showNewAccountRow()\" nzType=\"primary\">Add\n  Account</button>\n<nz-table #accountTable nzTitle=\"Accounts\" [nzData]=\"accounts\" [nzPageSize]=\"10\" [nzLoading]=\"accountsLoading\">\n  <thead>\n    <tr>\n      <th nzWidth=\"10px\"></th>\n      <th>Name</th>\n      <th nzWidth=\"10px\">Users</th>\n      <th nzWidth=\"300px\">Segments</th>\n      <th nzWidth=\"30px\"></th>\n    </tr>\n  </thead>\n  <tbody>\n      <tr [hidden]=\"newAccountRowIsHidden\">\n        <td>\n          <button nz-button\n            (click)=\"addAccount(inputAccountName, selectedSegments)\"\n            nzType=\"primary\"\n            [nzLoading]=\"accountsLoading\"\n            >Add</button>\n        </td>\n        <td>\n          <input nz-input placeholder=\"name\" [(ngModel)]=\"inputAccountName\" />\n        </td>\n        <td> \n        </td>\n        <td>\n          <nz-select nzMode=\"tags\" nzPlaceHolder=\"National\" nzAllowClear\n            [nzLoading]=\"newAccountProcessing\" [(ngModel)]=\"selectedSegments\">\n            <nz-option\n              *ngFor=\"let option of listOfSegmentOptions\"\n              [nzLabel]=\"mappingOf50States[option]\"\n              [nzValue]=\"option\"\n              ></nz-option>\n          </nz-select>\n        </td>\n      </tr>\n    <ng-template ngFor let-account [ngForOf]=\"accountTable.data\">\n      <tr>\n        <td *ngIf=\"account.isDisabled\"></td>\n        <td *ngIf=\"!account.isDisabled\"\n          [nzExpand]=\"account.id === expandedAccountId\"\n          (nzExpandChange)=\"onExpandChange(account.id, $event)\"></td>\n        <td>{{ account.name }}</td>\n        <td>{{ account.users.length }}</td>\n        <td>\n          <nz-tag nzColor=\"default\" *ngIf=\"account.segment?.length === 0\">National</nz-tag>\n          <nz-tag nzColor=\"default\" *ngFor=\"let segment of account.segment\">\n            {{ segment }}</nz-tag>\n        </td>\n        <td>\n          <nz-switch\n            *ngIf=\"!account?.superAdmin\"\n            [ngModel]=\"!account.isDisabled\"\n            (ngModelChange)=\"disableAccount(account, $event)\"\n            nzCheckedChildren=\"Active\"\n            nzUnCheckedChildren=\"Disable\"></nz-switch>\n        </td>\n      </tr>\n      <tr [nzExpand]=\"account.id === expandedAccountId\">\n        <nz-table #userTable nzTitle=\"Users\" [nzData]=\"account.users\" nzOuterBordered [nzLoading]=\"usersLoading\">\n          <thead>\n            <tr>\n              <th\n                nzWidth=\"50px\"\n                [nzChecked]=\"allChecked\"\n                [nzIndeterminate]=\"indeterminate\"\n                (nzCheckedChange)=\"onAllChecked($event)\"\n              ></th>\n              <th nzWidth=\"300px\">Name</th>\n              <th>Email</th>\n              <th>Status</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <button nz-button\n                  (click)=\"addUser(inputEmailValue, inputNameValue, account)\"\n                  nzType=\"primary\"\n                  >Add</button>\n              </td>\n              <td>\n                <div class=\"email-input\">\n                  <input type=\"text\" nz-input\n                         placeholder=\"Full Name\"\n                         [(ngModel)]=\"inputNameValue\"/>\n                </div>\n              </td>\n              <td>\n                <div class=\"email-input\">\n                  <input type=\"text\" nz-input\n                    placeholder=\"Email\"\n                    [(ngModel)]=\"inputEmailValue\"/>\n                </div>\n              </td>\n              <td></td>\n              <td> </td>\n            </tr>\n            <tr *ngFor=\"let user of userTable.data\">\n              <td\n                [nzChecked]=\"setOfCheckedId.has(user.userId)\"\n                (nzCheckedChange)=\"onItemChecked(user.userId, $event)\"\n                ></td>\n              <td>\n                <div class=\"editable-cell\" [hidden]=\"editId === user.userId\">\n                  {{user.firstName + ' ' + user.lastName}}\n                </div>\n                <input\n                  [hidden]=\"editId !== user.userId\"\n                  type=\"text\"\n                  nz-input\n                  [(ngModel)]=\"editName\"\n                  (blur)=\"stopEdit()\"\n                  (keyup.enter)=\"saveEdit(user)\" />\n              </td>\n              <td>{{user.email}}</td>\n              <td [ngSwitch]=\"account.status[user.userId]\">\n                <nz-tag *ngSwitchCase=\"statusType.Unverified\" nzColor=\"processing\">\n                  <i nz-icon nzType=\"send\"></i>\n                  <span>invite sent</span>\n                </nz-tag>\n                <nz-tag *ngSwitchCase=\"statusType.Blocked\" nzColor=\"error\">\n                  <i nz-icon nzType=\"stop\"></i>\n                  <span>blocked</span>\n                </nz-tag>\n                <nz-tag *ngSwitchDefault nzColor=\"success\">\n                  <i nz-icon nzType=\"check-circle\"></i>\n                  <span>active</span>\n                </nz-tag>\n              </td>\n              <td>\n                <button\n                  nz-button\n                  nzType=\"default\"\n                  nz-dropdown\n                  nzTrigger=\"click\"\n                  nzPlacement=\"bottomLeft\"\n                  [nzDropdownMenu]=\"menu\"\n                >\n                  <i nz-icon nzType=\"more\" nzTheme=\"outline\"></i>\n                </button>\n                <nz-dropdown-menu #menu=\"nzDropdownMenu\">\n                  <ul nz-menu>\n                    <li nz-menu-item>\n                      <a class=\"action-item\"\n                         (click)=\"startEdit(user)\"\n                      >Edit Name</a>\n                    </li>\n                    <li nz-menu-divider></li>\n                    <li nz-menu-item>\n                      <a class=\"action-item\"\n                         *ngIf=\"account.status[user.userId] !== statusType.Blocked\"\n                         (click)=\"blockUser(user.userId, account.id, true)\"\n                      >Suspend</a>\n                      <a class=\"action-item\"\n                         *ngIf=\"account.status[user.userId] === statusType.Blocked\"\n                         (click)=\"blockUser(user.userId, account.id, false)\"\n                      >Unsuspend</a>\n                    </li>\n                    <li nz-menu-item><a class=\"action-item\" (click)=\"resetPassword(user)\">Reset Password</a></li>\n                    <li nz-menu-item *ngIf=\"account.status[user.userId] === statusType.Unverified\">\n                      <a class=\"action-item\" (click)=\"resendInvite(user.email, user.userId, account.id)\">Resend Invite</a>\n                    </li>\n                    <li nz-menu-divider></li>\n                    <li nz-menu-item>\n                      <a\n                        nz-popconfirm\n                        nzPopconfirmTitle=\"Are you sure you want to remove user?\"\n                        nzPopconfirmPlacement=\"bottom\"\n                        (nzOnConfirm)=\"removeUser(user.userId, account)\"\n                        >Remove</a>\n                    </li>\n                  </ul>\n                </nz-dropdown-menu>\n              </td>\n            </tr>\n          </tbody>\n        </nz-table>\n\n      </tr>\n    </ng-template>\n  </tbody>\n</nz-table>\n"
        },
        {
            "name": "AdminComponent",
            "id": "component-AdminComponent-97cbf7405ab409187bcdec26009ea3fbb5594926a449147b5d87be684290e8dfa2d61eee0fdddeb1489e3d6ebe6a5398b1a619ab836afc90909df1b437e59572-1",
            "file": "projects/admin/src/app/pages/admin/admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-admin",
            "styleUrls": [
                "./admin.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "tabs",
                    "defaultValue": "[\n    {\n      route: '/dashboard/members',\n      name: 'Members',\n      icon: 'user',\n    },\n    {\n      route: '/dashboard/accounts',\n      name: 'Accounts',\n      icon: 'apartment',\n    },\n    /*\n    {\n      route: '/dashboard/activity',\n      name: 'Activity',\n      icon: 'line-chart',\n    },\n    {\n      route: '/dashboard/billing',\n      name: 'Billing',\n      icon: 'dollar',\n    },\n    {\n      route: '/dashboard/permissions',\n      name: 'Permissions',\n      icon: 'lock',\n    },\n    */\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\n\n@Component({\n  selector: 'org-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.less'],\n})\nexport class AdminComponent {\n  tabs = [\n    {\n      route: '/dashboard/members',\n      name: 'Members',\n      icon: 'user',\n    },\n    {\n      route: '/dashboard/accounts',\n      name: 'Accounts',\n      icon: 'apartment',\n    },\n    /*\n    {\n      route: '/dashboard/activity',\n      name: 'Activity',\n      icon: 'line-chart',\n    },\n    {\n      route: '/dashboard/billing',\n      name: 'Billing',\n      icon: 'dollar',\n    },\n    {\n      route: '/dashboard/permissions',\n      name: 'Permissions',\n      icon: 'lock',\n    },\n    */\n  ];\n\n  activeTab = 0;\n\n  constructor(private router: Router) {\n    // override the route reuse strategy\n    this.router.routeReuseStrategy.shouldReuseRoute = function () {\n      return false;\n    };\n\n    this.router.events.subscribe((evt) => {\n      if (evt instanceof NavigationEnd) {\n        const url = evt.url;\n        this.activeTab = this.tabs.findIndex((tab) => tab.route === url);\n\n        // trick the Router into believing it's last link wasn't previously loaded\n        this.router.navigated = false;\n        // if you need to scroll back to top, here is the right place\n        window.scrollTo(0, 0);\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".admin {\n  .action-btn {\n    border-radius: 8px;\n    font-size: 14px;\n  }\n}\n",
                    "styleUrl": "./admin.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AdminComponent-1",
            "templateData": "<div class=\"p-4 admin\">\n  <div nz-row nzAlign=\"middle\">\n    <div nz-col nzFlex=\"auto\">\n      <h1 nz-typography class=\"mb-0\">Account Management</h1>\n    </div>\n  </div>\n  <div nz-row class=\"pt-4\">\n    <nz-tabset [nzSelectedIndex]=\"activeTab\" class=\"w-100\" nzLinkRouter>\n      <nz-tab *ngFor=\"let tab of tabs; let i = index\">\n        <a *nzTabLink nz-tab-link [routerLink]=\"tab.route\" class=\"text-black\">\n          <i nz-icon [nzType]=\"tab.icon\"></i>\n          {{ tab.name }}\n        </a>\n        <router-outlet></router-outlet>\n      </nz-tab>\n    </nz-tabset>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-474180a1d5a088afdf9d729b8b617c054c23490df4c47ae5a7312754d5ea40c9a068daf25ce19cb9b41b256e91c31bd776ce21f645308cfd78efcb98640cf67d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'organizer-frontends'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'organizer-frontends';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "Main App\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d5b462c05f4d38d0087d5d1239ae8e6535f92de17296d5abb59576cfe51f45815123dfe3a33341631e6e1bcdc60a5a7fe0a09b90bb79fbde07280d5f288c5f67-1",
            "file": "projects/admin/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-root",
            "styleUrls": [
                "./app.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'organizer-front'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'org-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.less'],\n})\nexport class AppComponent {\n  title: string = 'organizer-front';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.less"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppComponent-1",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-ea1f143d7fd85628dc6c24040c4f4317d669bee63118a4bb1e52b61ee8a235daed4f7e7d44f9063e5a41a69dddc6f980f1d1fd9c22d5abe3980d3bfd010e4221-2",
            "file": "projects/explorer/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showTrackingWarning",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "defaultValue": "'explorer-front'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "acceptTracking",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '@auth0/auth0-angular';\n\n@Component({\n  selector: 'exp-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'explorer-front';\n  showTrackingWarning = true;\n\n  constructor(public auth: AuthService, public router: Router) {}\n  ngOnInit(): void {\n    this.showTrackingWarning = !localStorage.getItem('trackingAccepted');\n  }\n\n  acceptTracking(): void {\n    localStorage.setItem('trackingAccepted', 'true');\n    this.showTrackingWarning = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".app-layout {\n  background: #f6f6f6;\n  height: 100%;\n}\n.home-bg {\n  background-color: #565656;\n}\n\n.tracking-warning-wrapper {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  background: #ccc;\n  color: #313131;\n  z-index: 100;\n\n  .tracking-warning {\n    padding: 15px;\n    text-align: center;\n\n    .dismiss-button {\n      margin-left: 15px;\n    }\n  }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "AppComponent-2",
            "templateData": "<div *ngIf=\"auth.isLoading$ | async; else loaded\">Loading</div>\n\n<ng-template #loaded>\n<nz-layout class=\"app-layout\" [ngClass]=\"{'home-bg': router.url === '/'}\">\n  <exp-header *ngIf=\"router.url !== '/maintenance'\"></exp-header>\n  <nz-content *ngIf=\"router.url !== '/dashboard'\" class=\"container inner-content\">\n    <router-outlet></router-outlet>\n  </nz-content>\n  <nz-content *ngIf=\"router.url === '/dashboard'\">\n    <router-outlet></router-outlet>\n  </nz-content>\n  <div class=\"tracking-warning-wrapper\" *ngIf=\"showTrackingWarning\">\n    <div class=\"tracking-warning\">\n      <b>Explorer notice:</b> Hi there! While you use Explorer, we may collect analytics data from you with the help of our vendors. This data is only\n      used for helping us improve our platform and troubleshooting user issues. To learn more about our general privacy\n      practices, please visit <a href=\"https://www.helmteam.us/privacy-policy\" target=\"_blank\" >https://www.helmteam.us/privacy-policy</a>.\n      <button (click)=\"acceptTracking()\" class=\"dismiss-button\" nz-button nzType=\"primary\">Accept</button>\n    </div>\n  </div>\n</nz-layout>\n</ng-template>\n\n\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-65b5f0a59437b057821103250c848d4509ca75f57ef308a310c6a77f9cbdf3ba7fb87ec070743cdc8640a6c43a5e448a3e3fad76e052adfec0acf16d8c6ffc30-3",
            "file": "projects/forms/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'forms'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'forms';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "AppComponent-3",
            "templateData": "Forms App\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "AssignRolesComponent",
            "id": "component-AssignRolesComponent-cb02bdb36dfd3d2630410c9b508a38e07877f5d723567191865ba178ce00ad78f713a6b17fa68158f962f3ce9be88b69e093dedbabb300064dafcd0ac62a5bd0",
            "file": "projects/admin/src/app/pages/invite/components/assign-roles/assign-roles.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-assign-roles",
            "styleUrls": [
                "./assign-roles.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./assign-roles.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "emails",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Role[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sendInvite",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "defaultRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "invites",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Invite[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "handleDefaultRoleChange",
                    "args": [
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSendInvite",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Role } from '../../../../shared/models/role.model';\nimport { Invite } from '../../invite.component';\n\n@Component({\n  selector: 'org-assign-roles',\n  templateUrl: './assign-roles.component.html',\n  styleUrls: ['./assign-roles.component.less'],\n})\nexport class AssignRolesComponent implements OnInit {\n  @Input() emails: string[] = [];\n  @Input() roles: Role[] = [];\n  @Output() sendInvite = new EventEmitter();\n\n  invites: Invite[] = [];\n  defaultRole!: Role;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.defaultRole = this.roles[0];\n    this.invites = this.emails.map(email => ({\n      email,\n      role: this.roles[0],\n    }));\n  }\n\n  handleDefaultRoleChange(role: Role): void {\n    this.invites = this.invites.map(invite => ({\n      email: invite.email,\n      role,\n    }));\n  }\n\n  handleSendInvite(): void {\n    this.sendInvite.emit(this.invites);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".assign-roles {\n  max-width: 500px;\n\n  &__roles {\n    width: 120px;\n  }\n}\n",
                    "styleUrl": "./assign-roles.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"assign-roles\">\n  <i nz-icon nzType=\"user-add\" nzTheme=\"outline\" class=\"fs-1\"></i>\n  <h4 class=\"mt-3\" nz-typography>Assign members to roles</h4>\n  <p>\n    <strong>{{ invites.length }} </strong>contacts were recognized in this file\n    and will be added to Murmuration’s members list. Review and assign these\n    members to roles.\n  </p>\n\n  <nz-form-item class=\"mt-4\">\n    <nz-form-label>Assign all members to the role</nz-form-label>\n    <nz-form-control>\n      <nz-radio-group\n        name=\"role\"\n        ngDefaultControl\n        [(ngModel)]=\"defaultRole\"\n        (ngModelChange)=\"handleDefaultRoleChange($event)\"\n      >\n        <label nz-radio [nzValue]=\"role\" *ngFor=\"let role of roles\">{{\n          role.name\n        }}</label>\n      </nz-radio-group>\n    </nz-form-control>\n  </nz-form-item>\n\n  <nz-table #basicTable [nzData]=\"invites\" [nzShowPagination]=\"false\">\n    <thead>\n      <tr>\n        <th></th>\n        <th>Email</th>\n        <th>Role</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let data of basicTable.data; index as key\">\n        <td>{{ key + 1 }}</td>\n        <td>\n          <input\n            nz-input\n            name=\"email\"\n            ngDefaultControl\n            [(ngModel)]=\"data.email\"\n            placeholder=\"borderless\"\n            nzBorderless\n          />\n        </td>\n        <td>\n          <div class=\"assign-roles__roles\">\n            <nz-select\n              name=\"assign-role\"\n              ngDefaultControl\n              [(ngModel)]=\"data.role\"\n              nzPlaceHolder=\"Select a role\"\n            >\n              <nz-option\n                [nzValue]=\"role\"\n                *ngFor=\"let role of roles\"\n                [nzLabel]=\"role.name\"\n              ></nz-option>\n            </nz-select>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </nz-table>\n  <div nz-row nzAlign=\"middle\" class=\"mt-4\">\n    <div nz-col nzFlex=\"auto\"></div>\n    <div nz-col>\n      <button nz-button nzType=\"primary\" (click)=\"handleSendInvite()\">\n        Send invite\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/examples/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CommunitySaveDrawerComponent",
            "id": "component-CommunitySaveDrawerComponent-962348d0513d9cc172c6ff51787719b370fdef2a1c521e09b118fac7c214d9d5915474e25649aa2dac690f13a00466988e64f251b0edc337c76dadefc3db7bef",
            "file": "projects/explorer/src/app/shared/components/community-save-drawer/community-save-drawer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-community-save-drawer",
            "styleUrls": [
                "./community-save-drawer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./community-save-drawer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "criteriaFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "existingCommunity",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "geoFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "isVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selections",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "MapSelection",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "isVisibleChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_criteriaFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "_geoFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "criteriaTitleMapping",
                    "defaultValue": "{\n    age: 'Age',\n    gender: 'Gender',\n    marital: 'Marital Status',\n    hh_income: 'Income',\n    education: 'Education',\n    voted: 'Voted',\n    donor: 'Donated to',\n    party: 'Party',\n    civic_score: 'Civic Score',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "saveAsNewProcessing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "saveCommunityForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "saveProcessing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "configureCriteriaDisplayName",
                    "args": [
                        {
                            "name": "criteria",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "criteria",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "isSaveAsNew",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isSaveAsNew",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveOrUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnChanges, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { finalize  } from 'rxjs/operators';\nimport { NzMessageService  } from 'ng-zorro-antd/message';\n\nimport { CommunitiesService } from '../../services/communities.service';\nimport { FilterState } from '../../stores/filter-store/explorer-filters.reducer';\nimport * as FilterActions from '../../stores/filter-store/explorer-filters.actions';\nimport { MapSelection } from '../us-map/map-selection.model';\nimport {Store} from '@ngrx/store';\nimport {filterExplorerCommunityUpdated} from '../../stores/filter-store/explorer-filters.actions';\n\n@Component({\n  selector: 'exp-community-save-drawer',\n  templateUrl: './community-save-drawer.component.html',\n  styleUrls: ['./community-save-drawer.component.scss'],\n})\nexport class CommunitySaveDrawerComponent implements OnInit, OnChanges {\n  @Input() selections: MapSelection = {};\n  @Input() existingCommunity: any = {};\n  @Input() isVisible = false;\n  @Input() criteriaFilters: any = [];\n  @Input() geoFilters: any = [];\n  @Output() isVisibleChange = new EventEmitter<boolean>();\n\n  // @ts-ignore\n  saveCommunityForm: FormGroup;\n  saveAsNewProcessing = false;\n  saveProcessing = false;\n  _criteriaFilters: any = [];\n  _geoFilters: any = [];\n  criteriaTitleMapping: any = {\n    age: 'Age',\n    gender: 'Gender',\n    marital: 'Marital Status',\n    hh_income: 'Income',\n    education: 'Education',\n    voted: 'Voted',\n    donor: 'Donated to',\n    party: 'Party',\n    civic_score: 'Civic Score',\n  };\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private communitiesService: CommunitiesService,\n    private message: NzMessageService,\n    private filterStore: Store<FilterState>,\n  ) { }\n\n  ngOnInit(): void {\n    this.saveCommunityForm = this.formBuilder.group({\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      name: ['', [Validators.required]],\n      description: ['', [Validators.maxLength(100)]],\n      notes: [''],\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes?.isVisible?.currentValue) {\n      this._criteriaFilters = this.existingCommunity?.criteriaFilters || this.criteriaFilters;\n      this._geoFilters = this.existingCommunity?.geoFilters || this.geoFilters;\n      this.saveCommunityForm = this.formBuilder.group({\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        name: [(this.existingCommunity?.name || ''), [Validators.required]],\n        description: [(this.existingCommunity?.description || ''), [Validators.maxLength(100)]],\n        notes: [(this.existingCommunity?.notes || '')],\n        criteriaFilters: [this._criteriaFilters],\n        geoFilters: [(this._geoFilters)],\n      });\n    }\n  }\n\n  configureCriteriaDisplayName(criteria: any): string {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    return `${this.criteriaTitleMapping[criteria.value.property]}: ${criteria.label}`;\n  }\n\n  close(): void {\n    this.isVisible = false;\n    this.isVisibleChange.emit(this.isVisible);\n  }\n\n  save(isSaveAsNew?: boolean): void {\n    const {name, description, notes} = this.saveCommunityForm.value;\n    let filters = {};\n    if (isSaveAsNew) {\n      this.saveAsNewProcessing = true;\n    } else {\n      this.saveProcessing = true;\n      filters = {\n        criteriaFilters: JSON.stringify(this._criteriaFilters),\n        geoFilters: JSON.stringify(this._geoFilters),\n        selections: JSON.stringify(this.selections),\n      };\n    }\n    this.communitiesService.create({\n      communityAttr: {\n        name,\n        description,\n        notes,\n        ...filters,\n      },\n    }).pipe(\n      finalize(() => {\n        this.saveProcessing = false;\n        this.saveAsNewProcessing = false;\n      }),\n    ).subscribe(\n      newCommunity => {\n        this.close();\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.message.success(`The community (${newCommunity.name}) successfully created`);\n      },\n      err => {\n        this.message.error('An error occur saving the community');\n      },\n    );\n  }\n\n  update(): void {\n    const {name, description, notes} = this.saveCommunityForm.value;\n    const uuid = this.existingCommunity.uuid;\n    this.saveProcessing = true;\n    this.communitiesService.update({\n      uuid,\n      communityAttr: {\n        name,\n        description,\n        notes,\n      },\n    }).pipe(\n      finalize(() => {\n        this.saveProcessing = false;\n      }),\n    ).subscribe(\n      updatedCommunity => {\n        this.close();\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.message.success(`The community (${updatedCommunity.name}) successfully updated`);\n      },\n      err => {\n        this.message.error('An error occur updating the community');\n      },\n    );\n    this.filterStore.dispatch(FilterActions.filterExplorerCommunityUpdated({communityUpdated: true}));\n  }\n\n  cancel($event: any): void {\n    this.saveProcessing = false;\n    this.saveAsNewProcessing = false;\n    this.close();\n  }\n\n  saveOrUpdate(): void {\n    if (this.existingCommunity && this.existingCommunity.uuid) {\n      this.update();\n    } else {\n      this.save();\n    }\n    this.filterStore.dispatch(FilterActions.filterExplorerSaveCommunityClicked({saveButtonClicked: true}));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".community-save-form {\n  .description {\n    resize: none;\n  }\n}\n",
                    "styleUrl": "./community-save-drawer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "communitiesService",
                        "type": "CommunitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "NzMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "communitiesService",
                        "type": "CommunitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "NzMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<nz-drawer\n  [nzClosable]=\"true\"\n  [nzVisible]=\"isVisible\"\n  [nzPlacement]=\"'left'\"\n  nzTitle=\"Community\"\n  [nzFooter]=\"footerButtons\"\n  [nzWidth]=\"350\"\n  (nzOnClose)=\"close()\">\n  <ng-container *nzDrawerContent>\n    <form\n      nz-form\n      [formGroup]=\"saveCommunityForm\"\n      nzLayout=\"vertical\"\n      class=\"community-save-form\"\n      *ngIf=\"isVisible\"\n      >\n      <nz-form-item>\n        <nz-form-label\n         nzRequired\n         nzFor=\"name\"\n         >\n          Community Name\n        </nz-form-label>\n        <nz-form-control nzHasFeedback [nzErrorTip]=\"nameErrorMsg\">\n          <input nz-input formControlName=\"name\" placeholder=\"Community Name\"/>\n          <ng-template #nameErrorMsg let-control>\n            <ng-container\n              *ngIf=\"control.hasError('required')\">Community Name is required</ng-container>\n            <ng-container\n              *ngIf=\"control.hasError('minlength')\">MinLength\n              is 6</ng-container>\n          </ng-template>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label\n         nzFor=\"description\"\n         >\n          Description\n        </nz-form-label>\n        <nz-form-control>\n          <nz-textarea-count [nzMaxCharacterCount]=\"100\">\n            <textarea\n             class=\"description\"\n             [nzAutosize]=\"{ minRows: 1, maxRows: 3 }\"\n             formControlName=\"description\"\n             placeholder=\"A short description of this community\"\n             nzErrorTip=\"Description\"\n             nz-input></textarea>\n          </nz-textarea-count>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label\n         nzFor=\"notes\"\n         >\n          Notes\n        </nz-form-label>\n        <nz-form-control>\n          <textarea\n            formControlName=\"notes\"\n            placeholder=\"Notes about this community\"\n            [nzAutosize]=\"{ minRows: 6, maxRows: 8 }\"\n            nz-input>\n          </textarea>\n        </nz-form-control>\n      </nz-form-item>\n      <h3>Filters</h3>\n      <nz-form-item>\n        <nz-form-label\n         nzFor=\"criteriaFilter\"\n         >\n          Criteria\n        </nz-form-label>\n        <nz-form-control>\n          <nz-select\n            nzMode=\"multiple\"\n            nzPlaceHolder=\"No filters Applied\"\n            formControlName=\"criteriaFilters\"\n            nzDisabled\n            >\n            <nz-option *ngFor=\"let option of _criteriaFilters\"\n              [nzLabel]=\"configureCriteriaDisplayName(option)\"\n              [nzValue]=\"option\">\n            </nz-option>\n          </nz-select>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-label\n         nzFor=\"geoFilters\"\n         >\n          Geographies\n        </nz-form-label>\n        <nz-form-control>\n          <nz-select\n            nzMode=\"multiple\"\n            nzPlaceHolder=\"No filters Applied\"\n            formControlName=\"geoFilters\"\n            nzDisabled\n            >\n            <nz-option *ngFor=\"let option of _geoFilters\"\n              [nzLabel]=\"option.name\"\n              [nzValue]=\"option\">\n            </nz-option>\n          </nz-select>\n        </nz-form-control>\n      </nz-form-item>\n    </form>\n  </ng-container>\n  <ng-template #footerButtons>\n    <div nz-row nzJustify=\"space-between\">\n      <button nz-button nzType=\"link\"\n        [disabled]=\"this.saveProcessing\"\n        (click)=\"cancel($event)\"\n      >Cancel</button>\n      <div>\n        <button nz-button nzType=\"link\"\n          *ngIf=\"existingCommunity && existingCommunity.uuid\"\n          [nzLoading]=\"saveAsNewProcessing\"\n          [disabled]=\"!saveCommunityForm.valid || saveProcessing\"\n          (click)=\"save(true)\"\n        >Save As New</button>\n        <button nz-button nzType=\"primary\"\n          [nzLoading]=\"saveProcessing\"\n          [disabled]=\"!saveCommunityForm.valid || saveAsNewProcessing\"\n          (click)=\"saveOrUpdate()\"\n        >Save</button>\n      </div>\n    </div>\n  </ng-template>\n</nz-drawer>\n"
        },
        {
            "name": "CompareChartsComponent",
            "id": "component-CompareChartsComponent-fa5ecfe6a87712a8e8f465442e80941044600f1f487f8fe590d069265b03350a9ce9324a4e5a72d005e31690a9b8adb4cfc1ca2c7425121555ec7a4aaf4cb3c5",
            "file": "projects/explorer/src/app/shared/components/compare-charts/compare-charts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-compare-charts",
            "styleUrls": [
                "./compare-charts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./compare-charts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string[] | undefined",
                    "decorators": []
                },
                {
                    "name": "compareSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any | undefined",
                    "decorators": []
                },
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "mapSegment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any | undefined",
                    "decorators": []
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any[] | undefined",
                    "decorators": []
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any[] | undefined",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "any | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartOneColors",
                    "defaultValue": "[\n    '#01665e',\n    '#80cdc1',\n    '#e1ead7',\n    '#dfc27d',\n    '#bf812d',\n    'rgba(1, 102, 94, 0.3)',\n    'rgba(128, 205, 193, 0.3)',\n    'rgba(225, 234, 215, 0.3)',\n    'rgba(223, 194, 125, 0.3)',\n    'rgba(191, 130, 45, 0.3)',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Highcharts.Options | undefined",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "compareDropdownSelected",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "filters$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "highcharts",
                    "defaultValue": "Highcharts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateChart",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "usChartData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setChartOptions",
                    "args": [
                        {
                            "name": "series",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "barWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "categories",
                            "type": "string[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorArray",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stacking",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "maxValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dataLabels",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "barWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categories",
                            "type": "string[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorArray",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stacking",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataLabels",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortDataForCompare",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "location",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "location",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortDataForCompareNational",
                    "args": [
                        {
                            "name": "dataOne",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataOne",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortDataForComparePercentage",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "location",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "location",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { select, Store } from '@ngrx/store';\nimport { takeUntil } from 'rxjs/operators';\nimport * as Highcharts from 'highcharts';\n\nimport { filterList } from '../../stores/filter-store/explorer-filters.selectors';\nimport { FilterState } from '../../stores/filter-store/explorer-filters.reducer';\nimport { MapService } from '../../services/map.service';\nimport { ChartsService } from '../../services/charts.service';\nimport * as FilterActions from '../../stores/filter-store/explorer-filters.actions';\n\n@Component({\n  selector: 'exp-compare-charts',\n  templateUrl: './compare-charts.component.html',\n  styleUrls: ['./compare-charts.component.scss'],\n})\nexport class CompareChartsComponent implements OnInit, OnDestroy {\n  @Input() title: string | undefined;\n  @Input() categories: string[] | undefined;\n  @Input() series: any[] | undefined;\n  @Input() percentage: any[] | undefined;\n  @Input() location: string | undefined;\n  @Input() type: any | undefined;\n  @Input() mapSegment: any | undefined;\n  @Input() compareSelected: any | undefined;\n\n  highcharts: typeof Highcharts = Highcharts;\n  chartOptions: Highcharts.Options | undefined;\n  updateChart = false;\n  chartOneColors = [\n    '#01665e',\n    '#80cdc1',\n    '#e1ead7',\n    '#dfc27d',\n    '#bf812d',\n    'rgba(1, 102, 94, 0.3)',\n    'rgba(128, 205, 193, 0.3)',\n    'rgba(225, 234, 215, 0.3)',\n    'rgba(223, 194, 125, 0.3)',\n    'rgba(191, 130, 45, 0.3)',\n  ];\n  usChartData: any;\n  compareDropdownSelected = '';\n  filters$: Observable<any> | undefined;\n\n  private unsubscribe: Subject<void> = new Subject();\n\n  constructor(\n    private filterStore: Store<FilterState>,\n    private mapService: MapService,\n    private chartsService: ChartsService,\n  ) { }\n\n  ngOnInit(): void {\n    this.filters$ = this.filterStore.pipe(select(filterList));\n    this.filters$.pipe(takeUntil(this.unsubscribe)).subscribe(res => {\n      if (res.compareDropdown?.compareDropdown) {\n        this.compareDropdownSelected = res.compareDropdown.compareDropdown;\n      }\n      if (res.compareDropdown?.compareDropdown\n        && res.compareDropdown?.compareDropdown !== 'None'\n        && res.compareDropdown?.compareDropdown !== 'U.S. Nationwide') {\n        if (res.stateChart?.stateChart) {\n          this.usChartData = this.sortDataForCompareNational(this.chartsService.barChartData(res.stateChart?.stateChart.data), this.compareDropdownSelected);\n          if (this.series) {\n            this.sortDataForCompare(this.series, this.title, this.location);\n          }\n          if (this.percentage) {\n            this.sortDataForComparePercentage(this.percentage, this.title, this.location);\n          }\n          this.updateChart = true;\n        } else {\n          this.mapService.getAllChartData({state: this.mapSegment.state}, 'state')\n            .subscribe(res => {\n              if (res?.data.county[0]) {\n                const mapSelections: any = this.chartsService.selectionObjectConstruction(res.data.county[0]);\n                this.usChartData = this.sortDataForCompareNational(this.chartsService.barChartData(mapSelections), this.compareDropdownSelected);\n                this.filterStore.dispatch(FilterActions.stateChartsData({stateChart: {state: this.mapSegment, data: this.usChartData}}));\n                if (this.series) {\n                  this.sortDataForCompare(this.series, this.title, this.location);\n                }\n                if (this.percentage) {\n                  this.sortDataForComparePercentage(this.percentage, this.title, this.location);\n                }\n                this.updateChart = true;\n              }\n            });\n        }\n      } else if (res.compareDropdown?.compareDropdown && res.compareDropdown?.compareDropdown === 'U.S. Nationwide') {\n        this.usChartData = this.sortDataForCompareNational(res.usChart.usChart, 'National');\n        if (this.series) {\n          this.sortDataForCompare(this.series, this.title, this.location);\n        }\n        if (this.percentage) {\n          this.sortDataForComparePercentage(this.percentage, this.title, this.location);\n        }\n        this.updateChart = true;\n      }\n      this.updateChart = false;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n\n  sortDataForCompareNational(dataOne: any, name: string): any {\n    const tempArray = [];\n    for (const a of dataOne) {\n      if (a.totals) {\n        for (const b of a.percentage) {\n          const tempObject = {name: '', data: [], stack: '', title: a.title};\n          tempObject.name = b.name;\n          tempObject.data = b.data;\n          tempObject.stack = name;\n          tempArray.push(tempObject);\n        }\n      } else {\n        let total = 0;\n        const tempObject = {name, data: [], title: a.title};\n        for (const c of a.series) {\n          total = total + Number(c.data[0].y);\n        }\n        for (const b of a.series ) {\n          // @ts-ignore\n          tempObject.data.push(Number(((b.data[0].y / total) * 100).toFixed()));\n        }\n        tempArray.push(tempObject);\n      }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return tempArray;\n  }\n\n  sortDataForComparePercentage(data: any, title: string | undefined, location: string | undefined): void {\n    const tempArray = [];\n    if (!data[0].data[0].name) {\n      for (const a of data) {\n        const tempObject = {name: '', data: [], stack: '', title};\n        tempObject.name = a.name;\n        tempObject.data = a.data;\n        tempObject.stack = location || '';\n        tempArray.push(tempObject);\n      }\n      // Get the national chart values and push into array\n      for (const b of this.usChartData) {\n        if (b.title === title) {\n          tempArray.push(b);\n        }\n      }\n      this.chartOptions = this.setChartOptions(tempArray, 20, this.categories, this.chartOneColors, 'normal', 100);\n    }\n  }\n\n  sortDataForCompare(data: any, title: string | undefined, location: string | undefined): void {\n    const tempArray = [];\n    if (data[0].data[0].name) {\n      let total = 0;\n      const tempObject = {name: location, data: [], title};\n      for (const c of data) {\n        total = total + Number(c.data[0].y);\n      }\n      for (const a of data) {\n        // @ts-ignore\n        // tempObject.data.push(a.data[0].y);\n        tempObject.data.push(Number(((a.data[0].y / total) * 100).toFixed()));\n      }\n      tempArray.push(tempObject);\n      for (const b of this.usChartData) {\n        if (b.title === title) {\n          tempArray.push(b);\n        }\n      }\n      this.chartOptions = this.setChartOptions(tempArray, 20, this.categories, this.chartOneColors);\n    }\n\n  }\n\n  setChartOptions(series: any, barWidth: number, categories: string[] | undefined,\n                  colorArray: string[], stacking?: string | undefined,  maxValue?: number, dataLabels?: boolean): any {\n    let chartHeight = 350;\n    if (this.title === 'Gender' || this.title === 'Civic Score By Gender') {\n      chartHeight = 250;\n    }\n    return {\n      chart: {\n        type: 'column',\n        height: chartHeight,\n        width: 530,\n      },\n      title: {\n        text: this.title,\n        align: 'left',\n      },\n      subtitle: {\n        text: this.location + ' / ' + this.compareDropdownSelected,\n        align: 'left',\n        style: {\n          color: '#c2c2c2',\n          fontWeight: 'light',\n        },\n      },\n      colors: colorArray,\n      credits: {\n        enabled: false,\n      },\n      tooltip: {\n        useHTML: true,\n        formatter(): any {\n          // @ts-ignore\n          const formattedNumber = this.y.toLocaleString();\n          // @ts-ignore\n          if (this.point.series.userOptions.stack) {\n            // @ts-ignore\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            return `<div><p>${this.point.series.userOptions.stack}<br>${this.point.series.name}</p><span>${this.key}: ${formattedNumber}%</span></div>`;\n          } else {\n            // @ts-ignore\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            return `<div><p>${this.point.series.name}</p><span>${this.key}: ${formattedNumber}%</span></div>`;\n          }\n        },\n      },\n      xAxis: {\n        categories,\n      },\n      yAxis: {\n        max: maxValue,\n        min: 0,\n        title: {\n          text: '',\n        },\n        labels: {\n          format: '{text}%',\n        },\n      },\n      legend: {\n        verticalAlign: 'top',\n        width: '100%',\n        itemStyle: {\n          fontSize: '10px',\n        },\n        // maxHeight: 40,\n        // labelFormatter(): any {\n        //   // @ts-ignore\n        //   // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        //   return this.name;\n        // },\n      },\n      plotOptions: {\n        series: {\n          states: {\n            inactive: {\n              opacity: 0.75,\n            },\n            hover: {\n              halo: {\n                opacity: 0.95,\n              },\n            },\n          },\n          stacking,\n          dataLabels: {\n            enabled: dataLabels,\n            format: '{y}%',\n          },\n          pointPadding: 0.1,\n          groupPadding: 0.2,\n        },\n      },\n      series,\n    };\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".horizontal-chart-wrapper{\n  background-color: white;\n  border-radius: 10px;\n  padding: 10px;\n}\n",
                    "styleUrl": "./compare-charts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartsService",
                        "type": "ChartsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartsService",
                        "type": "ChartsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"horizontal-chart-wrapper\">\n    <highcharts-chart\n            *ngIf=\"chartOptions\"\n            [Highcharts]=\"highcharts\"\n            [options]=\"chartOptions\"\n            [(update)]=\"updateChart\"\n    >\n    </highcharts-chart>\n</div>\n"
        },
        {
            "name": "CreateOrganizationComponent",
            "id": "component-CreateOrganizationComponent-df9d6b313f152b8513221c2e51d923eda56ab710e8b56bd16c104cc7f5384741488f0f17e25119a41359e5c27d532a0269ed469fdffac9990da8acf55f886d7f",
            "file": "projects/admin/src/app/pages/organization/create-organization/create-organization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-create-organization",
            "styleUrls": [
                "./create-organization.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./create-organization.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createOrgForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "orgTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[][]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "subTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[][]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "createOrg",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls the create organization mutation with form information\n\n",
                    "description": "<p>Calls the create organization mutation with form information</p>\n",
                    "jsdoctags": []
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { CreateOrganizationGQL, OrganizationEnum, SubscriptionEnum } from '../../../shared/services/graphql/graphql.service';\n\n@Component({\n  selector: 'org-create-organization',\n  templateUrl: './create-organization.component.html',\n  styleUrls: ['./create-organization.component.less'],\n})\nexport class CreateOrganizationComponent {\n  createOrgForm: FormGroup;\n  subTypes: string[][];\n  orgTypes: string[][];\n\n  constructor(private fb: FormBuilder, private createOrgService: CreateOrganizationGQL, private router: Router) {\n    this.createOrgForm = this.fb.group({\n      subscriptionType: [null, [Validators.required]],\n      orgName: [null, [Validators.required]],\n      orgType: [null, [Validators.required]],\n      adminEmail: [null, [Validators.required, Validators.email]],\n    });\n    this.subTypes = Object.entries(SubscriptionEnum);\n    this.orgTypes = Object.entries(OrganizationEnum);\n  }\n\n  /**\n   * Calls the create organization mutation with form information\n   *\n   * @memberof CreateOrganizationComponent\n   */\n  createOrg(): void {\n\n    if (this.createOrgForm.valid) {\n      this.createOrgService.mutate({\n        input: {\n          name: this.createOrgForm.get('orgName')?.value as string,\n          adminEmail: this.createOrgForm.get('adminEmail')?.value as string,\n          subscriptionType: this.createOrgForm.get('subscriptionType')?.value,\n          organizationType: this.createOrgForm.get('orgType')?.value,\n          organizationUuid: localStorage.getItem('selected_org'),\n        },\n      }).subscribe(() => {\n        this.router.navigate(['/home']);\n      });\n    } else {\n      Object.values(this.createOrgForm.controls).forEach(control => {\n        if (control.invalid) {\n          control.markAsDirty();\n          control.updateValueAndValidity({ onlySelf: true });\n        }\n      });\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n}\n\n.create-org-btn {\n  width: 100%;\n}\n\n.validation-error {\n  background-color: #FFE6E6;\n  color: #000;\n  max-width: 305px;\n}\n\n[nz-form] {\n  min-width: 400px;\n}",
                    "styleUrl": "./create-organization.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "createOrgService",
                        "type": "CreateOrganizationGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createOrgService",
                        "type": "CreateOrganizationGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>Create an Organization</h1>\n<form nz-form [formGroup]=\"createOrgForm\" (ngSubmit)=\"createOrg()\">\n  <nz-form-item>\n    <nz-form-control nzErrorTip=\"Please select a Subscription.\">\n      <nz-select nzRequired formControlName=\"subscriptionType\" nzPlaceHolder=\"Select Subscription\">\n        <nz-option *ngFor=\"let sub of subTypes\" [nzValue]=\"sub[1]\" [nzLabel]=\"sub[0]\"></nz-option>\n      </nz-select>\n    </nz-form-control>\n  </nz-form-item>\n  <nz-form-item>\n    <nz-form-control nzErrorTip=\"Please enter an Organization Name.\">\n      <input nz-input nzRequired formControlName=\"orgName\" type=\"text\" placeholder=\"Organization Name\" />\n    </nz-form-control>\n  </nz-form-item>\n  <nz-form-item>\n    <nz-form-control nzErrorTip=\"Please select an Organization Type.\">\n      <nz-select nzRequired formControlName=\"orgType\" nzPlaceHolder=\"Select Organization Type\">\n        <nz-option *ngFor=\"let org of orgTypes\" [nzValue]=\"org[1]\" [nzLabel]=\"org[0]\"></nz-option>\n      </nz-select>\n    </nz-form-control>\n  </nz-form-item>\n  <nz-form-item>\n    <nz-form-control [nzSm]=\"0\" [nzXs]=\"0\" nzErrorTip=\"Please enter a valid E-mail address.\">\n      <input nz-input nzRequired formControlName=\"adminEmail\" id=\"email\" type=\"email\"\n        placeholder=\"Administrator's Email\" />\n    </nz-form-control>\n  </nz-form-item>\n  <nz-form-item>\n    <nz-form-control>\n      <button nz-button nzType=\"primary\" class=\"create-org-btn\">Create</button>\n    </nz-form-control>\n  </nz-form-item>\n</form>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-82fbccf88481e5ae292121c82e7ac8db88a52f7641cd4b354a84c3eebd02df9b74af2a5567f311b1054b7623045e9d8b5d912afa311482b044ffceb3b9dc2f17",
            "file": "projects/explorer/src/app/dashboard/dashboard.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appliedFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "barCharts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "callInProgress",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "communityUpdateApplied",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "compareBreadCrumbs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "compareSelectedArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "compareSelectedDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "compareSelectedValue",
                    "defaultValue": "'None'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "disableForSearch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "displaySidepanel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "filters$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "filtersApplied",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "filterSelectedButNotApplied",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "filtersHaveBeenApplied",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "households",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "mapSelectionDropdown",
                    "defaultValue": "'States'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "mapSelections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "nationalSelectedCounty",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "people",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "rotationCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "searchBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SearchBoxComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SearchBoxComponent"
                        }
                    ]
                },
                {
                    "name": "selectedChartFilters",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "selectInMap",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeRegion[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "selectionChangeRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "setNationalValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "setNewMapWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "sizeCharts",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "state",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "stringifiedChartFilters",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateBarChart",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "zoomInMap",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MapSelection",
                    "optional": true,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "addChartData",
                    "args": [
                        {
                            "name": "selection",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applyFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 346,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyFiltersButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "callForFilterChange",
                    "args": [
                        {
                            "name": "m",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "communityLoaded",
                    "args": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compareHasChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 384,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filtersChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapReset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapSelectionChange",
                    "args": [
                        {
                            "name": "selections",
                            "type": "MapSelection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selections",
                            "type": "MapSelection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "regionsSelected",
                    "args": [
                        {
                            "name": "selections",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selections",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetForNationalCounties",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchChange",
                    "args": [
                        {
                            "name": "searchResult",
                            "type": "MapSelection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "searchResult",
                            "type": "MapSelection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCompareSelectedArray",
                    "args": [
                        {
                            "name": "selection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 357,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNational",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSidebar",
                    "args": [
                        {
                            "name": "opened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "opened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { takeUntil } from 'rxjs/operators';\nimport { Observable, Subscription, Subject } from 'rxjs';\nimport { AuthService } from '@auth0/auth0-angular';\n\nimport { MapSelection } from '../shared/components/us-map/map-selection.model';\nimport { SearchBoxComponent } from '../shared/components/search-box/search-box.component';\nimport { MapService } from '../shared/services/map.service';\nimport { ChartsService } from '../shared/services/charts.service';\nimport { MixpanelService } from '../shared/services/mixpanel.service';\nimport { TreeRegion } from '../shared/components/geo-filters-drawer/tree-region.model';\nimport { filterList } from '../shared/stores/filter-store/explorer-filters.selectors';\nimport { FilterState } from '../shared/stores/filter-store/explorer-filters.reducer';\nimport * as FilterActions from '../shared/stores/filter-store/explorer-filters.actions';\n\n@Component({\n  selector: 'exp-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n\n  @ViewChild(SearchBoxComponent) searchBox: SearchBoxComponent | undefined;\n\n  households?: number;\n  people?: number;\n  name?: string;\n  score?: number;\n  state = '';\n  updateBarChart = false;\n  barCharts: any = [];\n  zoomInMap?: MapSelection = undefined;\n  setNationalValues: any;\n  selectedChartFilters: any = null;\n  stringifiedChartFilters: string | null = null;\n  mapSelections: any;\n  selectionChangeRequest: Subscription | undefined;\n  callInProgress = false;\n  rotationCount = 0;\n  visible = false;\n  displaySidepanel = false;\n  selectInMap: TreeRegion[] = [];\n  setNewMapWidth = 0;\n  sizeCharts = true;\n  mapSelectionDropdown = 'States';\n  disableForSearch = false;\n  nationalSelectedCounty: string | undefined = '';\n  filterSelectedButNotApplied = false;\n  filtersHaveBeenApplied = false;\n  communityUpdateApplied = false;\n  compareSelectedValue = 'None';\n  compareSelectedDisabled = true;\n  compareSelectedArray: string[] = [];\n  compareBreadCrumbs: string[] = [];\n  filtersApplied: any;\n  filters$: Observable<any> | undefined;\n  appliedFilters: any;\n\n  private unsubscribe: Subject<void> = new Subject();\n\n  constructor(\n    public auth: AuthService,\n    private mapService: MapService,\n    private chartsService: ChartsService,\n    private mixpanel: MixpanelService,\n    private filterStore: Store<FilterState>,\n  ) { }\n\n  ngOnInit(): void {\n    this.filters$ = this.filterStore.pipe(select(filterList));\n    this.filters$.pipe(takeUntil(this.unsubscribe)).subscribe(res => {\n      this.filterSelectedButNotApplied = res?.selected?.selected;\n      this.filtersApplied = res.filters;\n      if (res?.applyButtonClicked?.applyButtonClicked) {\n        this.applyFiltersButtonClicked();\n      }\n      if (res?.communityUpdated?.communityUpdated) {\n        this.communityUpdateApplied = true;\n        setTimeout(() => {\n          this.filterStore.dispatch(FilterActions.filterExplorerCommunityUpdated({communityUpdated: false}));\n          this.communityUpdateApplied = false;\n        }, 5000);\n      }\n      if (res?.communitySelected?.communitySelected) {\n        setTimeout(() => {\n          this.filterStore.dispatch(FilterActions.savedCommunitySelected({communitySelected: false}));\n          this.filterSelectedButNotApplied = false;\n        }, 100);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n\n  communityLoaded(community: any): void {\n    if (community.geoFilters?.length) {\n      community.geoFilters[0].communityName = community.name;\n      // community.geoFilters[0].name = community.name;\n      this.regionsSelected(community.geoFilters);\n    } else {\n      if (community.selections && community.selections.segment) {\n        this.regionsSelected([{\n          key: community.selections.id,\n          type: community.selections.level,\n          name: community.selections.name,\n          level: (community.selections.level === 'state' ? 0 : 1),\n          // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n          parentCode: 'US' + (community.selections.segment?.state ? '-' + community.selections.segment?.state : ''),\n          communityName: community.name,\n        }]);\n      } else {\n        // Whole US map (no geographies applied)\n        // this.usstatesmap?.resetMap();\n        this.mapReset();\n      }\n    }\n    // Automatically select filters\n    this.appliedFilters = community.criteriaFilters;\n\n    // Update charts\n    this.filtersChanged(community.criteriaFilters);\n  }\n\n  toggleSidebar(opened: boolean): void {\n    this.sizeCharts = !this.sizeCharts;\n    this.displaySidepanel = opened;\n    setTimeout(() => { this.setNewMapWidth = opened ? 450 : 0; }, 100);\n  }\n\n  searchChange(searchResult?: MapSelection): void {\n    this.disableForSearch = true;\n    let countySelection = {};\n    if (searchResult?.category === 'state') {\n      countySelection = {\n        id: searchResult?.id,\n        people: 0,\n        name: searchResult?.meta.stateName,\n        level: 0,\n        segment: [{state: 'AL', county: '005'}],\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        key: `US-${searchResult?.id}`,\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        parentCode: `US-${searchResult?.id}`,\n        search: true,\n      };\n    } else if (searchResult?.category === 'postcode') {\n      this.mapSelectionDropdown = 'Zipcodes';\n      countySelection = {\n        id: searchResult?.id,\n        people: 0,\n        name: searchResult?.meta.state,\n        level: 2,\n        search: true,\n      };\n      // @ts-ignore\n      // eslint-disable-next-line max-len\n      this.mapSelectionChange({level: 'postcode', segment: {state: searchResult?.meta.state, postcode: searchResult?.meta.label}, people: 1, name: searchResult?.id});\n    } else {\n      this.mapSelectionDropdown = 'Counties';\n      countySelection = {\n        id: searchResult?.id,\n        people: 0,\n        name: searchResult?.meta.label,\n        level: 1,\n        segment: [{state: 'AL', county: '005'}],\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        key: `US-${searchResult?.meta.state}-${searchResult?.meta.id}`,\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        parentCode: `US-${searchResult?.meta.state}`,\n        search: true,\n      };\n    }\n    this.regionsSelected([countySelection]);\n  }\n\n  mapReset(): void {\n    this.searchBox?.cleanSearch();\n    this.mapSelectionChange(this.setNationalValues);\n  }\n\n  regionsSelected(selections: any[]): void {\n    if (selections[0].type === 'county') {\n      this.disableForSearch = true;\n      this.mapSelectionDropdown = 'Counties';\n    } else if (selections[0].type === 'postcode') {\n      this.disableForSearch = true;\n      this.mapSelectionDropdown = 'Zipcodes';\n    } else if (selections[0].type === 'congress') {\n      this.disableForSearch = true;\n      this.mapSelectionDropdown = 'Congressional Districts';\n    }\n    this.selectInMap = Object.assign([], selections);\n  }\n\n  mapSelectionChange(selections: MapSelection): void {\n    this.setCompareSelectedArray(selections);\n    if (selections && selections.level === 'state') {\n      this.mapSelectionDropdown = 'Counties';\n    } else if (selections && selections.id === 'US' && this.mapSelectionDropdown !== 'National Counties') {\n      this.mapSelectionDropdown = 'States';\n    }\n    if (this.callInProgress) {\n      this.selectionChangeRequest?.unsubscribe();\n    } else {\n      this.callInProgress = true;\n    }\n    this.barCharts = [];\n    // This code is to make the old national county map selections work\n    // Start\n    if (selections && selections.mapType === 'nationalCountyMap') {\n      if (this.nationalSelectedCounty === selections.id) {\n        // Charts go back to national\n        selections.id = 'US';\n        this.nationalSelectedCounty = '';\n      } else {\n        // Charts go to new county\n        this.nationalSelectedCounty = selections.id;\n        const splitId = selections.id?.split('-');\n        // @ts-ignore\n        selections.segment = { state: splitId[1], county: splitId[2] };\n        selections.level = 'county';\n      }\n    }\n    // End\n    if (selections && selections.people && selections.id !== 'US' && selections.name !== 'US') {\n      this.selectionChangeRequest = this.mapService.getAllChartData(selections.segment, selections.level, this.stringifiedChartFilters)\n        .subscribe(res => {\n          this.callInProgress = false;\n          if (res?.data.county[0]) {\n            this.mapSelections = this.chartsService.selectionObjectConstruction(res?.data.county[0]);\n          }\n          this.addChartData(this.mapSelections);\n          if (selections.level === 'state') {\n            this.filterStore.dispatch(FilterActions.stateChartsData({stateChart: {state: this.mapSelections.segment, data: this.mapSelections}}));\n          }\n        });\n    } else {\n      this.disableForSearch = false;\n      this.mapSelections = {};\n      this.selectionChangeRequest = this.mapService.getAllChartDataNational(this.stringifiedChartFilters).subscribe(res => {\n        this.callInProgress = false;\n        if (res?.data.county[0]) {\n          this.mapSelections = this.chartsService.selectionObjectConstruction(res?.data.county[0]);\n          this.mapSelections.name = res?.data.county[0].segment;\n        }\n        this.addChartData(this.mapSelections);\n      });\n    }\n  }\n\n  setNational($event: any): void {\n    this.setNationalValues = $event[0];\n    this.mapSelectionChange(this.setNationalValues);\n  }\n  addChartData(selection: {\n    households?: any; people?: any; name?: any; score?: any; age?: any; degree?: any;\n    income?: any; marital?: any; gender?: any; category?: any; valueUpdated?: any; id?: any; state?: any;\n  }): void {\n    this.households = selection?.households;\n    this.people = selection?.people;\n    if (selection?.state) {\n      this.state = selection.state;\n    } else {\n      this.state = '';\n    }\n    this.name = selection?.name;\n    if (selection?.valueUpdated) {\n      this.score = Math.round(((Number(selection?.score) + Number.EPSILON) * 100) / 10);\n    } else {\n      this.score = Math.round((Number(selection?.score) + Number.EPSILON) * 100);\n    }\n    if (selection !== undefined) {\n      this.barCharts = this.chartsService.barChartData(selection);\n      // using below for compare charts\n      if (selection.name === 'US') {\n        this.filterStore.dispatch(FilterActions.usChartsData({usChart: this.barCharts}));\n      }\n    }\n    this.updateBarChart = true;\n  }\n\n  filtersChanged(event: any): void {\n    this.stringifiedChartFilters = null;\n    this.selectedChartFilters = {\n      age: [],\n      gender: [],\n      marital: [],\n      hh_income: [],\n      degree: [],\n      party: [],\n      civic_score_general_category: [],\n    };\n    for (const filterValues of event) {\n      if (filterValues.value.property === 'age') {\n        this.selectedChartFilters.age.push(filterValues.value.selected);\n      } else if (filterValues.value.property === 'gender') {\n        this.selectedChartFilters.gender.push(filterValues.value.selected);\n      } else if (filterValues.value.property === 'marital') {\n        this.selectedChartFilters.marital.push(filterValues.value.selected);\n      } else if (filterValues.value.property === 'hh_income') {\n        this.selectedChartFilters.hh_income.push(filterValues.value.selected);\n      } else if (filterValues.value.property === 'education') {\n        this.selectedChartFilters.degree.push(filterValues.value.selected);\n      } else if (filterValues.value.property === 'voted') {\n        this.selectedChartFilters[filterValues.value.selected] = [1];\n      } else if (filterValues.value.property === 'donor') {\n        this.selectedChartFilters[filterValues.value.selected] = [1];\n      } else if (filterValues.value.property === 'party') {\n        this.selectedChartFilters.party.push(filterValues.value.selected);\n      } else if (filterValues.value.property === 'civic_score') {\n        this.selectedChartFilters.civic_score_general_category.push(filterValues.value.selected);\n      }\n      this.stringifiedChartFilters = JSON.stringify(this.selectedChartFilters);\n      this.filterStore.dispatch(FilterActions.filterStringifiedFilters({stringifiedFilters: this.stringifiedChartFilters}));\n    }\n    this.mixpanel.setPeople({filters: this.selectedChartFilters});\n    this.callForFilterChange(this.mapSelections);\n  }\n\n  callForFilterChange(m: any): void {\n    ++this.rotationCount;\n    if (!this.callInProgress) {\n      this.mapSelectionChange(m);\n      this.rotationCount = 0;\n    } else {\n      const abortController = new AbortController();\n      abortController.abort();\n      // @ts-ignore\n      this.selectionChangeRequest.unsubscribe();\n      this.mapSelectionChange(m);\n    }\n  }\n\n  resetForNationalCounties(e: any): void {\n    if (e === 'National Counties'){\n      this.selectInMap = [];\n      this.mapReset();\n    }\n  }\n\n  applyFilters(): void {\n    this.filterStore.dispatch(FilterActions.filterExplorerApplyFilters({applyFilters: true}));\n  }\n\n  applyFiltersButtonClicked(): void {\n    this.filtersHaveBeenApplied = true;\n    setTimeout(() => {\n      this.filtersHaveBeenApplied = false;\n    }, 5000);\n  }\n\n  setCompareSelectedArray(selection: any): void {\n    if (this.compareBreadCrumbs?.length < 3) {\n      if (selection.id !== 'Custom Community') {\n        this.compareBreadCrumbs.push(selection.name);\n      }\n    }\n    if (selection.name === 'US') {\n      this.compareBreadCrumbs = ['U.S. Nationwide'];\n      this.compareSelectedArray = ['U.S. Nationwide'];\n      this.compareSelectedDisabled = this.filtersApplied?.length > 0? false : true;\n      this.compareSelectedValue = 'None';\n    } else if (this.compareBreadCrumbs?.length === 2){\n      this.compareSelectedDisabled = false;\n    } else if (this.compareBreadCrumbs?.length === 3 && this.compareSelectedArray.length < 3) {\n      if (this.compareBreadCrumbs[1]) {\n        this.compareSelectedArray.push(this.compareBreadCrumbs[1]);\n      }\n      this.compareSelectedDisabled = false;\n    }\n    if (this.filtersApplied?.length > 0) {\n      this.compareSelectedArray = JSON.parse(JSON.stringify(this.compareBreadCrumbs));\n      this.compareSelectedDisabled = false;\n    } else if (this.filtersApplied?.length === 0) {\n      this.compareSelectedArray.splice(2, 1);\n    }\n  }\n\n  compareHasChanged(): void {\n    this.filterStore.dispatch(FilterActions.compareDropdown({compareDropdown: this.compareSelectedValue}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/_colors';\n\n:host {\n  width: 100%;\n}\n\n#dashboard {\n  position: relative;\n  padding: 20px;\n  transition: 0.5s;\n  width: 100%;\n\n  &.expanded {\n    margin-left: 450px;\n  }\n}\n\n.map-wrapper {\n  position: relative;\n  top: 0px;\n}\n\n.set-chart-width {\n  grid-template-columns: 50% 50%;\n}\n\n.chart-wrapper {\n  display: grid;\n  grid-gap: 10px;\n  padding-right: 10px;\n  padding-bottom: 20px;\n  //padding: 20px;\n  //background-color: white;\n  //margin: 0 20px;\n  border-radius: 10px;\n  //box-shadow: 0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%), 0px 2px 4px -1px rgb(0 0 0 / 20%);\n}\n\n.chart-spinner {\n  margin: 50px 0 150px 0;\n  text-align: center;\n}\n.map-selection {\n  text-align: right;\n\n  .map-select{\n    text-align: center;\n    min-width: 150px;\n  }\n}\n.search-box-wrapper {\n  max-width: 80%;\n  //margin-bottom: 20px;\n}\n.map-selection {\n  p {\n    margin-bottom: 0;\n  }\n}\n.search-header {\n  background-color: rgb(0 0 0 / 50%);\n  padding: 10px 20px;\n}\n.alert-banners-wrapper {\n  position: fixed;\n  bottom: 20px;\n  margin-left: 36%;\n  width: 395px;\n  z-index: 99;\n\n  .ant-tag {\n    width: 395px;\n    height: 40px;\n    padding: 9px;\n  }\n\n  .clickable-link {\n    color: #1890FF;\n    text-decoration: underline;\n    float: right;\n    cursor: pointer;\n  }\n}\n.compare-selected {\n  min-width: 160px;\n}\n.compare-dropdown-wrapper {\n  margin-bottom: 10px;\n}\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartsService",
                        "type": "ChartsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartsService",
                        "type": "ChartsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"geo-filters-drawer-wrapper\">\n  <exp-geo-filters-drawer\n    (toggleSidebar)=\"toggleSidebar($event)\"\n    (regionsSelected)=\"regionsSelected($event)\"\n    [remoteOpenPanel]=\"displaySidepanel\"\n    #geofiltersdrawer\n  ></exp-geo-filters-drawer>\n</div>\n\n<div class=\"search-header\" nz-row>\n  <div class=\"search-box-wrapper\" nz-col nzSpan=\"20\">\n    <exp-search-box (searchChange)=\"searchChange($event)\"> </exp-search-box>\n  </div>\n  <div nz-col nzSpan=\"4\">\n    <exp-my-communities-drawer\n      (communityLoaded)=\"communityLoaded($event)\"\n    ></exp-my-communities-drawer>\n  </div>\n</div>\n<div class=\"selection-summary-wrapper\">\n  <exp-selection-summary\n    [households]=\"households || 118852000\"\n    [name]=\"name || 'United States of America'\"\n    [score]=\"score || 50\"\n    [people]=\"people || 207420000\"\n    [state]=\"state\"\n    [mapSelections]=\"mapSelections\"\n    (filterChange)=\"filtersChanged($event)\"\n    (toggleGeoFilter)=\"toggleSidebar(!displaySidepanel)\"\n    [appliedFilters]=\"appliedFilters\"\n  > </exp-selection-summary>\n</div>\n<div class=\"container\">\n  <div id=\"dashboard\" [ngClass]=\"{'expanded': displaySidepanel }\">\n    <div *ngIf=\"mapSelectionDropdown === 'States' || mapSelectionDropdown === 'National Counties'\" class=\"map-selection\">\n      <nz-select class=\"map-select\" [(ngModel)]=\"mapSelectionDropdown\" [nzDropdownClassName]=\"'map-layer-dropdown'\" (ngModelChange)=\"resetForNationalCounties($event)\">\n        <nz-option nzValue=\"States\" nzLabel=\"States\"></nz-option>\n        <nz-option nzValue=\"National Counties\" nzLabel=\"Counties\"></nz-option>\n        <nz-option nzValue=\"National Congressional Districts\" nzLabel=\"Congressional Districts\" nzDisabled></nz-option>\n        <nz-option nzValue=\"National Zipcodes\" nzLabel=\"Zipcodes\" nzDisabled></nz-option>\n      </nz-select>\n    </div>\n    <div *ngIf=\"mapSelectionDropdown === 'Counties' || mapSelectionDropdown === 'Congressional Districts' || mapSelectionDropdown === 'Zipcodes'\" class=\"map-selection\" >\n      <nz-select class=\"map-select\" [(ngModel)]=\"mapSelectionDropdown\" [nzDropdownClassName]=\"'map-layer-dropdown'\" [nzDisabled]=\"disableForSearch\">\n        <nz-option nzValue=\"Counties\" nzLabel=\"Counties\"></nz-option>\n        <nz-option nzValue=\"Congressional Districts\" nzLabel=\"Congressional Districts\"></nz-option>\n        <nz-option nzValue=\"Zipcodes\" nzLabel=\"Zipcodes\"></nz-option>\n      </nz-select>\n    </div>\n    <div class=\"map-wrapper\">\n      <exp-us-map *ngIf=\"mapSelectionDropdown === 'National Counties'\" (changeSelection)=\"mapSelectionChange($event)\" (mapReset)=\"mapReset()\" [zoomIn]=\"zoomInMap\" (national)=\"setNational($event)\">\n      </exp-us-map>\n      <exp-us-map-states\n        *ngIf=\"mapSelectionDropdown !== 'National Counties'\"\n        (changeSelection)=\"mapSelectionChange($event)\"\n        [selectedRegions]=\"selectInMap\"\n        [updateMapWidth]=\"setNewMapWidth\"\n        [updateMapSelection]=\"mapSelectionDropdown\"\n        [sidepanel]=\"geofiltersdrawer\"\n        #usstatesmap\n      ></exp-us-map-states>\n<!--        <exp-us-map-congressional-districts  *ngIf=\"mapButton === 'States with Congressional Districts'\" (changeSelection)=\"mapSelectionChange($event)\"></exp-us-map-congressional-districts>-->\n    </div>\n<!--      <div class=\"search-box-wrapper\">-->\n<!--        <exp-search-box (searchChange)=\"searchChange($event)\"> </exp-search-box>-->\n<!--      </div>-->\n\n      <div class=\"compare-dropdown-wrapper\" *ngIf=\"barCharts.length > 0\">\n        <span>Compare {{name}}<span *ngIf=\"state !== ''\">, {{state}}</span> to</span> &nbsp;\n        <nz-select class=\"compare-selected\" [(ngModel)]=\"compareSelectedValue\" (ngModelChange)=\"compareHasChanged()\" [disabled]=\"compareSelectedDisabled\">\n          <nz-option nzLabel=\"None\" nzValue=\"None\"></nz-option>\n          <nz-option *ngFor=\"let selection of compareSelectedArray\" [nzLabel]=\"selection\" [nzValue]=\"selection\"></nz-option>\n        </nz-select>\n      </div>\n\n    <div *ngIf=\"barCharts.length > 0 && compareSelectedValue === 'None'\" class=\"chart-wrapper\" [ngClass]=\"{'set-chart-width': sizeCharts}\">\n      <div *ngFor=\"let bar of barCharts\">\n        <exp-horizontal-bar-chart *ngIf=\"barCharts.length > 0\" [title]=\"bar['title']\" [categories]=\"bar['categories']\"\n          [series]=\"bar['series']\" [percentage]=\"bar['percentage']\" [type]=\"bar.type\" [location]=\"name\"></exp-horizontal-bar-chart>\n      </div>\n    </div>\n    <div *ngIf=\"barCharts.length == 0\" class=\"chart-spinner\">\n    <!--  <exp-loading-spinner [title]=\"'Charts Loading'\"></exp-loading-spinner>-->\n      <nz-spin nzSimple [nzSize]=\"'large'\"></nz-spin>\n      Charts Loading...\n    </div>\n      <div *ngIf=\"barCharts.length > 0 && compareSelectedValue !== 'None'\" class=\"chart-wrapper\" [ngClass]=\"{'set-chart-width': sizeCharts}\">\n          <div *ngFor=\"let bar of barCharts\">\n              <exp-compare-charts *ngIf=\"barCharts.length > 0\" [title]=\"bar['title']\" [categories]=\"bar['categories']\"\n                [series]=\"bar['series']\" [percentage]=\"bar['percentage']\" [type]=\"bar.type\" [location]=\"name\" [mapSegment]=\"mapSelections.segment\"\n                [compareSelected]=\"compareSelectedValue\">\n              </exp-compare-charts>\n          </div>\n      </div>\n  </div>\n</div>\n<!--TODO need to be wired-->\n<div class=\"alert-banners-wrapper\">\n    <nz-tag *ngIf=\"communityUpdateApplied\" nzColor=\"success\">\n        <i nz-icon nzType=\"check-circle\"></i>\n        <span>Community Updated <span class=\"clickable-link\">View in My Communities</span></span>\n    </nz-tag>\n    <nz-tag *ngIf=\"filtersHaveBeenApplied\" nzColor=\"success\">\n        <i nz-icon nzType=\"check-circle\"></i>\n        <span>Filters applied</span>\n    </nz-tag>\n    <nz-tag *ngIf=\"filterSelectedButNotApplied\" nzColor=\"processing\">\n        <i nz-icon nzType=\"info-circle\" nzTheme=\"outline\"></i>\n        <span>New filters added. <span class=\"clickable-link\" (click)=\"applyFilters()\">Apply Changes</span></span>\n    </nz-tag>\n</div>\n"
        },
        {
            "name": "FaqComponent",
            "id": "component-FaqComponent-feabd9835db7a1811d0fb4f2f178a80f662e6c9eb4cda960950044e6dce3a500520fba4f7f46fbf57ed590088acfa06694f830eb138af67026cd077f7fe8bfe9",
            "file": "projects/explorer/src/app/faq/faq.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-faq",
            "styleUrls": [
                "./faq.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./faq.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'exp-faq',\n  templateUrl: './faq.component.html',\n  styleUrls: ['./faq.component.scss']\n})\nexport class FaqComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".faq-header {\n  margin: 0 40px;\n  font-size: 50px;\n}\n.faq-wrapper {\n  display: grid;\n  grid-template-columns: 50% 50%;\n  grid-gap: 10px;\n  padding-right: 10px;\n  margin: 40px 20px;\n  border-radius: 10px;\n}\n.faq {\n  margin: 10px 20px;\n  font-weight: lighter;\n}\n\n",
                    "styleUrl": "./faq.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"faq-header\">Frequently Asked Questions</h1>\n<div class=\"faq-wrapper\" style=\"width: 100%\">\n    <div class=\"faq\">\n        <h4>Question: What is the Civic Explorer?</h4>\n        Answer: The Civic Explorer is a product that allows you to gain insight into communities’ demographic breakdowns and levels of civic engagement. With the Civic Explorer, you can define and compare various communities using various geographic, demographic, and civic engagement metrics  – leveraging those insights to better plan programs and allocate resources.\n    </div>\n    <div class=\"faq\">\n        <h4>Question: What’s the Civic Score? How is it calculated?</h4>\n        Answer: The Civic Score is an individual-level index that measures each individuals’ level of civic engagement. It’s composed of a diverse range of civic behaviors, including those that we can directly observe (like voting or donating) and those that we model based on broader contextual inference (like volunteering at a soup kitchen or contacting an elected official). When we roll this score up to the community-level, we can see how a given community compares to the national average or other communities in terms of how engaged they are in civic life.\n    </div>\n    <div class=\"faq\">\n        <h4>Question: How can I use the Civic Score?</h4>\n        Answer: The Civic Score is a powerful starting off point for program planning. Rather than focusing on a single dimension of civic behavior like voting, it lets you take a broader view and ideate on which communities are ahead of the curve and how your organization could get more involved to help drive increased civic engagement.\n    </div>\n    <div class=\"faq\">\n        <h4>Question: Why don’t the numbers of individuals in Civic Explorer match the total number of individuals in the country? </h4>\n        Answer: There are a few main reasons that the numbers you see may not match numbers you might see elsewhere:\n        <ol>\n        <li>Our data currently represents Americans aged 18+ who have registered to vote.</li>\n        <li>Availability about people and communities varies widely based on vote history, geography, and personal history. Data coverage is a work in progress, and we’re continuously working to make our data more representative.</li>\n        <li>People are always moving, and the address that we have associated with them may not be the same address from which they responded to the census. We are continuously refining our systems to incorporate change-of-address, voter registration, and geographic boundary estimation data to increase accuracy and refresh rate.</li>\n        </ol>\n    </div>\n    <div class=\"faq\">\n        <h4>Question: Where does this data come from?</h4>\n        Answer: The Civic Explorer leverages a range of observed and modeled data on individuals’ characteristics and behaviors, each of which are kept updated and often range back to 2010:\n        <ul>\n            <li>Individuals' and households' characteristics (demographics, vote history, etc.) derived from:\n                <ul>\n                    <li>Voter file data</li>\n                    <li>Commercial data</li>\n                    <li>Census and ACS data</li>\n                </ul>\n            </li>\n            <li>Individual-level survey data, leveraging Helm's phone, online panel, and digital/RDE surveys</li>\n            <li>Fundraising and donor data (individual contributions at the federal and state levels, including donor characteristics)</li>\n            <li>Models and indices (Civic Score, partisanship, beliefs on issues, etc.)</li>\n        </ul>\n\n    </div>\n    <div class=\"faq\">\n        <h4>Question: How often is the data updated?</h4>\n        Answer: The frequency of updates depends on many factors, including geography, proximity to elections, and data source – but we push out major updates every month.\n    </div>\n    <div class=\"faq\">\n        <h4>Question: Whom should I contact for more information or questions?</h4>\n        Answer: Email: help@civicexplorer.com\n    </div>\n</div>\n"
        },
        {
            "name": "FilterBoxComponent",
            "id": "component-FilterBoxComponent-58fd6a5b131e67059f8205bd6c42391aece962b875237d47f94a34ebdecc8fe9103dc10cb6e5b5cbed6626264ff31033ed3750884f3b1ca82c9c29ee5df4df22",
            "file": "projects/explorer/src/app/shared/components/filter-box/filter-box.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-filter-box",
            "styleUrls": [
                "./filter-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filter-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appliedFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "mapSelections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "MapSelection",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChange",
                    "defaultValue": "new EventEmitter<FilterOption[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggleGeoFilter",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_isSaveCommunityDrawerVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "activeFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterOption[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "activeGeoFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "applyBtnActive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "currentCommunity",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "filters",
                    "defaultValue": "[\n    {\n      title: 'Age',\n      options: [\n        { label: '18 to 24', value: {selected: [18, 24], property: 'age'}},\n        { label: '25 to 34', value: {selected: [25, 34], property: 'age'}},\n        { label: '35 to 44', value: {selected: [35, 44], property: 'age'}},\n        { label: '45 to 54', value: {selected: [45, 54], property: 'age'}},\n        { label: '55 to 64', value: {selected: [55, 64], property: 'age'}},\n        { label: '65 Plus', value: {selected: [65, 150], property: 'age'}},\n        { label: 'Unknown', value: 'unknown'},\n      ],\n    },\n    {\n      title: 'Gender',\n      options: [\n        { label: 'Male', value: {selected: 'M', property: 'gender'}},\n        { label: 'Female', value: {selected: 'F', property: 'gender'}},\n        { label: 'Unknown', value: {selected: '', property: 'gender'}},\n      ],\n    },\n    {\n      title: 'Marital Status',\n      options: [\n        { label: 'Married', value: {selected: 'M', property: 'marital'}},\n        { label: 'Non-traditional', value: {selected: 'N', property: 'marital'}},\n        { label: 'Unknown / Single', value: {selected: '', property: 'marital'}},\n      ],\n    },\n    {\n      title: 'Income',\n      options: [\n        { label: '< 30k', value: {selected: [0, 30000], property: 'hh_income'}},\n        { label: '30 - 50k', value: {selected: [30000, 50000], property: 'hh_income'}},\n        { label: '50 - 75k', value: {selected: [50000, 75000], property: 'hh_income'}},\n        { label: '75 - 125k', value: {selected: [75000, 125000], property: 'hh_income'}},\n        { label: '125k+', value: {selected: [125000, 999999999999999], property: 'hh_income'}},\n      ],\n    },\n    {\n      title: 'Education',\n      options: [\n        { label: 'No High School', value: {selected: 'L', property: 'education'}},\n        { label: 'High School', value: {selected: 'H', property: 'education'}},\n        { label: 'Some College', value: {selected: 'S', property: 'education'}},\n        { label: 'Bachelors', value: {selected: 'B', property: 'education'}},\n        { label: 'Graduate', value: {selected: 'G', property: 'education'}},\n      ],\n    },\n    {\n      title: 'Voted',\n      options: [\n        { label: '2020 Primary', value: {selected: 'VOTE_P_2020', property: 'voted'}},\n        { label: '2018 General', value: {selected: 'VOTE_G_2018', property: 'voted'}},\n        { label: '2016 General', value: {selected: 'VOTE_G_2016', property: 'voted'}},\n        { label: '2016 Primary', value: {selected: 'VOTE_P_2016', property: 'voted'}},\n        { label: '2014 General', value: {selected: 'VOTE_G_2014', property: 'voted'}},\n        { label: '2012 General', value: {selected: 'VOTE_G_2012', property: 'voted'}},\n        { label: '2012 Primary', value: {selected: 'VOTE_P_2012', property: 'voted'}},\n      ],\n    },\n    {\n      title: 'Donated to',\n      options: [\n        { label: 'Causes', value: {selected: 'DONOR_TO_CAUSES', property: 'donor'}},\n        { label: 'Conservative', value: {selected: 'DONOR_TO_CONSERVATIVE', property: 'donor'}},\n        { label: 'Liberal', value: {selected: 'DONOR_TO_LIBERAL', property: 'donor'}},\n      ],\n    },\n    {\n      title: 'Party',\n      options: [\n        { label: 'Republican', value: {selected: 'R', property: 'party'}},\n        { label: 'Democratic', value: {selected: 'D', property: 'party'}},\n        { label: 'Independent', value: {selected: 'I', property: 'party'}},\n      ],\n    },\n    {\n      title: 'Civic Score',\n      options: [\n        { label: 'Most Engaged', value: {selected: 'A', property: 'civic_score'}},\n        { label: 'Actively Engaged', value: {selected: 'B', property: 'civic_score'}},\n        { label: 'Passively Engaged', value: {selected: 'C', property: 'civic_score'}},\n        { label: 'Occasionally Engaged', value: {selected: 'D', property: 'civic_score'}},\n        { label: 'Least Engaged', value: {selected: 'E', property: 'civic_score'}},\n      ],\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filter[]",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "filters$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "filtersApplied",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "geoFilters$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "saveBtnActive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "selectFilters",
                    "defaultValue": "{id: 'Selected Filters', filters: []}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterModel",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 152,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activeFilterOptions",
                    "args": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deselectAll",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "diffForApply",
                    "args": [
                        {
                            "name": "futureFilter",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pastFilter",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "futureFilter",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pastFilter",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filtersChanged",
                    "args": [
                        {
                            "name": "softChange",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "softChange",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSaveDrawer",
                    "args": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleFilterPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewEncapsulation, Input, Output, EventEmitter, OnDestroy} from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {Observable, Subject} from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { FilterModel, FilterOption } from '../../models/filters.model';\nimport { FilterState } from '../../stores/filter-store/explorer-filters.reducer';\nimport * as FilterActions from '../../stores/filter-store/explorer-filters.actions';\nimport { GeoFilterState } from '../../stores/geo-filter-store/explorer-geo-filter.reducer';\nimport { geoFilterList } from '../../stores/geo-filter-store/explorer-geo-filter.selectors';\nimport { MapSelection } from '../us-map/map-selection.model';\nimport { filterList } from '../../stores/filter-store/explorer-filters.selectors';\n\ninterface Filter {\n  title: string;\n  options: FilterOption[];\n  opened?: boolean;\n}\n\n@Component({\n  selector: 'exp-filter-box',\n  templateUrl: './filter-box.component.html',\n  styleUrls: ['./filter-box.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class FilterBoxComponent implements OnInit, OnDestroy {\n\n  // @ts-ignore\n  @Input() mapSelections: MapSelection;\n  @Input() set appliedFilters(appliedFilters: any) {\n    if (appliedFilters) {\n      this.clearFilters();\n      // merge both arrays\n      appliedFilters.forEach((appliedFilter: any) => {\n        this.filters.forEach(categories => {\n          categories.options.forEach(option => {\n            if (option.label === appliedFilter.label) {\n              option.checked = true;\n            }\n          });\n        });\n      });\n      this.filtersChanged(true);\n      this.filterChange.emit(appliedFilters);\n    }\n  }\n\n  @Output() filterChange = new EventEmitter<FilterOption[]>();\n  @Output() toggleGeoFilter = new EventEmitter<any>();\n\n  activeFilters: FilterOption[] = [];\n  selectFilters: FilterModel = {id: 'Selected Filters', filters: []};\n  geoFilters$: Observable<any> | undefined;\n  filters$: Observable<any> | undefined;\n  activeGeoFilter: any;\n  filtersApplied = true;\n  applyBtnActive = true;\n  saveBtnActive = true;\n  // save community drawer fields\n  _isSaveCommunityDrawerVisible = false;\n  currentCommunity: any = {};\n\n  filters: Filter[] = [\n    {\n      title: 'Age',\n      options: [\n        { label: '18 to 24', value: {selected: [18, 24], property: 'age'}},\n        { label: '25 to 34', value: {selected: [25, 34], property: 'age'}},\n        { label: '35 to 44', value: {selected: [35, 44], property: 'age'}},\n        { label: '45 to 54', value: {selected: [45, 54], property: 'age'}},\n        { label: '55 to 64', value: {selected: [55, 64], property: 'age'}},\n        { label: '65 Plus', value: {selected: [65, 150], property: 'age'}},\n        { label: 'Unknown', value: 'unknown'},\n      ],\n    },\n    {\n      title: 'Gender',\n      options: [\n        { label: 'Male', value: {selected: 'M', property: 'gender'}},\n        { label: 'Female', value: {selected: 'F', property: 'gender'}},\n        { label: 'Unknown', value: {selected: '', property: 'gender'}},\n      ],\n    },\n    {\n      title: 'Marital Status',\n      options: [\n        { label: 'Married', value: {selected: 'M', property: 'marital'}},\n        { label: 'Non-traditional', value: {selected: 'N', property: 'marital'}},\n        { label: 'Unknown / Single', value: {selected: '', property: 'marital'}},\n      ],\n    },\n    {\n      title: 'Income',\n      options: [\n        { label: '< 30k', value: {selected: [0, 30000], property: 'hh_income'}},\n        { label: '30 - 50k', value: {selected: [30000, 50000], property: 'hh_income'}},\n        { label: '50 - 75k', value: {selected: [50000, 75000], property: 'hh_income'}},\n        { label: '75 - 125k', value: {selected: [75000, 125000], property: 'hh_income'}},\n        { label: '125k+', value: {selected: [125000, 999999999999999], property: 'hh_income'}},\n      ],\n    },\n    {\n      title: 'Education',\n      options: [\n        { label: 'No High School', value: {selected: 'L', property: 'education'}},\n        { label: 'High School', value: {selected: 'H', property: 'education'}},\n        { label: 'Some College', value: {selected: 'S', property: 'education'}},\n        { label: 'Bachelors', value: {selected: 'B', property: 'education'}},\n        { label: 'Graduate', value: {selected: 'G', property: 'education'}},\n      ],\n    },\n    {\n      title: 'Voted',\n      options: [\n        { label: '2020 Primary', value: {selected: 'VOTE_P_2020', property: 'voted'}},\n        { label: '2018 General', value: {selected: 'VOTE_G_2018', property: 'voted'}},\n        { label: '2016 General', value: {selected: 'VOTE_G_2016', property: 'voted'}},\n        { label: '2016 Primary', value: {selected: 'VOTE_P_2016', property: 'voted'}},\n        { label: '2014 General', value: {selected: 'VOTE_G_2014', property: 'voted'}},\n        { label: '2012 General', value: {selected: 'VOTE_G_2012', property: 'voted'}},\n        { label: '2012 Primary', value: {selected: 'VOTE_P_2012', property: 'voted'}},\n      ],\n    },\n    {\n      title: 'Donated to',\n      options: [\n        { label: 'Causes', value: {selected: 'DONOR_TO_CAUSES', property: 'donor'}},\n        { label: 'Conservative', value: {selected: 'DONOR_TO_CONSERVATIVE', property: 'donor'}},\n        { label: 'Liberal', value: {selected: 'DONOR_TO_LIBERAL', property: 'donor'}},\n      ],\n    },\n    {\n      title: 'Party',\n      options: [\n        { label: 'Republican', value: {selected: 'R', property: 'party'}},\n        { label: 'Democratic', value: {selected: 'D', property: 'party'}},\n        { label: 'Independent', value: {selected: 'I', property: 'party'}},\n      ],\n    },\n    {\n      title: 'Civic Score',\n      options: [\n        { label: 'Most Engaged', value: {selected: 'A', property: 'civic_score'}},\n        { label: 'Actively Engaged', value: {selected: 'B', property: 'civic_score'}},\n        { label: 'Passively Engaged', value: {selected: 'C', property: 'civic_score'}},\n        { label: 'Occasionally Engaged', value: {selected: 'D', property: 'civic_score'}},\n        { label: 'Least Engaged', value: {selected: 'E', property: 'civic_score'}},\n      ],\n    },\n  ];\n\n  private unsubscribe: Subject<void> = new Subject();\n\n  constructor(private filterStore: Store<FilterState>, private geoFilterStore: Store<GeoFilterState>) { }\n\n  ngOnInit(): void {\n    this.geoFilters$ = this.geoFilterStore.pipe(select(geoFilterList));\n    this.geoFilters$.pipe(takeUntil(this.unsubscribe)).subscribe(res => {\n      this.activeGeoFilter = res?.geoFilters?.geoFilters;\n      if (res?.geoFilters?.geoFilters?.geoFilters?.length > 0) {\n        this.activeGeoFilter = res.geoFilters.geoFilters.geoFilters;\n      } else if (res?.geoFilters?.geoFilters?.geoFilters?.length === 0 && res?.geoFilters?.geoFilters?.name) {\n        this.activeGeoFilter = ['1'];\n      } else {\n        this.activeGeoFilter = undefined;\n      }\n    });\n    this.filters$ = this.filterStore.pipe(select(filterList));\n    this.filters$.pipe(takeUntil(this.unsubscribe)).subscribe(res => {\n      if (res?.applyFilters?.applyFilters) {\n        this.filtersChanged();\n        this.filterStore.dispatch(FilterActions.filterExplorerApplyFilters({applyFilters: false}));\n      }\n      if (res?.communitySelected?.communitySelected) {\n        this.applyBtnActive = true;\n      }\n      if (res?.saveButtonActive) {\n        this.saveBtnActive = res.saveButtonActive.saveButtonActive;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n\n  activeFilterOptions(filter: Filter): any[] {\n    return filter.options.filter(option => option.checked);\n  }\n\n  filtersChanged(softChange?: boolean): void {\n    const activeFilters: FilterOption[] = [];\n\n    this.filters.forEach(filter => {\n      const activeFilterOptions = this.activeFilterOptions(filter);\n      if (activeFilterOptions.length) {\n        Array.prototype.push.apply(activeFilters, activeFilterOptions);\n      }\n    });\n    this.filtersApplied = activeFilters.length > 0 ? false : true;\n    this.applyBtnActive = this.diffForApply(activeFilters, this.activeFilters);\n    if (!softChange) {\n      this.activeFilters = activeFilters;\n      this.selectFilters.filters = JSON.parse(JSON.stringify(activeFilters));\n      this.filterStore.dispatch(FilterActions.filterExplorerApplied(this.selectFilters));\n      this.filterStore.dispatch(FilterActions.filterExplorerApplyButtonClicked({applyButtonClicked: true}));\n      this.filterStore.dispatch(FilterActions.filterExplorerSaveCommunityActive({saveButtonActive: false}));\n      this.filterChange.emit(activeFilters);\n      this.applyBtnActive = true;\n    }\n    this.filterStore.dispatch(FilterActions.filterExplorerSelected({selected: !this.applyBtnActive}));\n  }\n\n  deselectAll(title: string): void {\n    for (const a of this.filters) {\n      if (a.title === title) {\n        for (const b of a.options) {\n          b.checked = false;\n        }\n      }\n    }\n    this.filtersChanged();\n  }\n  selectAll(title: string): void {\n    for (const a of this.filters) {\n      if (a.title === title) {\n        for (const b of a.options) {\n          b.checked = true;\n        }\n      }\n    }\n    this.filtersChanged();\n  }\n  toggleFilterPanel(): void {\n    this.toggleGeoFilter.emit();\n  }\n  clearFilters(): void{\n    for (const a of this.filters) {\n      for (const b of a.options) {\n        b.checked = false;\n      }\n    }\n    this.filtersChanged();\n    this.filterStore.dispatch(FilterActions.filterExplorerSaveCommunityActive({saveButtonActive: true}));\n  }\n  diffForApply(futureFilter: any[], pastFilter: any[]): boolean {\n    const result = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < futureFilter.length; i++) {\n      if (pastFilter.indexOf(futureFilter[i]) === -1) {\n        result.push(futureFilter[i]);\n      }\n    }\n    if (result.length === 0 && futureFilter.length === 0 && pastFilter.length > 0) {\n      result.push('true');\n    }\n    if (result.length === 0 && futureFilter.length !== pastFilter.length) {\n      result.push('true');\n    }\n    return result.length > 0 ? false : true;\n  }\n\n  get isSaveCommunityDrawerVisible(): boolean {\n    return this._isSaveCommunityDrawerVisible;\n  }\n\n  set isSaveCommunityDrawerVisible(visible: boolean) {\n    this._isSaveCommunityDrawerVisible = visible;\n  }\n\n  openSaveDrawer(community: any): void {\n    this.currentCommunity = {};\n    this.isSaveCommunityDrawerVisible = true;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".filter-box {\n  padding: 12px 30px;\n\n  .filter {\n    display: inline-block;\n    margin-right: 0px;\n    padding: 4px 10px;\n\n    &:hover {\n      background: #f5fcff;\n    }\n\n    &.active {\n      background: #e0f5fd;\n      color: #2097F6;\n    }\n\n    a {\n      color: #5a5a5a;\n      font-weight: 600;\n      font-size: 14px;\n\n      &.active-filter {\n        color: #2097F6;\n      }\n    }\n  }\n  .geo-filter-btn {\n    background-color: transparent;\n    border: 0;\n    cursor: pointer;\n    font-weight: bold;\n  }\n  .filter-btn {\n    opacity: 0.45;\n  }\n  .filter-button-wrapper {\n    float: right;\n\n    button {\n      margin-left: 15px;\n    }\n    .filter-button-clear {\n      background-color: transparent;\n      border: none;\n      color: #1890ff;\n    }\n    .filter-button-clear-disabled {\n      color: rgba(0,0,0,.25) !important;\n    }\n  }\n}\n\n.filter-dropdown {\n  padding: 15px;\n\n  .filter-title {\n    margin: 5px 0 10px;\n  }\n\n  .filter-options {\n    .ant-checkbox-group-item {\n      display: flex;\n      margin: 5px 0;\n    }\n  }\n\n  li {\n    margin: 5px 0;\n  }\n}\n.activeBlue {\n  color: #2097F6;\n}\n\n",
                    "styleUrl": "./filter-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "geoFilterStore",
                        "type": "Store<GeoFilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 152,
                "jsdoctags": [
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "geoFilterStore",
                        "type": "Store<GeoFilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "appliedFilters": {
                    "name": "appliedFilters",
                    "setSignature": {
                        "name": "appliedFilters",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "appliedFilters",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "appliedFilters",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isSaveCommunityDrawerVisible": {
                    "name": "isSaveCommunityDrawerVisible",
                    "setSignature": {
                        "name": "isSaveCommunityDrawerVisible",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "visible",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 268,
                        "jsdoctags": [
                            {
                                "name": "visible",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isSaveCommunityDrawerVisible",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 264
                    }
                }
            },
            "templateData": "<exp-community-save-drawer\n  [(isVisible)]=\"isSaveCommunityDrawerVisible\"\n  [existingCommunity]=\"currentCommunity\"\n  [selections]=\"mapSelections\"\n  [criteriaFilters]=\"selectFilters.filters\"\n  [geoFilters]=\"activeGeoFilter\"\n></exp-community-save-drawer>\n<div class=\"filter-box\">\n  <button class=\"geo-filter-btn\" (click)=\"toggleFilterPanel()\" [ngClass]=\"{'activeBlue': activeGeoFilter?.length > 0 }\"><i nz-icon nzType=\"account-book\" nzTheme=\"outline\"></i> &nbsp; Geographies</button>\n  <span *ngIf=\"activeGeoFilter?.length > 0\" class=\"activeBlue\" style=\"font-weight: 600;\">({{activeGeoFilter?.length}})</span>\n  <span class=\"filter-btn\"> | &nbsp; <i nz-icon nzType=\"filter\" nzTheme=\"outline\"></i> &nbsp; Filter By &nbsp;</span>\n  <div class=\"filter\"\n    *ngFor=\"let filter of filters\"\n    [ngClass]=\"{'active': filter.opened}\"\n  >\n    <a nz-dropdown\n      nzTrigger=\"click\"\n      [nzDropdownMenu]=\"options\"\n      [nzOverlayClassName]=\"'filter-overlay'\"\n      [(nzVisible)]=\"filter.opened\"\n      [ngClass]=\"{'active-filter': activeFilterOptions(filter).length}\"\n    >\n      {{ filter.title }} {{ activeFilterOptions(filter).length ? '(' + activeFilterOptions(filter).length + ')' : '' }}\n      <i nz-icon [nzType]=\"filter.opened ? 'caret-up' : 'caret-down'\"></i>\n    </a>\n    <nz-dropdown-menu #options=\"nzDropdownMenu\">\n      <div nz-menu class=\"filter-dropdown\">\n        <div class=\"filter-title\">{{ filter.title }}</div>\n        <div class=\"filter-options\">\n          <nz-checkbox-group [(ngModel)]=\"filter.options\" (ngModelChange)=\"filtersChanged(true)\"></nz-checkbox-group>\n          <p *ngIf=\"activeFilters.length > 0\"><a (click)=\"deselectAll(filter.title)\">Deselect All</a></p>\n          <p *ngIf=\"activeFilters.length === 0\"><a (click)=\"selectAll(filter.title)\">Select All</a></p>\n        </div>\n      </div>\n    </nz-dropdown-menu>\n  </div>\n  <div class=\"filter-button-wrapper\">\n    <button nz-button nzType=\"default\" class=\"filter-button-clear\" [ngClass]=\"{'filter-button-clear-disabled':filtersApplied}\" (click)=\"clearFilters()\" [disabled]=\"filtersApplied\">Clear</button>\n    <button nz-button nzType=\"primary\" class=\"filter-button-apply\" (click)=\"filtersChanged()\" [disabled]=\"applyBtnActive\">Apply</button>\n    <button nz-button nzType=\"primary\" class=\"filter-button-apply\" [disabled]=\"saveBtnActive\" (click)=\"openSaveDrawer({})\">Save</button>\n<!--    <button nz-button nz-dropdown nzTrigger=\"click\" [nzDropdownMenu]=\"menu\" nzType=\"primary\" class=\"filter-button-apply\" [disabled]=\"saveBtnActive\">Save <i nz-icon nzType=\"caret-down\"></i></button>-->\n<!--    <nz-dropdown-menu #menu=\"nzDropdownMenu\">-->\n<!--      <ul nz-menu>-->\n<!--        <li nz-menu-item>Save Changes</li>-->\n<!--        <li nz-menu-item (click)=\"openSaveDrawer({})\">Save as New</li>-->\n<!--      </ul>-->\n<!--    </nz-dropdown-menu>-->\n  </div>\n</div>\n"
        },
        {
            "name": "GeoFiltersDrawerComponent",
            "id": "component-GeoFiltersDrawerComponent-fd961495ac22c0dd6fc71b3a31cca922a473ad5789d0ab25aecd24746f1c3aaa986efb893cbfcd11d9d4fb93186ef897d62ce41b702f5667fc7ef080628d9773",
            "file": "projects/explorer/src/app/shared/components/geo-filters-drawer/geo-filters-drawer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-geo-filters-drawer",
            "styleUrls": [
                "./geo-filters-drawer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./geo-filters-drawer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "remoteOpenPanel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "regionsSelected",
                    "defaultValue": "new EventEmitter<TreeRegion[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggleSidebar",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "displaySidepanel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "geoFilters$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "layer",
                    "defaultValue": "'county'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "nodes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeRegion[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "searchValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedNodes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeRegion[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "states$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<StateModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buildCommunity",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changeLayer",
                    "args": [
                        {
                            "name": "layer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "layer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSelections",
                    "args": [
                        {
                            "name": "communitiesReset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "communitiesReset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "collapse",
                    "args": [
                        {
                            "name": "row",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expand",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expand",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deselectNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSavedIntoGeofilter",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSavedIntoGeofilterWorker",
                    "args": [
                        {
                            "name": "filter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nameCompare",
                    "args": [
                        {
                            "name": "a",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberCompare",
                    "args": [
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseCounties",
                    "args": [
                        {
                            "name": "county",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stateNode",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selected",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "county",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stateNode",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selected",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAllChildren",
                    "args": [
                        {
                            "name": "node",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectChildrenIfParentSelected",
                    "args": [
                        {
                            "name": "row",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectNode",
                    "args": [
                        {
                            "name": "row",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "force",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "force",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSidepanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSelectedNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { select, Store } from '@ngrx/store';\n\nimport { StateModel } from '../../models/states.model';\nimport { statesList } from '../../stores/state-store/explorer.selector';\nimport { ExplorerState } from '../../stores/state-store/explorer.reducer';\nimport { MapService } from '../../services/map.service';\nimport { TreeRegion } from './tree-region.model';\nimport { NzModalService } from 'ng-zorro-antd/modal';\nimport { GeoFilterState } from '../../stores/geo-filter-store/explorer-geo-filter.reducer';\nimport * as GeoFilterActions from '../../stores/geo-filter-store/explorer-geo-filter.actions';\nimport { geoFilterList } from '../../stores/geo-filter-store/explorer-geo-filter.selectors';\nimport { FilterState } from '../../stores/filter-store/explorer-filters.reducer';\nimport * as FilterActions from '../../stores/filter-store/explorer-filters.actions';\n\n@Component({\n  selector: 'exp-geo-filters-drawer',\n  templateUrl: './geo-filters-drawer.component.html',\n  styleUrls: ['./geo-filters-drawer.component.scss'],\n})\nexport class GeoFiltersDrawerComponent implements OnInit, OnDestroy {\n  @Output() toggleSidebar = new EventEmitter<boolean>();\n  @Output() regionsSelected = new EventEmitter<TreeRegion[]>();\n  @Input() set remoteOpenPanel(panel: any) {\n    this.displaySidepanel = panel;\n  }\n  displaySidepanel = false;\n  nodes: TreeRegion[] = [];\n  searchValue = '';\n  selectedNodes: TreeRegion[] = [];\n  layer = 'county';\n  states$: Observable<StateModel[]> | undefined;\n  geoFilters$: Observable<any> | undefined;\n\n  private unsubscribe: Subject<void> = new Subject();\n\n  constructor(\n    private mapService: MapService,\n    private store: Store<ExplorerState>,\n    private modal: NzModalService,\n    private geoFilter: Store<GeoFilterState>,\n    private filterStore: Store<FilterState>,\n  ) { }\n\n  ngOnInit(): void {\n    this.states$ = this.store.pipe(select(statesList));\n    this.states$.pipe(takeUntil(this.unsubscribe)).subscribe(listOfStates => {\n      const selectTree: any = [];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      listOfStates.sort((state1: any, state2: any) => state1.name.localeCompare(state2.name)).forEach((state: any) => {\n        const stateNode: TreeRegion = {\n          key: state.id,\n          name: state.name,\n          people: state.people,\n          households: state.households,\n          showExpand: true,\n          level: 0,\n          expanded: false,\n          children: [],\n          isSelected: this.selectedNodes.some(node => node.key === state.id),\n          isDisabled: false,\n        };\n\n        if (state.counties) {\n          state.counties.each((c: any) => {\n            this.parseCounties(c, stateNode);\n          });\n        }\n\n        selectTree.push(stateNode);\n      });\n      this.nodes = selectTree;\n    });\n    this.geoFilters$ = this.geoFilter.pipe(select(geoFilterList));\n    this.geoFilters$.pipe(takeUntil(this.unsubscribe)).subscribe( filter => {\n      if (filter?.geoFiltersSaved?.geoFiltersSaved) {\n        this.clearSelections(true);\n        this.loadSavedIntoGeofilter(this.loadSavedIntoGeofilterWorker(filter.geoFiltersSaved));\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n\n  nameCompare(a: TreeRegion, b: TreeRegion): any {\n    return a.name.localeCompare(b.name);\n  }\n\n  numberCompare(prop: string): any {\n    // @ts-ignore\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n    return (a: TreeRegion, b: TreeRegion) => a[prop] - b[prop];\n  }\n\n  changeLayer(layer: string): void {\n    if (this.selectedNodes.length) {\n      this.modal.confirm({\n        nzTitle: 'Warning',\n        nzContent: 'Changing to a different geographical level will remove any '\n          + 'current geographical filter selections. Would you like to continue?',\n        nzOnOk: () => this.clearSelections(),\n      });\n    } else {\n      this.clearSelections();\n    }\n  }\n\n  collapse(row: TreeRegion, expand: boolean): void {\n    row.expanded = expand;\n    if (expand) {\n      // Expand\n      if (!row?.children?.length) {\n        row.loading = true;\n        this.mapService.getCountyData(this.layer, row.key.replace('US-', '')).subscribe(res => {\n          row.children = [];\n\n          res?.data?.county?.forEach((county: any) => {\n            this.parseCounties(county, row);\n          });\n          this.selectChildrenIfParentSelected(row);\n          row.loading = false;\n        });\n      } else {\n        this.selectChildrenIfParentSelected(row);\n      }\n    } else {\n      // Collapse\n      if (row.children) {\n        row.children.forEach(d => {\n          this.collapse(d, false);\n        });\n      }\n    }\n  }\n\n  selectChildrenIfParentSelected(row: TreeRegion): void {\n    // If parent row is selected, and it's the only selected row, select all children\n    const anyOtherStateSelected = this.nodes.some(state => state.isSelected && state.key !== row.key);\n    if (row.isSelected && !anyOtherStateSelected) {\n      row.isSelected = false;\n      this.selectAllChildren(row);\n      this.updateSelectedNodes();\n    }\n  }\n\n  selectAllChildren(node: TreeRegion): void {\n    node.children?.forEach(child => {\n      child.isDisabled = false;\n      this.selectNode(child, true);\n    });\n  }\n\n  toggleSidepanel(): void {\n    this.displaySidepanel = !this.displaySidepanel;\n    this.toggleSidebar.emit(this.displaySidepanel);\n  }\n\n  selectNode(row: TreeRegion, force: boolean = false): void {\n    if (row.isDisabled && !force) { return; }\n    row.isSelected = !row.isSelected;\n\n    const anyStateSelected = this.nodes.some(state => state.isSelected);\n    const anyCountySelected = this.nodes.some(state => state.children?.some(county => county.isSelected));\n\n    // Disable counties from another state and other states\n    this.nodes.forEach(node => {\n      // Clicked on a county\n      if (row.parentCode) {\n        if (node.key !== row.parentCode) {\n          // Disable other states\n          node.isDisabled = !!anyCountySelected;\n          node.children?.forEach(county => county.isDisabled = !!anyCountySelected);\n        }\n      } else {\n        node.children?.forEach(county => {\n          county.isDisabled = !!anyStateSelected;\n          // I'm selecting a state => disable counties\n          county.isSelected = false;\n        });\n\n        if (node.expanded) {\n          this.selectChildrenIfParentSelected(node);\n        }\n\n        if (!row.expanded && row.isSelected) {\n          // It means I clicked on a state that is not expanded, so I should enable other nodes\n          this.nodes.forEach(node => node.isDisabled = false);\n        }\n      }\n    });\n\n    this.updateSelectedNodes();\n  }\n\n  updateSelectedNodes(): void {\n    this.selectedNodes = this.nodes.filter((node: TreeRegion) => node.isSelected);\n\n    // Check if we have selected counties only if we don't have states\n    if (!this.selectedNodes.length) {\n      this.nodes.forEach(node => {\n        if (node.children?.length) {\n          this.selectedNodes.push(...node.children.filter((node: TreeRegion) => node.isSelected));\n        }\n      });\n    }\n  }\n\n  buildCommunity(): void {\n    this.geoFilter.dispatch(GeoFilterActions.geoFilterExplorerApplied({geoFilters: this.selectedNodes}));\n    this.filterStore.dispatch(FilterActions.filterExplorerSaveCommunityActive({saveButtonActive: false}));\n    this.regionsSelected.emit(this.selectedNodes);\n    this.toggleSidepanel();\n  }\n\n  clearSelections(communitiesReset?: boolean): void {\n    this.nodes.forEach(node => {\n      node.isSelected = false;\n      node.isDisabled = false;\n      if (!communitiesReset) {\n        node.expanded = false;\n        node.children = undefined;\n      }\n    });\n    this.updateSelectedNodes();\n  }\n\n  deselectNode(node: TreeRegion): void {\n    node.isSelected = false;\n  }\n\n  loadSavedIntoGeofilter(state: any): void {\n    let setNodeRowNum = -1;\n    if (state[0]?.parentCode) {\n      this.mapService.getCountyData(this.layer, state[0].parentCode.replace('US-', '')).subscribe(res => {\n        for (let a = 0; a < this.nodes.length; a++) {\n          if (state[0].parentCode === this.nodes[a].key) {\n            setNodeRowNum = a;\n          }\n        }\n        res?.data?.county?.forEach((county: any) => {\n          const countyNode = {\n            key: county.segment,\n            name: county.county || county.congress || county.postcode,\n            people: county.totals.people,\n            households: county.totals.households,\n            showExpand: false,\n            level: 1,\n            expanded: true,\n            isSelected: false,\n            isDisabled: false,\n            parentCode: this.nodes[setNodeRowNum].key,\n            type: this.layer,\n          };\n          for (const b of state) {\n            if (b.key === countyNode.key) {\n              countyNode.isSelected = true;\n            }\n          }\n          this.nodes[setNodeRowNum].children?.push(countyNode);\n        });\n        this.nodes[setNodeRowNum].expanded = true;\n        this.updateSelectedNodes();\n      });\n    } else {\n      for (const a of state) {\n        for (const b of this.nodes) {\n          if (a.key === b.key) {\n            b.isSelected = true;\n          }\n        }\n      }\n      this.updateSelectedNodes();\n    }\n    this.geoFilter.dispatch(GeoFilterActions.geoFilterExplorerSaved({geoFiltersSaved: null}));\n  }\n\n  loadSavedIntoGeofilterWorker(filter: any): any[] {\n    const finalArray: any = [];\n    let finalObj = {\n      key: null,\n      parentCode: null,\n    };\n    if (filter.geoFiltersSaved?.geoFilters?.length === 0) {\n      if (filter.geoFiltersSaved.selections.level === 'county') {\n        finalObj.parentCode = filter.geoFiltersSaved.selections.id.substring(0, 5);\n        finalObj.key = filter.geoFiltersSaved.selections.id;\n      } else {\n        finalObj.key = filter.geoFiltersSaved.selections.id;\n      }\n      finalArray.push(finalObj);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return finalArray;\n    } else {\n      for (const a of filter.geoFiltersSaved.geoFilters) {\n        if (a.level === 0) {\n          finalObj = {key: a.key, parentCode: null};\n          finalArray.push(finalObj);\n        } else {\n          finalObj = {key: a.key, parentCode: a.parentCode};\n          finalArray.push(finalObj);\n        }\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return finalArray;\n    }\n  }\n\n  private parseCounties(county: any, stateNode: TreeRegion, selected: boolean = false): void {\n    const anyStateSelected = this.nodes.some(state => state.isSelected);\n    const anyCountySelectedFromOtherState = this.nodes.some(\n      state => state.children?.some(county => county.isSelected && county.parentCode !== stateNode.key),\n    );\n    const countyNode = {\n      key: county.segment,\n      name: county.county || county.congress || county.postcode,\n      people: county.totals.people,\n      households: county.totals.households,\n      showExpand: false,\n      level: 1,\n      expanded: true,\n      isSelected: selected,\n      isDisabled: !!anyStateSelected || !!anyCountySelectedFromOtherState,\n      parentCode: stateNode.key,\n      type: this.layer,\n    };\n\n    // Add Congressional District if it's CD\n    if (this.layer === 'congress') {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      countyNode.name = `Congressional District ${countyNode.name}`;\n    }\n    if (stateNode.children) {\n      stateNode.children.push(countyNode);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".geo-filters-drawer {\n  height: 100%;\n  width: 0;\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  overflow-x: hidden;\n  transition: 0.5s;\n  background-color: white;\n\n  .geo-filters-drawer-title h3 {\n    font-size: 20px;\n  }\n\n  .layer-selection {\n    margin: 10px 0;\n\n    .layer-selection-dropdown {\n      width: 100%;\n    }\n  }\n\n  &.expanded {\n    width: 450px;\n    padding: 40px 20px;\n    box-shadow: 5px 1px 10px 1px rgba(87,87,87,0.7);\n    -webkit-box-shadow: 5px 1px 10px 1px rgba(87,87,87,0.7);\n    -moz-box-shadow: 5px 1px 10px 1px rgba(87,87,87,0.7);\n  }\n\n  .search-box {\n    padding: 0 20px 20px 20px;\n  }\n\n  .my-community {\n    margin-top: 30px;\n  }\n\n  .panel-buttons {\n    margin-bottom: 30px;\n    \n    .build-community-buttons {\n      text-align: right;\n    }\n  }\n}\n\n.geo-filters-drawer .closebtn {\n  position: absolute;\n  top: 0;\n  right: 25px;\n  font-size: 36px;\n  margin-left: 50px;\n}\n\n.customize-community-button {\n  font-size: 16px;\n  cursor: pointer;\n  padding: 10px 15px;\n  border: none;\n  position: fixed;\n  left: 0;\n  border-radius: 10px;\n  box-shadow: 0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n            0px 1px 10px 0px rgba(0, 0, 0, 0.12),\n            0px 2px 4px -1px rgba(0, 0, 0, 0.2);\n  margin-top: 20px;\n}\n\n.customize-community-tree {\n  .customize-community-tree-node {\n    .tree-icon {\n      margin-right: 5px;\n      color: #68a3f4;\n\n      &.selected {\n        color: #d34d99;\n      }\n\n      &.disabled {\n        color: #DDD;\n      }\n    }\n  }\n}\n\n.regions-table {\n  max-height: 50%;\n  overflow: auto;\n\n  .loading {\n    text-align: center;\n  }\n\n  .region-name {\n    text-transform: lowercase;\n\n    &::first-letter {\n      text-transform: capitalize;\n    }\n  }\n  .expand-column {\n    float: right;\n    cursor: pointer;\n  }\n\n  .select-column {\n    cursor: pointer;\n\n    .tree-icon {\n      margin-right: 5px;\n      color: #68a3f4;\n\n      &.selected {\n        color: #d34d99;\n      }\n\n      &.disabled {\n        color: #DDD;\n        cursor: default;\n      }\n    }\n  }\n\n  .parent-rows {\n    td:first-child {\n      padding-left: 0px;\n    }\n  }\n\n  .child-rows {\n    td:first-child {\n      padding-left: 10px;\n    }\n  }\n}\n",
                    "styleUrl": "./geo-filters-drawer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<ExplorerState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modal",
                        "type": "NzModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "geoFilter",
                        "type": "Store<GeoFilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<ExplorerState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modal",
                        "type": "NzModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "geoFilter",
                        "type": "Store<GeoFilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "remoteOpenPanel": {
                    "name": "remoteOpenPanel",
                    "setSignature": {
                        "name": "remoteOpenPanel",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "panel",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "panel",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<!--<button class=\"customize-community-button\" (click)=\"toggleSidepanel()\">-->\n<!--  <i nz-icon nzType=\"right\" nzTheme=\"outline\"></i>-->\n<!--  Customize Community-->\n<!--</button>-->\n<div [ngClass]=\"{'expanded': displaySidepanel }\" class=\"geo-filters-drawer\">\n  <a class=\"closebtn\" (click)=\"toggleSidepanel()\">&times;</a>\n  <div class=\"geo-filters-drawer-title\">\n    <h3>Geography</h3>\n  </div>\n  <div class=\"layer-selection\">\n    <nz-select [(ngModel)]=\"layer\" (ngModelChange)=\"changeLayer($event)\" class=\"layer-selection-dropdown\">\n      <nz-option nzValue=\"county\" nzLabel=\"Counties\"></nz-option>\n      <nz-option nzValue=\"congress\" nzLabel=\"Congressional Districts\"></nz-option>\n      <nz-option nzValue=\"postcode\" nzLabel=\"Zip Codes\"></nz-option>\n    </nz-select>\n  </div>\n  <nz-table #expandTable [nzData]=\"nodes\" nzTableLayout=\"fixed\" [nzFrontPagination]=\"false\" class=\"regions-table\">\n    <thead>\n      <tr>\n        <th [nzSortFn]=\"nameCompare\" [nzWidth]=\"'50%'\">\n          States and Counties\n        </th>\n        <th [nzSortFn]=\"numberCompare('people')\" [nzWidth]=\"'25%'\">\n          Population\n        </th>\n        <th [nzSortFn]=\"numberCompare('households')\" [nzWidth]=\"'25%'\">\n          Households\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <ng-container *ngFor=\"let row of expandTable.data\">\n        <tr class=\"parent-rows\">\n          <td>\n            <span class=\"select-column\">\n              <i class=\"tree-icon\" [ngClass]=\"{'selected': row.isSelected, 'disabled': row.isDisabled}\"\n                nz-icon\n                [nzType]=\"row.isSelected ? 'close' : 'plus'\"\n                (click)=\"selectNode(row)\"\n              > </i>\n            </span>\n            <span>{{ row.name | titlecase }}</span>\n            <span class=\"expand-column\">\n              <i (click)=\"collapse(row, !row.expanded)\" nz-icon [nzType]=\"row.expanded ? 'up' : 'down'\" nzTheme=\"outline\"></i>\n            </span>\n          </td>\n          <td>{{ row.people | number }}</td>\n          <td>{{ row.households | number }}</td>\n        </tr>\n        <tr *ngIf=\"row.loading\">\n          <td colspan=\"3\" class=\"loading\">\n            <nz-spin nzSimple [nzSize]=\"'small'\"></nz-spin>\n          </td>\n        </tr>\n        <ng-container *ngFor=\"let subRow of row.children\">\n          <tr class=\"child-rows\" *ngIf=\"row.expanded\">\n            <td>\n              <span class=\"select-column\">\n                <i\n                  class=\"tree-icon\"\n                  [ngClass]=\"{'selected': subRow.isSelected, 'disabled': subRow.isDisabled}\"\n                  nz-icon\n                  [nzType]=\"subRow.isSelected ? 'close' : 'plus'\"\n                  (click)=\"selectNode(subRow)\"\n                > </i>\n              </span>\n              <span>{{ subRow.name }}</span>\n            </td>\n            <td>{{ subRow.people | number }}</td>\n            <td>{{ subRow.households | number }}</td>\n          </tr>\n        </ng-container>\n      </ng-container>\n    </tbody>\n  </nz-table>\n  <div class=\"my-community\">\n    <div class=\"geo-filters-drawer-title\">\n      <h5>Selected Filters</h5>\n    </div>\n    <exp-selection-tool-tagbox\n      [regions]=\"selectedNodes\"\n      [closeable]=\"true\"\n      (remove)=\"deselectNode($event)\"\n    > </exp-selection-tool-tagbox>\n  </div>\n  <div nz-row nzJustify=\"space-between\" class=\"panel-buttons\">\n    <div nz-col nzSpan=\"6\">\n      <button nz-button nzType=\"default\" (click)=\"toggleSidepanel()\" nzAlign=\"bottom\">Cancel</button>\n    </div>\n    <div nz-col nzSpan=\"18\" class=\"build-community-buttons\">\n      <button nz-button nzType=\"text\" (click)=\"clearSelections()\">Clear Selections</button>\n      <button nz-button nzType=\"primary\" (click)=\"buildCommunity()\" nzAlign=\"bottom\" [disabled]=\"selectedNodes.length === 0\">Build Map</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0cd94fbc94a83702e45bf987cb3b3f9074d69cd27e6ca2e4fbac0dc5b5047bd4dc3a9ce8a77f6bd9ab7ae3e6ca8e49b34bed529ca0da0fa428fec544a0324870",
            "file": "src/stories/examples/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-726a7eb16c220196ff73683cc90b678c272106d5d75412564baaef77d0a2bd53c8f16c8729a8ab3526da70cf1aca56e6855aa677698645a4b8c9d784c5b39053-1",
            "file": "projects/explorer/src/app/shared/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "accounts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentUserService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentUserService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "intercom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IntercomService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAdmin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "mixpanel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MixpanelService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { AuthService } from '@auth0/auth0-angular';\nimport { CurrentUserService } from '../../services/current-user.service';\nimport { MixpanelService } from '../../services/mixpanel.service';\nimport { IntercomService } from '../../services/intercom.service';\n\n@Component({\n  selector: 'exp-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(\n    public auth: AuthService,\n    public currentUserService: CurrentUserService,\n    private router: Router,\n    public mixpanel: MixpanelService,\n    public intercom: IntercomService\n  ) { }\n\n  accountName = '';\n  accounts: any;\n  isAdmin = false;\n\n  ngOnInit(): void {\n    this.intercom.boot();\n    this.mixpanel.init();\n    this.updateUser();\n    this.router.events.subscribe((event) => {\n      if (event instanceof NavigationStart) {\n        this.updateUser();\n      }\n    });\n  }\n\n    updateUser(): void {\n      this.currentUserService.isSuperAdmin().subscribe((isSuperAdmin: boolean) => {\n        // console.log('super admin', isSuperAdmin);\n        this.isAdmin = isSuperAdmin;\n      });\n      this.currentUserService.getAccount().subscribe((account: any) => {\n        if (account) {\n          this.mixpanel.identify(account.account);\n        }\n        this.accountName = account?.name;\n        if (this.accountName) {\n          this.currentUserService.getUser().subscribe(user => {\n            if (user) {\n              this.mixpanel.register({accountNumber: user.sub, accountName: user.nickname, accountEmail: user.name, $name: user.nickname, $email: user.name});\n              this.mixpanel.setPeople({$name: user.nickname, $email: user.name});\n            }\n          });\n        }\n        this.currentUserService.getAccounts().subscribe((accounts: any) => {\n          this.accounts = accounts;\n        });\n      });\n    }\n\n    switchAccount(): void {\n      this.currentUserService.clearAccountSelection();\n      this.router.navigate(['accounts']).then();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\n  background: #1b1f21;\n\n  .header-title {\n    color: white;\n    font-size: 16px;\n\n    .icon {\n      color: #1890ff;\n      font-size: 20px;\n\n      img {\n        width: 15px;\n        margin-right: 5px;\n        cursor: pointer;\n      }\n    }\n  }\n}\n.userWrapper {\n  float: right;\n\n  .userName {\n    margin-right: 25px\n  }\n  .userLogin {\n    position: relative;\n    top: 7px;\n  }\n  .userDropdown {\n    float: right;\n    margin-top: 11px;\n\n    .burger {\n      width: 35px;\n      height: 5px;\n      background-color: #fff;\n      margin: 6px 0;\n      border-radius: 5px;\n    }\n    .bar1 {\n      width: 20px;\n    }\n    .bar3 {\n      width: 28px;\n    }\n  }\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "intercom",
                        "type": "IntercomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intercom",
                        "type": "IntercomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<nz-header class=\"header\">\n    <div class=\"header-title\">\n        <span class=\"icon\">\n<!--            <i nz-icon nzType=\"bank\" nzTheme=\"outline\"></i>-->\n            <img src=\"/assets/images/e-logomarks/elogoblue.svg\" alt=\"Explorer\" routerLink=\"/dashboard\"/>\n        </span>\n        Civic Explorer {{(accountName ? ' | ' + accountName : '')}}\n        <div class=\"userWrapper\">\n            <span class=\"userName\" *ngIf=\"auth.user$ | async as user\">Welcome, {{ user.nickname }}!</span>\n            <span class=\"userLogin\"><exp-login *ngIf=\"(auth.isAuthenticated$ | async) === false\"></exp-login></span>\n            <div class=\"userDropdown\" *ngIf=\"auth.isAuthenticated$ | async\">\n                <a nz-dropdown nzTrigger=\"click\" [nzDropdownMenu]=\"menu\">\n                    <p class=\"burger bar1\"></p>\n                    <p class=\"burger bar2\"></p>\n                    <p class=\"burger bar3\"></p>\n                </a>\n                <nz-dropdown-menu #menu=\"nzDropdownMenu\">\n                    <ul nz-menu>\n                        <li nz-menu-item routerLink=\"/dashboard\" (click)=\"mixpanel.track('Header Nav', {clicked: 'dashboard'})\">Dashboard</li>\n                        <li nz-menu-item routerLink=\"/admin\" *ngIf=\"isAdmin\" (click)=\"mixpanel.track('Header Nav', {clicked: 'admin'})\">Admin</li>\n                        <li nz-menu-item\n                            (click)=\"switchAccount(); mixpanel.track('Header Nav', {clicked: 'switch account'})\"\n                            *ngIf=\"(currentUserService.isSuperAdmin() | async) === true || accounts?.length > 1\"\n                        >Switch Account</li>\n                        <li nz-menu-item routerLink=\"/faq\" (click)=\"mixpanel.track('Header Nav', {clicked: 'faq'})\">FAQ</li>\n                        <li nz-menu-divider></li>\n                        <li nz-menu-item><exp-logout></exp-logout></li>\n                    </ul>\n                </nz-dropdown-menu>\n            </div>\n        </div>\n    </div>\n</nz-header>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-2014ad4f0b61f2f7cc92acbf438fb474aabea616aa3dafca6177caa96656e0ce174211c2ebb4711979777ecbf7ba68a3cc6d2440bb44bdd0d0057457eb5a0537",
            "file": "projects/explorer/src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '@auth0/auth0-angular';\n\nimport { CurrentUserService } from '../shared/services/current-user.service';\nimport { IntercomService } from '../shared/services/intercom.service';\n\n@Component({\n  selector: 'exp-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n  constructor(\n    public auth: AuthService,\n    private router: Router,\n    private intercom: IntercomService,\n    private currentUserService: CurrentUserService,\n  ) {}\n\n  ngOnInit(): void {\n    this.currentUserService.getUser().subscribe((user: any) => {\n      if (user) {\n        this.currentUserService.getAccount().subscribe((account: any) => {\n          if (account) {\n            this.router.navigate(['/dashboard']);\n          } else {\n            this.router.navigate(['/accounts']);\n          }\n        });\n        if (user) {\n          this.intercom.fetchHash(user.email).subscribe((intercomHash: any) => {\n            this.intercom.updateForUser(user, intercomHash);\n          });\n        }\n      } else {\n        this.auth.loginWithPopup();\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n}\n\n.homepage {\n\n  .popup-warning {\n    text-align: center;\n    margin: 20px auto 0;\n    max-width: 400px;\n    background-color: #f7dddd;\n  }\n  .logo-wrapper {\n    background-color: rgba(45, 42, 43, 0.6);\n    width: 500px;\n    padding: 80px;\n    margin: 80px auto 20px;\n    border-radius: 50%;\n  }\n}\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "intercom",
                        "type": "IntercomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intercom",
                        "type": "IntercomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"homepage\">\n    <div *ngIf=\"(auth.isAuthenticated$ | async) === false\" class=\"popup-warning\">\n        <span>\n            If you're seeing this your popup blocker is stopping the login popup from showing.\n            You may have to allow popups on this page and/or click the login button at the top right of your screen.\n        </span>\n    </div>\n    <div class=\"logo-wrapper\">\n        <img src=\"/assets/images/e-logomarks/elogolightgrey.svg\" alt=\"Explorer\"/>\n    </div>\n</div>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-ce638c84da36a169930accf8e5a3c92f0cff0aa79c1e4527c2442a599f7f08bfae8dace2f2ccf4af052bfb72e6394611c7edfc1ed96c140059f96770fa1b3e8b-1",
            "file": "projects/admin/src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-home",
            "styleUrls": [
                "./home.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currOrgInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Organization | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "userInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserState>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Organization } from '../../shared/models/organization.model';\nimport { UserState } from '../../store/reducers/user.reducer';\nimport * as fromUserSelectors from '../../store/selectors/user.selectors';\n\n@Component({\n  selector: 'org-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.less'],\n})\nexport class HomeComponent {\n  userInfo$: Observable<UserState>;\n  currOrgInfo$: Observable<Organization | undefined>;\n\n  constructor(private store: Store<UserState>) {\n    // Store user/org info in observable variable to use in html template\n    this.userInfo$ = this.store.pipe(select(fromUserSelectors.selectUser));\n    this.currOrgInfo$ = this.store.pipe(select(fromUserSelectors.selectCurrentOrganization));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n}\n",
                    "styleUrl": "./home.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HomeComponent-1",
            "templateData": "<div class=\"home\">\n  <h1>Welcome to {{ (currOrgInfo$ | async)?.name }}, {{ (userInfo$ | async)?.nickname }}!</h1>\n</div>"
        },
        {
            "name": "HorizontalBarChartComponent",
            "id": "component-HorizontalBarChartComponent-40ccccc88e30c3ad00135aa8d4d19f3d9b9654064b2faf5920df38f32cfdbc3acd26ce0a8fe2bb4d9fb324a6e36eeec7d236dc2734cc7a2a92190cc185ff167c",
            "file": "projects/explorer/src/app/shared/components/horizontal-bar-chart/horizontal-bar-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-horizontal-bar-chart",
            "styleUrls": [
                "./horizontal-bar-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./horizontal-bar-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string[] | undefined",
                    "decorators": []
                },
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any[] | undefined",
                    "decorators": []
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any[] | undefined",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Highcharts.Options | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "chartOptionsTwo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Highcharts.Options | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "chartViewSelection",
                    "defaultValue": "'actual'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "highcharts",
                    "defaultValue": "Highcharts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "percentageSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showPercentage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "updateChart",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "changeToActual",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changeToPercentage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "chartViewChange",
                    "args": [
                        {
                            "name": "selected",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPercentage",
                    "args": [
                        {
                            "name": "num",
                            "type": "any[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "num",
                            "type": "any[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setChartOptions",
                    "args": [
                        {
                            "name": "series",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "barWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "categories",
                            "type": "string[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorArray",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dataLabels",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "barWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categories",
                            "type": "string[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorArray",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataLabels",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport {MixpanelService} from '../../services/mixpanel.service';\n\n@Component({\n  selector: 'exp-horizontal-bar-chart',\n  templateUrl: './horizontal-bar-chart.component.html',\n  styleUrls: ['./horizontal-bar-chart.component.scss']\n})\nexport class HorizontalBarChartComponent implements OnInit {\n  @Input() title: string | undefined;\n  @Input() categories: string[] | undefined;\n  @Input() series: any[] | undefined;\n  @Input() percentage: any[] | undefined;\n  @Input() location: string | undefined;\n  @Input() type: any | undefined;\n\n  highcharts: typeof Highcharts = Highcharts;\n  chartOptions: Highcharts.Options | undefined;\n  chartOptionsTwo: Highcharts.Options | undefined;\n  percentageSeries: any[] | undefined;\n  updateChart = false;\n  chartViewSelection = 'actual';\n  showPercentage = false;\n\n  constructor(private mixpanel: MixpanelService) { }\n\n  ngOnInit(): void {\n    if (this.location === undefined){ this.location = ''; }\n    this.percentageSeries = [];\n    // this.getPercentage(this.series);\n    const chartOneColors = ['#f94144', '#ff7846', '#f9a64a', '#feef56', '#d9ef36', '#7fc250', '#00c288', '#009ba0', '#00558e'];\n    const chartTwoColors = ['#01665e', '#80cdc1', '#e1ead7', '#dfc27d', '#bf812d'];\n    if (this.type) {\n      this.chartOptions = this.setChartOptions(this.series, 20, this.categories, chartTwoColors);\n      this.chartOptionsTwo = this.setChartOptions(this.percentage, 20, this.categories, chartTwoColors, 100, true);\n    } else {\n      this.getPercentage(this.series);\n      this.chartOptions = this.setChartOptions(this.series, 20, this.categories, chartOneColors);\n      this.chartOptionsTwo = this.setChartOptions(this.percentageSeries, 60, [this.location], chartOneColors, 100, true);\n    }\n  }\n  getPercentage(num: any[] | undefined): void {\n    let total = 0;\n    if (num) {\n      for (const a of num) {\n        total = total + a.data[0].y;\n      }\n      for (const a of num) {\n        const copyObj = JSON.parse(JSON.stringify(a));\n        copyObj.data[0] = Number(((copyObj.data[0].y / total) * 100).toFixed());\n        this.percentageSeries?.push(copyObj);\n      }\n    }\n  }\n  changeToPercentage(): void{\n    this.showPercentage = true;\n  }\n  changeToActual(): void{\n    this.showPercentage = false;\n  }\n  chartViewChange(selected: any): void {\n    this.mixpanel.track('Chart', {clicked: selected, chart: this.title});\n    if (selected === 'percentage') {\n      this.changeToPercentage();\n    } else {\n      this.changeToActual();\n    }\n  }\n  setChartOptions(series: any, barWidth: number, categories: string[] | undefined,\n                  colorArray: string[],  maxValue?: number, dataLabels?: boolean): any {\n    let chartHeight = 350;\n    if (this.title === 'Gender' || this.title === 'Civic Score By Gender') {\n      chartHeight = 250;\n    }\n    return {\n      chart: {\n        type: 'bar',\n        height: chartHeight,\n        width: 530\n      },\n      title: {\n        text: this.title,\n        align: 'left'\n      },\n      subtitle: {\n        text: this.location,\n        align: 'left',\n        style: {\n          color: '#c2c2c2',\n          fontWeight: 'light'\n        }\n      },\n      colors: colorArray,\n      credits: {\n        enabled: false\n      },\n      tooltip: {\n        useHTML: true,\n        formatter(): any {\n          // @ts-ignore\n          const formattedNumber = this.y.toLocaleString();\n          // @ts-ignore\n          return `<div><span>${this.key}: ${formattedNumber}</span></div>`;\n        }\n      },\n      xAxis: {\n        categories,\n        startOnTick: true\n      },\n      yAxis: {\n        max: maxValue,\n        min: 0,\n        title: {\n          text: ''\n        }\n      },\n      legend: {\n        reversed: true,\n        verticalAlign: 'top',\n        width: '100%',\n        itemStyle: {\n          fontSize: '10px',\n        }\n      },\n      plotOptions: {\n        bar: {\n          pointWidth: barWidth\n        },\n        series: {\n          states: {\n            inactive: {\n              opacity: 0.75\n            },\n            hover: {\n              halo: {\n                opacity: 0.95\n              }\n            },\n          },\n          stacking: 'normal',\n          dataLabels: {\n            enabled: dataLabels,\n            format: '{y}%'\n          }\n        }\n      },\n      series\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".view-by{\n  float: left;\n  margin-top: 5px;\n  margin-right: 10px;\n}\n.switch-field {\n  display: flex;\n  overflow: hidden;\n  float: left;\n}\n\n.switch-field input {\n  position: absolute !important;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  border: 0;\n  overflow: hidden;\n}\n\n.switch-field label {\n  background-color: #fff;\n  color: rgba(0, 0, 0, 0.6);\n  font-size: 14px;\n  line-height: 1;\n  text-align: center;\n  padding: 8px 16px;\n  margin-right: 15px;\n  //border: 1px solid rgba(0, 0, 0, 0.2);\n  //box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.3), 0 1px rgba(255, 255, 255, 0.1);\n  transition: all 0.1s ease-in-out;\n}\n\n.switch-field label:hover {\n  cursor: pointer;\n}\n\n.switch-field input:checked + label {\n  background-color: #d6f2ff;\n  box-shadow: none;\n}\n\n.switch-field label:first-of-type {\n  border-radius: 15px;\n}\n\n.switch-field label:last-of-type {\n  border-radius: 15px;\n}\n\n.ant-radio-button-checked {\n  background-color: #d6f2ff;\n  box-shadow: none;\n}\n.ant-radio-button-wrapper {\n  border: 1px solid #a5a5a5;\n}\n.ant-radio-button-wrapper:not(:first-child)::before{\n  content: none !important;\n}\n.horizontal-chart-wrapper{\n  background-color: white;\n  border-radius: 10px;\n  //box-shadow: 0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%), 0px 2px 4px -1px rgb(0 0 0 / 20%);\n  padding: 10px;\n}\n",
                    "styleUrl": "./horizontal-bar-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"horizontal-chart-wrapper\">\n    <highcharts-chart\n            *ngIf=\"chartOptions && !showPercentage\"\n            [Highcharts]=\"highcharts\"\n            [options]=\"chartOptions\"\n            [(update)]=\"updateChart\"\n    >\n    </highcharts-chart>\n    <highcharts-chart\n            *ngIf=\"chartOptionsTwo && showPercentage\"\n            [Highcharts]=\"highcharts\"\n            [options]=\"chartOptionsTwo\"\n            [(update)]=\"updateChart\"\n    >\n    </highcharts-chart>\n    <p style=\"text-align: center\"><span *ngIf=\"showPercentage\">%</span></p>\n    <p> <span class=\"view-by\">View by:</span>\n    <nz-radio-group [(ngModel)]=\"chartViewSelection\" class=\"switch-field\" (ngModelChange)=\"chartViewChange(chartViewSelection)\">\n        <label nz-radio-button nzValue=\"actual\">Count</label>\n        <label nz-radio-button nzValue=\"percentage\">Percentage</label>\n    </nz-radio-group>\n    </p>\n    <div style=\"clear: both\"></div>\n</div>\n"
        },
        {
            "name": "InvitationSentComponent",
            "id": "component-InvitationSentComponent-e5f97c87aab71e21da95f5db9b85c1b71eb7ff039d678ce23cbc3a3f11110683a74edb8b02ca4070a0b1c5712353851151ecde589360099fb61e2a4eefc59060",
            "file": "projects/admin/src/app/pages/invite/components/invitation-sent/invitation-sent.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-invitation-sent",
            "styleUrls": [
                "./invitation-sent.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./invitation-sent.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'org-invitation-sent',\n  templateUrl: './invitation-sent.component.html',\n  styleUrls: ['./invitation-sent.component.less'],\n})\nexport class InvitationSentComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".invitation-sent {\n  max-width: 400px;\n}\n",
                    "styleUrl": "./invitation-sent.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"invitation-sent\">\n  <div class=\"text-center\">\n    <img src=\"/assets/images/rocket.svg\" />\n  </div>\n  <h4 class=\"mt-3\" nz-typography>Your invitation was sent!</h4>\n  <p>Your newly invited members will have the next <strong>72 hours</strong> to create their accounts under Murmuration.</p>\n  <a class=\"w-100 mt-4\" routerLink=\"/dashboard/members\" nz-button nzType=\"primary\">Return to Managing My Account</a>\n</div>"
        },
        {
            "name": "InviteComponent",
            "id": "component-InviteComponent-7629cec138fdb43ffa085e3ff2077e16fa4f2d689715ad49163d2e532ac9ae04643acbb990a4da25600ee6b839c43f8b05b5f1f4ab44d553dcb0e66a5500d702",
            "file": "projects/admin/src/app/pages/invite/invite.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-invite",
            "styleUrls": [
                "./invite.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./invite.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emails",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "step",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "handleSendInvite",
                    "args": [
                        {
                            "name": "users",
                            "type": "Invite[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "users",
                            "type": "Invite[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSubmitEmails",
                    "args": [
                        {
                            "name": "emails",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emails",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { take, mergeMap } from 'rxjs/operators';\nimport { FindRolesGQL, SendInvitationGQL } from '../../shared/services/graphql/graphql.service';\nimport * as fromUserSelectors from '../../store/selectors/user.selectors';\nimport { UserState } from '../../store/reducers/user.reducer';\nimport { Role } from '../../shared/models/role.model';\n\nexport interface Invite {\n  email: string;\n  role: Role;\n}\n\n@Component({\n  selector: 'org-invite',\n  templateUrl: './invite.component.html',\n  styleUrls: ['./invite.component.less'],\n})\nexport class InviteComponent implements OnInit {\n  step = 0;\n  roles: Role[] = [];\n  isLoading = true;\n\n  emails: string[] = [];\n  constructor(private findRolesService: FindRolesGQL,\n              private sendInvitationService: SendInvitationGQL,\n              private store: Store<UserState>) {}\n\n  ngOnInit(): void {\n    this.store.pipe(select(fromUserSelectors.selectCurrentOrganizationUuid)).pipe(\n      mergeMap(org => this.findRolesService.fetch({organizationUuid: org }).pipe(take(1))),\n    ).subscribe(result => {\n      if (result?.data?.roles) {\n        this.roles = result.data.roles as Role[];\n        this.isLoading = false;\n      }\n    });\n  }\n\n  handleSubmitEmails(emails: string[]): void {\n    this.emails = emails;\n    this.step = 1;\n  }\n\n  handleSendInvite(users: Invite[]): void {\n    this.sendInvitationService.mutate({\n      input: {\n        organizationUuid: localStorage.getItem('selected_org') || '',\n        users: users.map(user => ({email: user.email, roleUuid: user.role.uuid})),\n      },\n    }).subscribe(() => {\n      this.step = 2;\n    });\n  }\n}\n\n\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".invite {\n}\n",
                    "styleUrl": "./invite.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "findRolesService",
                        "type": "FindRolesGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sendInvitationService",
                        "type": "SendInvitationGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "findRolesService",
                        "type": "FindRolesGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sendInvitationService",
                        "type": "SendInvitationGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"invite p-4\">\n  <div nz-row nzAlign=\"middle\">\n    <div nz-col nzFlex=\"auto\">\n      <nz-breadcrumb nz-page-header-breadcrumb>\n        <nz-breadcrumb-item>\n          Choose method\n        </nz-breadcrumb-item>\n        <nz-breadcrumb-item *ngIf=\"step > 0\">Assign roles</nz-breadcrumb-item>\n        <nz-breadcrumb-item *ngIf=\"step > 1\">Send invitation</nz-breadcrumb-item>\n      </nz-breadcrumb>\n    </div>\n    <div nz-col *ngIf=\"step !== 2\">\n      <a routerLink=\"/dashboard/members\" nz-button nzType=\"primary\">Exit</a>\n    </div>\n  </div>\n\n  <div class=\"p-4 d-flex justify-content-center mt-5\">\n    <nz-spin nzSimple *ngIf=\"isLoading\"></nz-spin>\n    <ng-container *ngIf=\"!isLoading\">\n      <org-invite-members *ngIf=\"step === 0\" (submitEmails)=\"handleSubmitEmails($event)\"></org-invite-members>\n      <org-assign-roles *ngIf=\"step === 1\" [emails]=\"emails\" (sendInvite)=\"handleSendInvite($event)\" [roles]=\"roles\"></org-assign-roles>\n      <org-invitation-sent *ngIf=\"step === 2\"></org-invitation-sent>\n    </ng-container>\n  </div>\n</div>"
        },
        {
            "name": "InviteMembersComponent",
            "id": "component-InviteMembersComponent-34d0761aaec7e473abaface28b297e9ed52f9e46e10e073231451ccc91c00e7ab722c00121e7c2b678e2417d4b3c283d91e6003b02137645cb8abc481d962109",
            "file": "projects/admin/src/app/pages/invite/components/invite-members/invite-members.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-invite-members",
            "styleUrls": [
                "./invite-members.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./invite-members.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "submitEmails",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "beforeUpload",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "currOrgInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Organization | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "emailForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport { NzUploadFile } from 'ng-zorro-antd/upload';\nimport { Observable } from 'rxjs';\nimport { Organization } from '../../../../shared/models/organization.model';\nimport { UserState } from '../../../../store/reducers/user.reducer';\nimport * as fromUserSelectors from '../../../../store/selectors/user.selectors';\n@Component({\n  selector: 'org-invite-members',\n  templateUrl: './invite-members.component.html',\n  styleUrls: ['./invite-members.component.less'],\n})\nexport class InviteMembersComponent implements OnInit {\n  @Output() submitEmails = new EventEmitter();\n  emailForm!: FormGroup;\n  currOrgInfo$: Observable<Organization | undefined>;\n\n  constructor(\n    private fb: FormBuilder,\n    private store: Store<UserState>) {\n    this.currOrgInfo$ = this.store.pipe(select(fromUserSelectors.selectCurrentOrganization));\n  }\n\n  ngOnInit(): void {\n    this.emailForm = this.fb.group({\n      emails: [null, [Validators.required]],\n    });\n  }\n\n  beforeUpload = (file: NzUploadFile): boolean => {\n    const myReader = new FileReader();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    myReader.readAsText(file as any);\n    myReader.onloadend = (e: ProgressEvent<FileReader>): void => {\n      const result = e?.target?.result as string;\n      this.submitEmails.emit(result.split('\\r\\n'));\n    };\n    return false;\n  };\n\n  submitForm(): void {\n    const emails = this.emailForm.controls.emails.value as string;\n\n    for (const i in this.emailForm.controls) {\n      if (Object.prototype.hasOwnProperty.call(this.emailForm.controls, i)) {\n        this.emailForm.controls[i].markAsDirty();\n        this.emailForm.controls[i].updateValueAndValidity();\n      }\n    }\n    if (this.emailForm.controls.emails.value) {\n      this.submitEmails.emit(emails.split(','));\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".invite-members {\n  max-width: 500px;\n}\n",
                    "styleUrl": "./invite-members.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"invite-members\">\n  <i nz-icon nzType=\"user-add\" nzTheme=\"outline\" class=\"fs-1\"></i>\n  <h4 class=\"mt-3\" nz-typography>Invite new members to {{ (currOrgInfo$ | async)?.name }}</h4>\n  <p class=\"mt-4\"><strong>a. Enter email addresses</strong></p>\n  <form\n    nz-form\n    nzLayout=\"vertical\" \n    [formGroup]=\"emailForm\"\n    (ngSubmit)=\"submitForm()\"\n  >\n    <nz-form-item>\n      <nz-form-label>Enter one or more email addresses; comma separated.</nz-form-label>\n      <nz-form-control nzErrorTip=\"Please input email list\">\n        <input nz-input placeholder=\"Email List\" formControlName=\"emails\" />\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-control>\n        <div class=\"text-end mt-3\">\n          <button nz-button nzType=\"primary\">Invite via email</button>\n        </div>\n      </nz-form-control>\n    </nz-form-item>\n  </form>\n  <p class=\"mt-5\"><strong>b. Import .csv files</strong></p>\n  <p>You can <a href=\"#\" target=\"_blank\">download CSV template</a>, to make sure your file is imported correctly. For more information on imports, come check out our blog and read more about it.</p>\n  <nz-upload\n    nzType=\"drag\"\n    [nzBeforeUpload]=\"beforeUpload\"\n  >\n    <img src=\"/assets/images/upload.svg\" alt=\"upload icon\"/>\n    <p class=\"ant-upload-text\">Drop .csv files to upload</p>\n    <p class=\"ant-upload-hint\">\n      or browse to choose a file\n    </p>\n  </nz-upload>\n</div>"
        },
        {
            "name": "JoinComponent",
            "id": "component-JoinComponent-b4c0756baef0ac03cca7272407a209caa23452348fb12f7e0b6e042e5a74bddb86887bc6023e0d87be09b1204273c945360b12985762d48cfcc640e74ce423f8",
            "file": "projects/admin/src/app/pages/join/join.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-join",
            "styleUrls": [
                "./join.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./join.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "emailPassNotValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isFormLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "joinForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "passwordFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "passwordVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "token",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "ngUnsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "authLogin",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { AcceptOrganizationUserInviteGQL, ValidateAssociationTokenGQL } from '../../shared/services/graphql/graphql.service';\nimport { BaseComponent } from '../../core/base/base.component';\nimport { AuthService } from '../../shared/services/auth/auth.service';\nimport { UserService } from '../../shared/services/user/user.service';\nimport { passwordValidator } from '../../utils/input';\n\n@Component({\n  selector: 'org-join',\n  templateUrl: './join.component.html',\n  styleUrls: ['./join.component.less'],\n})\nexport class JoinComponent extends BaseComponent implements OnInit {\n  isLoading = true;\n  isFormLoading = false;\n  token = '';\n\n  status = '';\n  passwordVisible = false;\n  password = '';\n  email = '';\n  name = '';\n\n  joinForm!: FormGroup;\n  showPassword = false;\n  emailPassNotValid = false;\n  passwordFocus = false;\n\n  error = '';\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private validateAssociationTokenService: ValidateAssociationTokenGQL,\n    private auth: AuthService,\n    private user: UserService,\n    private acceptInviteService: AcceptOrganizationUserInviteGQL,\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.isLoading = true;\n    this.token = this.route.snapshot.queryParams.token as string || '';\n\n    this.validateAssociationTokenService.fetch({token: this.token}).pipe(take(1)).subscribe(result => {\n      this.isLoading = false;\n      this.status = result.data.validateAssociationToken?.status || '';\n      this.email = result.data.validateAssociationToken?.email || '';\n      this.name = result.data.validateAssociationToken?.name || '';\n\n      if (this.status === 'EXISTING') {\n        this.joinForm = this.fb.group({\n          password: ['', [Validators.required, passwordValidator]],\n        });\n      }\n\n      if (this.status === 'NEW') {\n        this.joinForm = this.fb.group({\n          firstName: ['', [Validators.required]],\n          lastName: ['', [Validators.required]],\n          password: ['', [Validators.required, passwordValidator]],\n        });\n      }\n    });\n  }\n\n  login(): void {\n    if (this.joinForm.status === 'VALID') {\n      this.isFormLoading = true;\n      let firstName = '';\n      let lastName = '';\n\n      if (this.status === 'EXISTING') {\n        firstName = this.name;\n      } else if (this.status === 'NEW') {\n        firstName =  this.joinForm.get('firstName')?.value as string;\n        lastName = this.joinForm.get('lastName')?.value as string;\n      }\n\n      this.error = '';\n      this.acceptInviteService.mutate({input: {\n        token: this.token,\n        user: {\n          firstName,\n          lastName,\n          password: this.joinForm.get('password')?.value as string,\n        },\n      }}).subscribe(result => {\n        if (result?.errors && result?.errors.length > 0) {\n          this.error = result?.errors.join(' ');\n        } else {\n          this.emailPassNotValid = false;\n          this.authLogin(this.email, this.joinForm.get('password')?.value as string);\n        }\n        this.isFormLoading = false;\n      });\n    }\n  }\n\n  authLogin(email: string, password: string): void {\n    this.auth.login(email, password)\n      .then(() => {\n        this.user.getUserInfo();\n        this.router.navigate(['/home']);\n        this.isFormLoading = false;\n      })\n      .catch(err => {\n        console.log(err);\n        this.emailPassNotValid = true;\n        this.isFormLoading = false;\n      });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".join {\n  width: 840px;\n  max-width: 100%;\n  height: 500px;\n}\n",
                    "styleUrl": "./join.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validateAssociationTokenService",
                        "type": "ValidateAssociationTokenGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "user",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "acceptInviteService",
                        "type": "AcceptOrganizationUserInviteGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validateAssociationTokenService",
                        "type": "ValidateAssociationTokenGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "user",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "acceptInviteService",
                        "type": "AcceptOrganizationUserInviteGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-4 d-flex align-items-center justify-content-center h-100\">\n  <div nz-row class=\"join\">\n    <div nz-col nzSpan=\"15\">\n      <div class=\"d-flex align-items-center mt-3\">\n        <i nz-icon nzType=\"radar-chart\" nzTheme=\"outline\"></i>\n        <h4 class=\"mb-0 ps-2 d-block\" nz-typography>Organizer</h4>\n      </div>\n    </div>\n    <div nz-col nzSpan=\"9\">\n      <div class=\"d-flex align-items-center justify-content-center h-100\" *ngIf=\"isLoading\">\n        <nz-spin nzSimple></nz-spin>\n      </div>\n      <ng-container *ngIf=\"!isLoading\">\n        <div class=\"d-flex flex-column justify-content-center h-100\" *ngIf=\"status === 'EXPIRED'\">\n          <h4 nz-typography>This invitation has expired</h4>\n          <p nz-typography>Try contacting the person who sent the invitation</p>\n        </div>\n        <ng-container *ngIf=\"status !== 'EXPIRED'\">\n          <div *ngIf=\"status === 'NEW'\">\n            <h4 nz-typography>Create my account</h4>\n            <p class=\"fw-bold\">{{ email }}</p>\n          </div>\n\n          <div *ngIf=\"status === 'EXISTING'\">\n            <h4 nz-typography>Hi {{ name }},</h4>\n            <p>We have found an existing account under:</p>\n            <p class=\"fw-bold\">{{ email }}</p>\n          </div>\n\n          <div *ngIf=\"status === 'EXISTING' || status === 'NEW'\">\n            <form nz-form [formGroup]=\"joinForm\" (ngSubmit)=\"login()\">\n              <ng-container *ngIf=\"status === 'NEW'\">\n                <nz-form-item>\n                  <nz-form-control>\n                    <input nz-input nzRequired placeholder=\"First Name\" formControlName=\"firstName\" />\n                  </nz-form-control>\n                </nz-form-item>\n\n                <nz-form-item>\n                  <nz-form-control>\n                    <input nz-input nzRequired placeholder=\"Last Name\" formControlName=\"lastName\" />\n                  </nz-form-control>\n                </nz-form-item>\n              </ng-container>\n\n              <nz-form-item>\n                <nz-form-control [nzExtra]=\"extraTemplate\">\n                  <nz-input-group\n                    [nzSuffix]=\"suffixTemplate\"\n                    nz-popover\n                    [nzPopoverContent]=\"contentTemplate\"\n                    [nzPopoverVisible]=\"joinForm.controls['password']?.touched && (passwordFocus || !joinForm.controls['password'].valid)\"\n                    [nzPopoverTrigger]=\"null\"\n                    nzPopoverPlacement=\"rightTop\"\n                  >\n                    <input\n                      nz-input\n                      nzRequired\n                      placeholder=\"Password\"\n                      formControlName=\"password\"\n                      [type]=\"passwordVisible ? 'text' : 'password'\"\n                      (focus)=\"passwordFocus = true\" \n                      (blur)=\"passwordFocus = false\"\n                    />\n                  </nz-input-group>\n                  <ng-template #suffixTemplate>\n                    <a nzType=\"primary\" (click)=\"passwordVisible = !passwordVisible\">View Password</a>\n                  </ng-template>\n\n                  <ng-template #contentTemplate>\n                    <org-password-validator [control]=\"joinForm.controls['password']\"></org-password-validator>\n                  </ng-template>      \n\n                  <ng-template #extraTemplate>\n                    <div class=\"validation-error mb-1\" *ngIf=\"emailPassNotValid\">There was error while logging. Please check information and try again.</div>      \n                    <a routerLink=\"/login/recover-password\" nzType=\"primary\" class=\"mt-1\">Forgot password?</a>      \n                  </ng-template>\n                </nz-form-control>\n              </nz-form-item>\n\n              <p class=\"mt-2\">\n                By clicking below you agree to the Helm <a href=\"#\">Terms of Service</a> and <a href=\"#\">Privacy Policy</a>.\n              </p>\n\n              <div nz-typography nzType=\"danger\" class=\"mb-1\" *ngIf=\"error\">\n                {{ error }}\n              </div>\n\n              <nz-form-item>\n                <nz-form-control>\n                  <button\n                    nz-button\n                    [disabled]=\"joinForm.status === 'INVALID'\"\n                    nzType=\"primary\"\n                    class=\"login-btn\"\n                    [nzLoading]=\"isFormLoading\"\n                  >\n                    {{ status === 'NEW' ? \"Join\" : \"Continue Logging In\" }}\n                  </button>\n                </nz-form-control>\n              </nz-form-item>\n            </form>  \n          </div>\n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "LoadingSpinnerComponent",
            "id": "component-LoadingSpinnerComponent-c0f783ed5443e27f113e13f827ad1e365d96ec9407cbd2f64e653f1caf943ffc0ffd7391c906ee8c77a8927ffa78bc403d57d5ac68a58394f795b21e4cc2faf8",
            "file": "projects/explorer/src/app/shared/components/loading-spinner/loading-spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-loading-spinner",
            "styleUrls": [
                "./loading-spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "defaultValue": "'Loading Map'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'exp-loading-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.scss']\n})\nexport class LoadingSpinnerComponent implements OnInit {\n  @Input() title = 'Loading Map';\n\n  constructor() { }\n\n  ngOnInit(): void {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": " /* Config */\n$sk-color: red;\n$sk-size: 100px;\n\n/* Utility class for centering */\n.sk-center { margin: auto; }\n.sk-plane {\n  width: $sk-size;\n  height: $sk-size;\n  background-color: $sk-color;\n  animation: sk-plane 1.2s infinite ease-in-out;\n}\n\n@keyframes sk-plane {\n  0% {\n    transform: perspective(120px) rotateX(0deg) rotateY(0deg);\n  } 50% {\n      transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);\n    } 100% {\n        transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\n      }\n}\n.sk-chase {\n  width: $sk-size;\n  height: $sk-size;\n  position: relative;\n  animation: sk-chase 2.5s infinite linear both;\n}\n\n.sk-chase-dot {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  animation: sk-chase-dot 2.0s infinite ease-in-out both;\n}\n\n.sk-chase-dot:before {\n  content: '';\n  display: block;\n  width: 25%;\n  height: 25%;\n  background-color: $sk-color;\n  border-radius: 100%;\n  animation: sk-chase-dot-before 2.0s infinite ease-in-out both;\n}\n\n.sk-chase-dot:nth-child(1) { animation-delay: -1.1s; }\n.sk-chase-dot:nth-child(2) { animation-delay: -1.0s; }\n.sk-chase-dot:nth-child(3) { animation-delay: -0.9s; }\n.sk-chase-dot:nth-child(4) { animation-delay: -0.8s; }\n.sk-chase-dot:nth-child(5) { animation-delay: -0.7s; }\n.sk-chase-dot:nth-child(6) { animation-delay: -0.6s; }\n.sk-chase-dot:nth-child(1):before { animation-delay: -1.1s; }\n.sk-chase-dot:nth-child(2):before { animation-delay: -1.0s; }\n.sk-chase-dot:nth-child(3):before { animation-delay: -0.9s; }\n.sk-chase-dot:nth-child(4):before { animation-delay: -0.8s; }\n.sk-chase-dot:nth-child(5):before { animation-delay: -0.7s; }\n.sk-chase-dot:nth-child(6):before { animation-delay: -0.6s; }\n\n@keyframes sk-chase {\n  100% { transform: rotate(360deg); }\n}\n\n@keyframes sk-chase-dot {\n  80%, 100% { transform: rotate(360deg); }\n}\n\n@keyframes sk-chase-dot-before {\n  50% {\n    transform: scale(0.4);\n  } 100%, 0% {\n      transform: scale(1.0);\n    }\n}\n\n.sk-bounce {\n  width: $sk-size;\n  height: $sk-size;\n  position: relative;\n}\n\n.sk-bounce-dot {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: $sk-color;\n  opacity: 0.6;\n  position: absolute;\n  top: 0;\n  left: 0;\n  animation: sk-bounce 2s infinite cubic-bezier(0.455, 0.03, 0.515, 0.955);\n}\n\n.sk-bounce-dot:nth-child(2) { animation-delay: -1.0s; }\n\n@keyframes sk-bounce {\n  0%, 100% {\n    transform: scale(0);\n  } 45%, 55% {\n      transform: scale(1);\n    }\n}\n.sk-wave {\n  width: $sk-size;\n  height: $sk-size;\n  display: flex;\n  justify-content: space-between;\n}\n\n.sk-wave-rect {\n  background-color: $sk-color;\n  height: 100%;\n  width: 15%;\n  animation: sk-wave 1.2s infinite ease-in-out;\n}\n\n.sk-wave-rect:nth-child(1) { animation-delay: -1.2s; }\n.sk-wave-rect:nth-child(2) { animation-delay: -1.1s; }\n.sk-wave-rect:nth-child(3) { animation-delay: -1.0s; }\n.sk-wave-rect:nth-child(4) { animation-delay: -0.9s; }\n.sk-wave-rect:nth-child(5) { animation-delay: -0.8s; }\n\n@keyframes sk-wave {\n  0%, 40%, 100% {\n    transform: scaleY(0.4);\n  } 20% {\n      transform: scaleY(1);\n    }\n}\n\n.sk-pulse {\n  width: $sk-size;\n  height: $sk-size;\n  background-color: $sk-color;\n  border-radius: 100%;\n  animation: sk-pulse 1.2s infinite cubic-bezier(0.455, 0.03, 0.515, 0.955);\n}\n\n@keyframes sk-pulse {\n  0% {\n    transform: scale(0);\n  } 100% {\n      transform: scale(1);\n      opacity: 0;\n    }\n}\n\n.sk-flow {\n  width: $sk-size * 1.3;\n  height: $sk-size * 1.3;\n  display: flex;\n  justify-content: space-between;\n}\n\n.sk-flow-dot {\n  width: 25%;\n  height: 25%;\n  background-color: $sk-color;\n  border-radius: 50%;\n  animation: sk-flow 1.4s cubic-bezier(0.455, 0.03, 0.515, 0.955) 0s infinite both;\n}\n\n.sk-flow-dot:nth-child(1) { animation-delay: -0.30s; }\n.sk-flow-dot:nth-child(2) { animation-delay: -0.15s; }\n\n@keyframes sk-flow {\n  0%, 80%, 100% {\n    transform: scale(0.3); }\n  40% {\n    transform: scale(1);\n  }\n}\n.sk-swing {\n  width: $sk-size;\n  height: $sk-size;\n  position: relative;\n  animation: sk-swing 1.8s infinite linear;\n}\n\n.sk-swing-dot {\n  width: 45%;\n  height: 45%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  background-color: $sk-color;\n  border-radius: 100%;\n  animation: sk-swing-dot 2s infinite ease-in-out;\n}\n\n.sk-swing-dot:nth-child(2) {\n  top: auto;\n  bottom: 0;\n  animation-delay: -1s;\n}\n\n@keyframes sk-swing {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes sk-swing-dot {\n  0%, 100% {\n    transform: scale(0.2); }\n  50% {\n    transform: scale(1);\n  }\n}\n.sk-circle {\n  width: $sk-size;\n  height: $sk-size;\n  position: relative;\n}\n\n.sk-circle-dot {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n\n.sk-circle-dot:before {\n  content: '';\n  display: block;\n  width: 15%;\n  height: 15%;\n  background-color: $sk-color;\n  border-radius: 100%;\n  animation: sk-circle 1.2s infinite ease-in-out both;\n}\n\n.sk-circle-dot:nth-child(1) { transform: rotate(30deg); }\n.sk-circle-dot:nth-child(2) { transform: rotate(60deg); }\n.sk-circle-dot:nth-child(3) { transform: rotate(90deg); }\n.sk-circle-dot:nth-child(4) { transform: rotate(120deg); }\n.sk-circle-dot:nth-child(5) { transform: rotate(150deg); }\n.sk-circle-dot:nth-child(6) { transform: rotate(180deg); }\n.sk-circle-dot:nth-child(7) { transform: rotate(210deg); }\n.sk-circle-dot:nth-child(8) { transform: rotate(240deg); }\n.sk-circle-dot:nth-child(9) { transform: rotate(270deg); }\n.sk-circle-dot:nth-child(10) { transform: rotate(300deg); }\n.sk-circle-dot:nth-child(11) { transform: rotate(330deg); }\n.sk-circle-dot:nth-child(1):before { animation-delay: -1.1s; }\n.sk-circle-dot:nth-child(2):before { animation-delay: -1s; }\n.sk-circle-dot:nth-child(3):before { animation-delay: -0.9s; }\n.sk-circle-dot:nth-child(4):before { animation-delay: -0.8s; }\n.sk-circle-dot:nth-child(5):before { animation-delay: -0.7s; }\n.sk-circle-dot:nth-child(6):before { animation-delay: -0.6s; }\n.sk-circle-dot:nth-child(7):before { animation-delay: -0.5s; }\n.sk-circle-dot:nth-child(8):before { animation-delay: -0.4s; }\n.sk-circle-dot:nth-child(9):before { animation-delay: -0.3s; }\n.sk-circle-dot:nth-child(10):before { animation-delay: -0.2s; }\n.sk-circle-dot:nth-child(11):before { animation-delay: -0.1s; }\n\n@keyframes sk-circle {\n  0%, 80%, 100% {\n    transform: scale(0); }\n  40% {\n    transform: scale(1);\n  }\n}\n.sk-circle-fade {\n  width: $sk-size;\n  height: $sk-size;\n  position: relative;\n}\n\n.sk-circle-fade-dot {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n\n.sk-circle-fade-dot:before {\n  content: '';\n  display: block;\n  width: 15%;\n  height: 15%;\n  background-color: $sk-color;\n  border-radius: 100%;\n  animation: sk-circle-fade 1.2s infinite ease-in-out both;\n}\n\n.sk-circle-fade-dot:nth-child(1)  { transform: rotate(30deg);  }\n.sk-circle-fade-dot:nth-child(2)  { transform: rotate(60deg);  }\n.sk-circle-fade-dot:nth-child(3)  { transform: rotate(90deg);  }\n.sk-circle-fade-dot:nth-child(4)  { transform: rotate(120deg); }\n.sk-circle-fade-dot:nth-child(5)  { transform: rotate(150deg); }\n.sk-circle-fade-dot:nth-child(6)  { transform: rotate(180deg); }\n.sk-circle-fade-dot:nth-child(7)  { transform: rotate(210deg); }\n.sk-circle-fade-dot:nth-child(8)  { transform: rotate(240deg); }\n.sk-circle-fade-dot:nth-child(9)  { transform: rotate(270deg); }\n.sk-circle-fade-dot:nth-child(10) { transform: rotate(300deg); }\n.sk-circle-fade-dot:nth-child(11) { transform: rotate(330deg); }\n.sk-circle-fade-dot:nth-child(1):before  { animation-delay: -1.1s; }\n.sk-circle-fade-dot:nth-child(2):before  { animation-delay: -1.0s; }\n.sk-circle-fade-dot:nth-child(3):before  { animation-delay: -0.9s; }\n.sk-circle-fade-dot:nth-child(4):before  { animation-delay: -0.8s; }\n.sk-circle-fade-dot:nth-child(5):before  { animation-delay: -0.7s; }\n.sk-circle-fade-dot:nth-child(6):before  { animation-delay: -0.6s; }\n.sk-circle-fade-dot:nth-child(7):before  { animation-delay: -0.5s; }\n.sk-circle-fade-dot:nth-child(8):before  { animation-delay: -0.4s; }\n.sk-circle-fade-dot:nth-child(9):before  { animation-delay: -0.3s; }\n.sk-circle-fade-dot:nth-child(10):before { animation-delay: -0.2s; }\n.sk-circle-fade-dot:nth-child(11):before { animation-delay: -0.1s; }\n\n@keyframes sk-circle-fade {\n  0%, 39%, 100% {\n    opacity: 0;\n    transform: scale(0.6);\n  } 40% {\n      opacity: 1;\n      transform: scale(1);\n    }\n}\n.sk-grid {\n  width: $sk-size;\n  height: $sk-size;\n}\n.sk-grid-cube {\n  width: 33.33%;\n  height: 33.33%;\n  background-color: $sk-color;\n  float: left;\n  animation: sk-grid 1.3s infinite ease-in-out;\n}\n.sk-grid-cube:nth-child(1) { animation-delay: 0.2s; }\n.sk-grid-cube:nth-child(2) { animation-delay: 0.3s; }\n.sk-grid-cube:nth-child(3) { animation-delay: 0.4s; }\n.sk-grid-cube:nth-child(4) { animation-delay: 0.1s; }\n.sk-grid-cube:nth-child(5) { animation-delay: 0.2s; }\n.sk-grid-cube:nth-child(6) { animation-delay: 0.3s; }\n.sk-grid-cube:nth-child(7) { animation-delay: 0.0s; }\n.sk-grid-cube:nth-child(8) { animation-delay: 0.1s; }\n.sk-grid-cube:nth-child(9) { animation-delay: 0.2s; }\n\n@keyframes sk-grid {\n  0%, 70%, 100% {\n    transform: scale3D(1, 1, 1);\n  } 35% {\n      transform: scale3D(0, 0, 1);\n    }\n}\n\n.sk-fold {\n  width: $sk-size;\n  height: $sk-size;\n  position: relative;\n  transform: rotateZ(45deg);\n}\n.sk-fold-cube {\n  float: left;\n  width: 50%;\n  height: 50%;\n  position: relative;\n  transform: scale(1.1);\n}\n.sk-fold-cube:before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: $sk-color;\n  animation: sk-fold 2.4s infinite linear both;\n  transform-origin: 100% 100%;\n}\n .sk-fold-cube:nth-child(2) {background-color: #2d2a2b}\n .sk-fold-cube:nth-child(4) {background-color: #2d2a2b}\n .sk-fold-cube:nth-child(3) {background-color: #2d2a2b}\n .sk-fold-cube:nth-child(1) {background-color: #2d2a2b}\n\n .sk-fold-cube:nth-child(2):before {background-color: #ffd37a}\n .sk-fold-cube:nth-child(4):before {background-color: #82d99c}\n .sk-fold-cube:nth-child(3):before {background-color: #466cc7}\n .sk-fold-cube:nth-child(1):before {background-color: #fff}\n\n.sk-fold-cube:nth-child(2) { transform: scale(1.1) rotateZ(90deg); }\n.sk-fold-cube:nth-child(4) { transform: scale(1.1) rotateZ(180deg); }\n.sk-fold-cube:nth-child(3) { transform: scale(1.1) rotateZ(270deg); }\n.sk-fold-cube:nth-child(2):before { animation-delay: 0.3s; }\n.sk-fold-cube:nth-child(4):before { animation-delay: 0.6s; }\n.sk-fold-cube:nth-child(3):before { animation-delay: 0.9s; }\n\n@keyframes sk-fold {\n  0%, 10% {\n    transform: perspective(140px) rotateX(-180deg);\n    opacity: 0;\n  } 25%, 75% {\n      transform: perspective(140px) rotateX(0deg);\n      opacity: 1;\n    } 90%, 100% {\n        transform: perspective(140px) rotateY(180deg);\n        opacity: 0;\n      }\n}\n.sk-wander {\n  width: $sk-size;\n  height: $sk-size;\n  position: relative;\n}\n.sk-wander-cube {\n  background-color: $sk-color;\n  width: 20%;\n  height: 20%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  --sk-wander-distance: $sk-size * 0.75;\n  animation: sk-wander 2.0s ease-in-out -2.0s infinite both;\n}\n.sk-wander-cube:nth-child(2) { animation-delay: -0.5s; }\n.sk-wander-cube:nth-child(3) { animation-delay: -1.0s; }\n\n@keyframes sk-wander {\n  0% {\n    transform: rotate(0deg);\n  } 25% {\n      transform: translateX(var(--sk-wander-distance)) rotate(-90deg) scale(0.6);\n    } 50% { /* Make FF rotate in the right direction */\n        transform: translateX(var(--sk-wander-distance)) translateY(var(--sk-wander-distance)) rotate(-179deg);\n      } 50.1% {\n          transform: translateX(var(--sk-wander-distance)) translateY(var(--sk-wander-distance)) rotate(-180deg);\n        } 75% {\n            transform: translateX(0) translateY(var(--sk-wander-distance)) rotate(-270deg) scale(0.6);\n          } 100% {\n              transform: rotate(-360deg);\n            }\n}\nh1{\n  text-align: center;\n  margin-top: 35px;\n}\n",
                    "styleUrl": "./loading-spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sk-fold sk-center\">\n    <div class=\"sk-fold-cube\"></div>\n    <div class=\"sk-fold-cube\"></div>\n    <div class=\"sk-fold-cube\"></div>\n    <div class=\"sk-fold-cube\"></div>\n</div>\n<h1>{{title}}</h1>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-7da211c47438a6f307b6d74b4928c4ccde919b776db08b5d7be0d549b33592df80392e7df6eaed761f654ef932adee6a7b6b8b05211920934f02f6d80790ca2b",
            "file": "projects/admin/src/app/login/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-login",
            "styleUrls": [
                "./login.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emailPassNotValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "ngUnsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogin using Auth0 to authenticate user\n\n",
                    "description": "<p>Login using Auth0 to authenticate user</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "navigateHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUse router to navigate to the home page or select organization if user has access to multiple orgs\n\n",
                    "description": "<p>Use router to navigate to the home page or select organization if user has access to multiple orgs</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3079,
                                "end": 3086,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showLoginError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow error explaining that login info may be incorrect\n\n",
                    "description": "<p>Show error explaining that login info may be incorrect</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4040,
                                "end": 4047,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "togglePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nView password when typing to see if it's correct\n\n",
                    "description": "<p>View password when typing to see if it&#39;s correct</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { takeUntil } from 'rxjs/operators';\nimport * as fromLoginSelectors from '../store/selectors/login.selectors';\nimport * as fromUserSelectors from '../../store/selectors/user.selectors';\nimport * as fromAppSelectors from '../../store/selectors/app.selectors';\nimport { UserState } from '../../store/reducers/user.reducer';\nimport { BaseComponent } from '../../core/base/base.component';\nimport { AuthService } from '../../shared/services/auth/auth.service';\nimport { UserService } from '../../shared/services/user/user.service';\nimport { Organization } from '../../shared/models/organization.model';\n\n@Component({\n  selector: 'org-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.less'],\n})\nexport class LoginComponent extends BaseComponent implements OnInit {\n  loginForm: FormGroup;\n  showPassword = false;\n  emailPassNotValid = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private auth: AuthService,\n    private store: Store<UserState>,\n    private userService: UserService) {\n    super();\n    this.loginForm = this.fb.group({\n      email: [null, [Validators.email, Validators.required]],\n      password: [null, [Validators.required]],\n    });\n  }\n\n  ngOnInit(): void {\n    // Select login and org success value from store and if successful, navigate to home page\n    this.store.pipe(select(fromAppSelectors.selectLoginOrgSuccess), takeUntil(this.ngUnsubscribe$))\n      .subscribe(success => {\n        if (success) {\n          this.userService.getUserInfo();\n          this.navigateHome();\n        }\n      });\n\n    // Select login failure value from store and if login fails, show error\n    this.store.pipe(select(fromLoginSelectors.selectLoginFailure), takeUntil(this.ngUnsubscribe$))\n      .subscribe(failure => {\n        if (failure.failure) {\n          this.showLoginError();\n        }\n      });\n  }\n\n  /**\n   * Login using Auth0 to authenticate user\n   *\n   * @memberof LoginComponent\n   */\n  login(): void {\n    // Update form to show correct validation\n    for (const i in this.loginForm.controls) {\n      if (Object.prototype.hasOwnProperty.call(this.loginForm.controls, i)) {\n        this.loginForm.controls[i].markAsDirty();\n        this.loginForm.controls[i].updateValueAndValidity();\n      }\n    }\n    // If form is filled out correctly, try to log in\n    if (this.loginForm.status === 'VALID') {\n      // Use auth service to send credentials to Auth0\n      this.auth.login(this.loginForm.get('email')?.value as string, this.loginForm.get('password')?.value as string);\n    }\n  }\n\n  /**\n   * View password when typing to see if it's correct\n   *\n   * @memberof LoginComponent\n   */\n  togglePassword(): void {\n    this.showPassword = !this.showPassword;\n  }\n\n  /**\n   * Use router to navigate to the home page or select organization if user has access to multiple orgs\n   *\n   * @private\n   * @memberof LoginComponent\n   */\n  private navigateHome(): void {\n    this.emailPassNotValid = false;\n    this.store.pipe(select(fromUserSelectors.selectActivePendingOrganizations), takeUntil(this.ngUnsubscribe$))\n      .subscribe((org: Organization[]) => {\n        // If user has access to more than one organization or none, we show them the select organizatiions screen\n        if (org?.length > 1 || org?.length === 0) {\n          this.router.navigate(['/select-organization']);\n        } else if (org?.length === 1) {\n          const orgUuid = org[0].uuid;\n          // If user has access to only one organization we set the selected org uuid and show them the dashboard screen\n          localStorage.setItem('selected_org', orgUuid);\n          this.userService.addSelectedOrganizationUuid(orgUuid);\n          this.router.navigate(['/home']);\n        }\n      });\n  }\n\n  /**\n   * Show error explaining that login info may be incorrect\n   *\n   * @private\n   * @memberof LoginComponent\n   */\n  private showLoginError(): void {\n    this.emailPassNotValid = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n}\n\n.login-to-org {\n  margin-bottom: 50px;\n}\n\n.view-password {\n  cursor: pointer;\n}\n\n.forgot-password {\n  font-size: 12px;\n}\n\n.login-btn {\n  width: 100%;\n}\n\n.validation-error {\n  background-color: #FFE6E6;\n  color: #000;\n  margin-bottom: 12px;\n  margin-top: 2px;\n  max-width: 305px;\n  padding: 8px 12px;\n}",
                    "styleUrl": "./login.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"organizer-info\"></div>\n<div class=\"login\">\n  <h1 class=\"login-to-org\">Log in to Organizer</h1>\n  <form nz-form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n    <nz-form-item>\n      <nz-form-control [nzErrorTip]=\"emailNotValid\">\n        <input nz-input nzRequired placeholder=\"Email address\" formControlName=\"email\" type=\"email\"/>\n        <ng-template #emailNotValid><div class=\"validation-error\">Please enter a valid email</div></ng-template>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-control [nzExtra]=\"forgotPasswordTemp\">\n        <nz-input-group [nzSuffix]=\"viewPasswordTemp\">\n          <input nz-input nzRequired placeholder=\"Password\" formControlName=\"password\" [type]=\"showPassword ? 'text' : 'password'\"/>\n        </nz-input-group>\n        <ng-template #viewPasswordTemp>\n          <span class=\"view-password\" (click)=\"togglePassword()\">View Password</span>\n        </ng-template>\n        <ng-template #forgotPasswordTemp>\n          <a class=\"forgot-password\" routerLink=\"/login/recover-password\">Forgot Password?</a>\n        </ng-template>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item *ngIf=\"emailPassNotValid\">\n      <div class=\"validation-error\">We couldn't find an account matching the email address and password you entered. Please check your email and password and try again.</div>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-control>\n        <button nz-button [disabled]=\"loginForm.status === 'INVALID'\" nzType=\"primary\" class=\"login-btn\">Log In</button>\n      </nz-form-control>\n    </nz-form-item>\n  </form>  \n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-6836b52a68ce5bfb3a9f54cb58d3f21aa1169dce38a9dc5778dd59bf52519a5d497704cc3848d9d2f0b248419d9d3af1068e666c850850029d15070df882ec54-1",
            "file": "projects/explorer/src/app/shared/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { AuthService } from '@auth0/auth0-angular';\n// import { IntercomService } from '../../services/intercom.service';\n// import { MixpanelService } from '../../services/mixpanel.service';\n\n@Component({\n  selector: 'exp-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(\n    public auth: AuthService,\n    // private mixpanel: MixpanelService\n  ) {}\n\n  ngOnInit(): void {}\n\n  login(): void {\n    // this.mixpanel.track('Header Nav', {clicked: 'login'});\n    this.auth.loginWithPopup();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button{\n  line-height: normal;\n  background-color: #90be6d;\n  border: none;\n  padding: 15px 20px;\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LoginComponent-1",
            "templateData": "<button (click)=\"login()\">Log in</button>\n\n\n"
        },
        {
            "name": "LogoutComponent",
            "id": "component-LogoutComponent-b64ede2bb5cd7d0bc01ff3efe86dbea258a355891f98f24398b8d56223630e1ac303ffcc060a58633bf3993672b4c05edff647464789eacd4b173fd9a65c1be9",
            "file": "projects/admin/src/app/logout/logout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-logout",
            "styleUrls": [
                "./logout.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./logout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCall auth service to logout with auth0\n\n",
                    "description": "<p>Call auth service to logout with auth0</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../shared/services/auth/auth.service';\n\n@Component({\n  selector: 'org-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.less']\n})\nexport class LogoutComponent implements OnInit {\n\n  constructor(public auth: AuthService) { }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Call auth service to logout with auth0\n   *\n   * @memberof LogoutComponent\n   */\n  logout() {\n    this.auth.logout();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./logout.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span (click)=\"logout()\">Log Out</span>"
        },
        {
            "name": "LogoutComponent",
            "id": "component-LogoutComponent-3974b9883e79a963bc357afc1c51ae0896f8215f818bb642bf7d82f76512c71885fb0ffd08f0188f742679b7e1864c3434a149be70a27946d068e293009c8542-1",
            "file": "projects/explorer/src/app/shared/components/logout/logout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-logout",
            "styleUrls": [
                "./logout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./logout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject, OnDestroy } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { AuthService } from '@auth0/auth0-angular';\nimport { CurrentUserService } from '../../services/current-user.service';\nimport { IntercomService } from '../../services/intercom.service';\nimport { MixpanelService } from '../../services/mixpanel.service';\n\n@Component({\n  selector: 'exp-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.scss'],\n})\nexport class LogoutComponent implements OnInit, OnDestroy {\n\n  constructor(\n    @Inject(DOCUMENT) private doc: Document,\n    public auth: AuthService,\n    private currentUserService: CurrentUserService,\n    private intercom: IntercomService,\n    private mixpanel: MixpanelService,\n  ) {}\n\n  ngOnInit(): void {\n  }\n\n  logout(): void {\n    this.intercom.shutdown();\n    this.intercom.updateForVisitor();\n    this.mixpanel.track('Header Nav', {clicked: 'logout'});\n    this.auth.logout({ returnTo: this.doc.location.origin });\n  }\n\n  ngOnDestroy(): void {\n    this.currentUserService.destroy();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./logout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "intercom",
                        "type": "IntercomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentUserService",
                        "type": "CurrentUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intercom",
                        "type": "IntercomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LogoutComponent-1",
            "templateData": "<!--<button (click)=\"logout()\">Log Out</button>-->\n<span (click)=\"logout()\">Log Out</span>\n"
        },
        {
            "name": "MaintenanceComponent",
            "id": "component-MaintenanceComponent-74f2436a6b62c4c9edacb1f8ace056be5989d4146a4bdd4ccd78b3089a45d72bba6c17286814d3040420dab78b7e4cf57a62c8b1c3742183ef98996004df18c3",
            "file": "projects/explorer/src/app/maintenance/maintenance.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-maintenance",
            "styleUrls": [
                "./maintenance.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./maintenance.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'exp-maintenance',\n  templateUrl: './maintenance.component.html',\n  styleUrls: ['./maintenance.component.scss']\n})\nexport class MaintenanceComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./maintenance.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p style=\"position: relative; left: 50%; top: 100px;\">\n    <img src=\"./assets/images/down-for.png\">\n</p>\n"
        },
        {
            "name": "MemberRowComponent",
            "id": "component-MemberRowComponent-e617f9e2c675d69fa31c7b7dc9f3f8ff7b4f3128567537916f488d1e789d6aafcd45f07fb1fe6ddc9866f22be3bd5f70b0cb9c62dab018f7ec638a68f8d414cc",
            "file": "projects/admin/src/app/pages/admin/components/members/member-row/member-row.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": ".org-admin-member-row",
            "styleUrls": [
                "./member-row.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./member-row.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "member",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "Member",
                    "decorators": []
                },
                {
                    "name": "members",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Member[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDetail",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "more",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Member } from '../member';\n@Component({\n  selector: '.org-admin-member-row',\n  templateUrl: './member-row.component.html',\n  styleUrls: ['./member-row.component.less'],\n})\nexport class MemberRowComponent {\n  @Input() member!: Member;\n  @Input() members: Member[] = [];\n\n  isDetail = false;\n\n  constructor() {}\n\n  more(event: MouseEvent): void {\n    event.preventDefault();\n\n    this.isDetail = !this.isDetail;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./member-row.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "templateData": "<td class=\"align-baseline\">\n  <div class=\"d-flex align-items-center\">\n    <nz-avatar nzIcon=\"user\" [nzSrc]=\"member.avatar\"></nz-avatar>\n    <div class=\"mx-2\">\n      <div class=\"fw-bold\">{{ member.name }}</div>\n      <div>{{ member.position }}</div>\n    </div>\n  </div>\n</td>\n<td class=\"align-baseline\">\n  {{ member.email }}\n</td>\n<td class=\"align-baseline\">\n  {{ member.phone }}\n</td>\n<td class=\"align-baseline\">\n  <div *ngFor=\"let organizationUser of member.organizationUsers; let i = index\">\n    <div *ngIf=\"i < 5 || isDetail\">\n      <a href=\"#\">{{ organizationUser.organization.name }}</a>\n      |\n      <span>{{ organizationUser.role.name }}</span>\n    </div>\n  </div>\n  <div *ngIf=\"member.organizationUsers.length > 5\" class=\"px-2 py-3\">\n    <a nz-button nzType=\"link\" (click)=\"more($event)\">\n      <span *ngIf=\"!isDetail\">\n        View more <i nz-icon nzType=\"down\" nzTheme=\"outline\"></i>\n      </span>\n      <span *ngIf=\"isDetail\">\n        View less <i nz-icon nzType=\"up\" nzTheme=\"outline\"></i>\n      </span>\n    </a>\n  </div>\n</td>\n<td class=\"align-baseline\">\n  <a nz-button nzType=\"link\" nz-dropdown [nzDropdownMenu]=\"menu\">\n    <i nz-icon nzType=\"more\"></i>\n  </a>\n</td>\n\n<nz-dropdown-menu #menu=\"nzDropdownMenu\">\n  <ul nz-menu nzSelectable>\n    <li nz-menu-item>\n      <a [routerLink]=\"['/profile', member.uuid]\">Edit Account Access</a>\n    </li>\n  </ul>\n</nz-dropdown-menu>\n"
        },
        {
            "name": "MembersComponent",
            "id": "component-MembersComponent-bac0b3becbe2f915345ace5a965b80ee79aa994b33b1f60d67e9ec7f8c7146cb03b8d9036fd2964e0b7521a0a97f82b503fc0d90f7c2ec33dba21f24a3e89376",
            "file": "projects/admin/src/app/pages/admin/components/members/members.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-admin-members",
            "styleUrls": [
                "./members.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./members.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "members",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Member[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { OrganizationService } from '../../../../select-organization/services/organization.service';\nimport { Member } from './member';\nimport { User } from '../../../../shared/models/user.model';\n\n@Component({\n  selector: 'org-admin-members',\n  templateUrl: './members.component.html',\n  styleUrls: ['./members.component.less'],\n})\nexport class MembersComponent implements OnInit {\n  members: Member[] = [];\n  isLoading = true;\n\n  constructor(private organizationService: OrganizationService) {}\n\n  ngOnInit(): void {\n    this.organizationService.getUsers().subscribe(result => {\n      this.members = this.organizationService.mapUsersToMembers((result?.data.users as User[]));\n      this.isLoading = false;\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./members.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "organizationService",
                        "type": "OrganizationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "organizationService",
                        "type": "OrganizationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <div nz-row class=\"pt-5\">\n    <div nz-col class=\"search-btn w-50 pb-4\">\n      <nz-input-group\n        nzSearch\n        nzSize=\"large\"\n        [nzAddOnAfter]=\"suffixIconButton\"\n        class=\"rounded-3 w-75\"\n      >\n        <input type=\"text\" nz-input placeholder=\"Search members, accounts...\" />\n      </nz-input-group>\n      <ng-template #suffixIconButton>\n        <button nz-button nzType=\"primary\" nzSearch class=\"w-auto px-3\">\n          <i nz-icon nzType=\"search\"></i>\n        </button>\n      </ng-template>\n    </div>\n    <div nz-col class=\"ms-auto\">\n      <a\n        routerLink='/invite'\n        nz-button\n        nzType=\"primary\"\n        nzSize=\"large\"\n        class=\"text-uppercase action-btn\"\n      >Invite Members</a>\n    </div>\n  </div>\n  <div nz-row>\n    <div nz-col>\n      <nz-table\n        #membersTable\n        nzShowPagination\n        nzShowSizeChanger\n        [nzPageSize]=\"10\"\n        [nzData]=\"members\"\n        [nzLoading]=\"isLoading\"\n        [nzNoResult]=\"'No Members available.'\"\n      >\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Phone number</th>\n            <th>Accounts</th>\n            <th nzWidth=\"70px\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-container *ngFor=\"let member of membersTable.data\">\n            <tr class=\"org-admin-member-row\" \n              [member]=\"member\"\n              >\n            </tr>\n          </ng-container>\n        </tbody>\n      </nz-table>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "MyCommunitiesDrawerComponent",
            "id": "component-MyCommunitiesDrawerComponent-4f75d0cac18d1834b79a0c9ba63acf91374501c4166e9927fdab464be1ca56cfec467aa3ee7a5ebd0d0f9ae99043197480c2212378d95ba04b631572a989501b",
            "file": "projects/explorer/src/app/shared/components/my-communities-drawer/my-communities-drawer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-my-communities-drawer",
            "styleUrls": [
                "./my-communities-drawer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./my-communities-drawer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "remoteOpenPanel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "communityLoaded",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_isSaveCommunityDrawerVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "communities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "currentCommunity",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteCommunity",
                    "args": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCommunities",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSaveDrawer",
                    "args": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectCommunity",
                    "args": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "community",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { NzModalService } from 'ng-zorro-antd/modal';\nimport { CommunitiesService } from '../../services/communities.service';\nimport { FilterState } from '../../stores/filter-store/explorer-filters.reducer';\nimport * as FilterActions from '../../stores/filter-store/explorer-filters.actions';\nimport { GeoFilterState } from '../../stores/geo-filter-store/explorer-geo-filter.reducer';\nimport * as GeoFilterActions from '../../stores/geo-filter-store/explorer-geo-filter.actions';\nimport {geoFilterExplorerApplied, geoFilterExplorerSaved} from '../../stores/geo-filter-store/explorer-geo-filter.actions';\n\n@Component({\n  selector: 'exp-my-communities-drawer',\n  templateUrl: './my-communities-drawer.component.html',\n  styleUrls: ['./my-communities-drawer.component.scss'],\n})\nexport class MyCommunitiesDrawerComponent {\n  @Input() set remoteOpenPanel(panel: boolean) {\n    this.visible = panel;\n  }\n\n  @Output() communityLoaded = new EventEmitter<any>();\n\n  communities: any[] = [];\n  visible = false;\n  currentCommunity = null;\n  isLoading = false;\n\n  _isSaveCommunityDrawerVisible = false;\n\n  constructor(\n    private communitiesService: CommunitiesService,\n    private modal: NzModalService,\n    private filterStore: Store<FilterState>,\n    private geoFilter: Store<GeoFilterState>,\n  ) { }\n\n  open(): void {\n    this.visible = true;\n    this.getCommunities();\n  }\n\n  close(): void {\n    this.visible = false;\n  }\n\n  deleteCommunity(community: any): void {\n    this.modal.confirm({\n      nzTitle: 'Delete Custom Community?',\n      nzContent: `Are you sure you want to delete <b>${community.name}?</b> If you delete this community, you will lose all geography and criteria filters. This can't be undone.`,\n      nzOkText: 'Delete Community',\n      nzIconType: 'warning',\n      nzClassName: 'confirm-modal',\n      nzOnOk: () => {\n        this.communitiesService.deleteCommunity(community.uuid).subscribe(() => {\n          this.communities = this.communities.filter(c => c.uuid !== community.uuid);\n        });\n      },\n    });\n  }\n\n  getCommunities(): void {\n    this.isLoading = true;\n    this.communitiesService.getCommunities().subscribe((communities: any) => {\n      this.communities = communities;\n      this.isLoading = false;\n    });\n  }\n\n  selectCommunity(community: any): void {\n    this.communities.forEach(community => {\n      community.active = false;\n    });\n    community.active = true;\n    this.communityLoaded.emit(community);\n    this.filterStore.dispatch(FilterActions.savedCommunitySelected({communitySelected: true}));\n    this.geoFilter.dispatch(GeoFilterActions.geoFilterExplorerSaved({geoFiltersSaved: community}));\n    this.geoFilter.dispatch(GeoFilterActions.geoFilterExplorerApplied({geoFilters: community}));\n    this.close();\n  }\n\n  get isSaveCommunityDrawerVisible() {\n    return this._isSaveCommunityDrawerVisible;\n  }\n\n  set isSaveCommunityDrawerVisible(visible: boolean) {\n    if (visible === false) {\n      this.communities = [];\n      this.open();\n      this.getCommunities();\n    }\n    this._isSaveCommunityDrawerVisible = visible;\n  }\n\n  openSaveDrawer(community: any) {\n    this.close();\n    this.currentCommunity = community;\n    this.isSaveCommunityDrawerVisible = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".my-communities-button {\n  margin-left: 20px;\n  background: #1b1f21;\n  border: 1px solid white;\n}\n\n.community {\n  padding: 10px;\n  border: 1px solid #f5f5f5;\n  margin-bottom: 10px;\n  position: relative;\n\n  &:hover {\n    background: #f5f5f5;\n    box-shadow: 2px 2px 5px 1px rgba(162, 162, 162, 0.5);\n    -webkit-box-shadow: 2px 2px 5px 1px rgba(162, 162, 162, 0.5);\n    -moz-box-shadow: 2px 2px 5px 1px rgba(162, 162, 162, 0.5);\n  }\n\n  &.active {\n    background: rgba(0, 174, 239, 0.08);\n  }\n\n  .community-name {\n    color: #57affb;\n    font-weight: bold;\n    cursor: pointer;\n  }\n\n  .community-updated {\n    color: #666;\n    font-size: 12px;\n    margin-bottom: 5px;\n  }\n\n  .community-actions {\n    position: absolute;\n    top: 10px;\n    right: 0;\n\n    .icon-actions {\n      background: url('../../../../assets/images/kebab-icon.svg');\n      background-repeat: no-repeat;\n      background-size: cover;\n      display: inline-block;\n      height: 20px;\n      width: 20px;\n      filter: invert(100%) contrast(0.1);\n    }\n  }\n}\n\n.loading {\n  text-align: center;\n}\n",
                    "styleUrl": "./my-communities-drawer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "communitiesService",
                        "type": "CommunitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modal",
                        "type": "NzModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "geoFilter",
                        "type": "Store<GeoFilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "communitiesService",
                        "type": "CommunitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modal",
                        "type": "NzModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "geoFilter",
                        "type": "Store<GeoFilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "remoteOpenPanel": {
                    "name": "remoteOpenPanel",
                    "setSignature": {
                        "name": "remoteOpenPanel",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "panel",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "panel",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isSaveCommunityDrawerVisible": {
                    "name": "isSaveCommunityDrawerVisible",
                    "setSignature": {
                        "name": "isSaveCommunityDrawerVisible",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "visible",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "jsdoctags": [
                            {
                                "name": "visible",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isSaveCommunityDrawerVisible",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                }
            },
            "templateData": "<exp-community-save-drawer\n  [(isVisible)]=\"isSaveCommunityDrawerVisible\"\n  [existingCommunity]=\"currentCommunity\"\n  ></exp-community-save-drawer>\n<button\n  nz-button\n  nzType=\"primary\"\n  (click)=\"open()\"\n  class=\"my-communities-button\"\n>My Communities</button>\n<nz-drawer\n  [nzClosable]=\"false\"\n  [nzVisible]=\"visible\"\n  [nzPlacement]=\"'left'\"\n  nzTitle=\"My Communities\"\n  [nzWidth]=\"350\"\n  (nzOnClose)=\"close()\">\n  <ng-container *nzDrawerContent>\n    <div *ngIf=\"isLoading\">\n      <div colspan=\"3\" class=\"loading\">\n        <nz-spin nzSimple [nzSize]=\"'small'\"></nz-spin>\n      </div>\n    </div>\n    <div class=\"community\"\n      [ngClass]=\"{'active': community.active}\"\n      *ngFor=\"let community of communities\"\n    >\n      <div class=\"community-name\"\n        (click)=\"selectCommunity(community)\"\n      >{{ community.name }}</div>\n      <div class=\"community-updated\">Updated: October 11, 2021</div>\n      <div class=\"community-description\">{{ community.description }}</div>\n      <div class=\"community-actions\">\n        <a nz-dropdown nzTrigger=\"click\" [nzDropdownMenu]=\"menu\">\n          <i class=\"icon-actions\"></i>\n        </a>\n        <nz-dropdown-menu #menu=\"nzDropdownMenu\">\n          <ul nz-menu>\n            <li nz-menu-item (click)=\"openSaveDrawer(community)\">Edit</li>\n            <li nz-menu-item (click)=\"deleteCommunity(community)\">Delete</li>\n          </ul>\n        </nz-dropdown-menu>\n      </div>\n    </div>\n  </ng-container>\n</nz-drawer>\n"
        },
        {
            "name": "OrganizationComponent",
            "id": "component-OrganizationComponent-87980b63452e68594bb55c7ab53aaf0d3a598f49f0de35a6237011a6e510e41f3d365e46ea743c58fe1f68cf096b403cca817d642398aa22c9b3e53a63e26ba7",
            "file": "projects/admin/src/app/pages/organization/organization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-organization",
            "styleUrls": [
                "./organization.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./organization.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'org-organization',\n  templateUrl: './organization.component.html',\n  styleUrls: ['./organization.component.less']\n})\nexport class OrganizationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./organization.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>organization works!</p>\n"
        },
        {
            "name": "OrgCompLibComponent",
            "id": "component-OrgCompLibComponent-872a9eba8f234e506e384142c6034e7877058e21d023569bc83d958346d1e2bf3daab075e5584d77a96f91af39812c2ae27985c645241c41b4ad72aea1f4bdae",
            "file": "projects/org-comp-lib/src/lib/org-comp-lib.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-org-comp-lib",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  example ant design button component\n</p>\n<button nz-button [nzType]=\"type\">{{label}}</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"primary\" | \"dashed\" | \"link\" | \"text\" | \"default\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'lib-org-comp-lib',\n  template: `\n    <p>\n      example ant design button component\n    </p>\n    <button nz-button [nzType]=\"type\">{{label}}</button>\n  `,\n  styles: [\n  ],\n})\nexport class OrgCompLibComponent {\n\n  @Input() type: 'primary'|'dashed'|'link'|'text'|'default' = 'primary';\n  @Input() label = 'Button';\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            }
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-432c9ae0bcf6e2e1f46701f7565a67376cb10145b7d049c5fe930cf8f075c6e02e24151589750b18cbaa8266f7c61393b95c4d833fbfd71ee228904aa014349f",
            "file": "src/stories/examples/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-18545fd5ecd79f557a274c14c75c1df4b656290a3862793df49ce284eb922088dbd16feadd5d44d01d32455b396c8e548910f01c6a7611fec172bd6979b0a4d0-1",
            "file": "projects/admin/src/app/pages/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-page",
            "styleUrls": [
                "./page.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currOrgInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Organization | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "userInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserState>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Organization } from '../shared/models/organization.model';\nimport { UserState } from '../store/reducers/user.reducer';\nimport * as fromUserSelectors from '../store/selectors/user.selectors';\n\n@Component({\n  selector: 'org-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.less']\n})\nexport class PageComponent {\n  userInfo$: Observable<UserState>;\n  currOrgInfo$: Observable<Organization | undefined>;\n\n  constructor(private store: Store<UserState>) {\n    this.userInfo$ = this.store.pipe(select(fromUserSelectors.selectUser));\n    this.currOrgInfo$ = this.store.pipe(select(fromUserSelectors.selectCurrentOrganization));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page {\n  &__layout {\n    min-height: 100%;\n  }\n}\n\n.header {\n  display: flex;\n  justify-content: flex-start;\n  background-color: white;\n\n  .user-dropdown {\n    cursor: pointer;\n  }\n}\n\n.content {\n  background-color: white;\n}\n\n.bottom-menu {\n  position: absolute;\n  bottom: 0;\n}\n",
                    "styleUrl": "./page.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<UserState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PageComponent-1",
            "templateData": "<nz-layout class=\"page__layout mh-100\">\n  <nz-header class=\"header border-bottom px-3\">\n    <div\n      class=\"user-dropdown d-flex align-items-center\"\n      nz-dropdown\n      nzTrigger=\"click\"\n      [nzDropdownMenu]=\"menu\"\n    >\n      <nz-avatar\n        nzIcon=\"user\"\n        [nzSrc]=\"(userInfo$ | async)?.picture\"\n      ></nz-avatar>\n      <div class=\"user-name d-inline ms-3 fs-5 fw-bold\">\n        {{ (currOrgInfo$ | async)?.name }}\n      </div>\n      <nz-dropdown-menu #menu=\"nzDropdownMenu\">\n        <ul nz-menu>\n          <li nz-menu-item routerLink=\"/select-organization\">Select Organization</li>\n          <li nz-menu-divider></li>\n          <li nz-menu-item><org-logout></org-logout></li>\n        </ul>\n      </nz-dropdown-menu>\n    </div>\n  </nz-header>\n  <nz-layout>\n    <nz-sider\n      nz-collapsed\n      nzTheme=\"light\"\n      nzWidth=\"58px\"\n      class=\"bg-light border-end\"\n    >\n      <ul nz-menu nzMode=\"inline\" [nzInlineIndent]=\"16\" class=\"bg-light h-100\">\n        <li nz-menu-item class=\"my-3\">\n          <a routerLink=\"/dashboard/members\">\n            <i nz-icon nzType=\"appstore\" nzTheme=\"fill\" class=\"fs-4\"></i>\n          </a>\n        </li>\n        <li nz-menu-item class=\"my-3\">\n          <i nz-icon nzType=\"reconciliation\" nzTheme=\"fill\" class=\"fs-4\"></i>\n        </li>\n        <li nz-menu-item class=\"my-3\">\n          <i nz-icon nzType=\"camera\" nzTheme=\"fill\" class=\"fs-4\"></i>\n        </li>\n        <li nz-menu-item class=\"my-3\">\n          <i nz-icon nzType=\"flag\" nzTheme=\"fill\" class=\"fs-4\"></i>\n        </li>\n        <div class=\"bottom-menu\">\n          <li nz-menu-item class=\"my-3\">\n            <i nz-icon nzType=\"question-circle\" nzTheme=\"fill\" class=\"fs-4\"></i>\n          </li>\n          <li nz-menu-item class=\"my-3\">\n            <a routerLink=\"/profile\">\n              <i nz-icon nzType=\"user\" class=\"fs-4\"></i>\n            </a>\n          </li>\n        </div>\n      </ul>\n    </nz-sider>\n    <nz-content class=\"content px-5 py-3 overflow-auto\">\n      <router-outlet></router-outlet>\n    </nz-content>\n  </nz-layout>\n</nz-layout>\n"
        },
        {
            "name": "PasswordValidatorComponent",
            "id": "component-PasswordValidatorComponent-d83b376e3420bf21e30c770dd12ba62ec7c1368bcce294c03f79fd597e227783b68917116eeca3b107a8a1c8099be038225d8d847e190434558a438d50f9a816",
            "file": "projects/admin/src/app/shared/components/password-validator/password-validator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-password-validator",
            "styleUrls": [
                "./password-validator.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./password-validator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "AbstractControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractControl, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'org-password-validator',\n  templateUrl: './password-validator.component.html',\n  styleUrls: ['./password-validator.component.less'],\n})\nexport class PasswordValidatorComponent {\n  @Input() control: AbstractControl = new FormControl();\n\n  constructor() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./password-validator.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"mb-1 d-flex\" *ngIf=\"control.valid\">\n  <div nz-typography nzType=\"success\">\n    <i nz-icon nzType=\"check-circle\" nzTheme=\"fill\" class=\"me-1\"></i>\n  </div> <span>Password accepted!</span>\n</div>\n<div nz-typography class=\"mb-1 fw-bold\">Your password must:</div>\n\n<div nz-typography [nzType]=\"control.hasError('length') ? 'danger' : 'success'\" class=\"mb-1\">\n  <i nz-icon [nzType]=\"control.hasError('length') ? 'warning' : 'check'\" nzTheme=\"outline\"></i> Be at least 8-10 characters long\n</div>\n\n<div nz-typography [nzType]=\"control.hasError('special') ? 'danger' : 'success'\" class=\"mb-1\">\n  <i nz-icon [nzType]=\"control.hasError('special') ? 'warning' : 'check'\" nzTheme=\"outline\"></i> Have at least one special character\n</div>\n\n<div nz-typography [nzType]=\"control.hasError('num') ? 'danger' : 'success'\" class=\"mb-1\">\n  <i nz-icon [nzType]=\"control.hasError('num') ? 'warning' : 'check'\" nzTheme=\"outline\"></i> Have at least one number\n</div>\n\n<div nz-typography [nzType]=\"control.hasError('lowercase') ? 'danger' : 'success'\" class=\"mb-1\">\n  <i nz-icon [nzType]=\"control.hasError('lowercase') ? 'warning' : 'check'\" nzTheme=\"outline\"></i> Have at least one lowercase\n</div>\n\n<div nz-typography [nzType]=\"control.hasError('uppercase') ? 'danger' : 'success'\" class=\"mb-1\">\n  <i nz-icon [nzType]=\"control.hasError('uppercase') ? 'warning' : 'check'\" nzTheme=\"outline\"></i> Have at least one uppercase\n</div>"
        },
        {
            "name": "PermissionCardComponent",
            "id": "component-PermissionCardComponent-83e245016eb76adf37944fb7ed4017796bcdff2c1b3b96dfbedb0f90d6a19d2a95797f04925b8e5de8e9d367cb645f01a46112abb4174eccf1292fa741e36cfe",
            "file": "projects/admin/src/app/pages/admin/components/permissions/permission-card/permission-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-admin-permission-card",
            "styleUrls": [
                "./permission-card.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./permission-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "permissions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Permission[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Permission } from '../permission';\n\n@Component({\n  selector: 'org-admin-permission-card',\n  templateUrl: './permission-card.component.html',\n  styleUrls: ['./permission-card.component.less'],\n})\nexport class PermissionCardComponent implements OnInit {\n  @Input() title: string = '';\n  @Input() permissions: Permission[] = [];\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./permission-card.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div nz-row class=\"shadow-sm w-100 p-4 mb-3 ant-card-bordered\">\n  <div nz-col nzSpan=\"6\">\n    <span class=\"fw-bold\">{{ title }}</span>\n  </div>\n  <div nz-col nzSpan=\"12\">\n    <div class=\"text-black-50 pb-2\" *ngFor=\"let permission of permissions\">\n      {{ permission.question }}\n    </div>\n  </div>\n  <div nz-col nzSpan=\"5\">\n    <div\n      class=\"text-end text-black-50 pb-2\"\n      *ngFor=\"let permission of permissions\"\n    >\n      <span>{{ permission.role }}</span>\n      <a nz-button nzType=\"link\">\n        <i nz-icon nzType=\"edit\" nzTheme=\"outline\"></i>\n      </a>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PermissionsComponent",
            "id": "component-PermissionsComponent-fe54c11c4e9175cf0492bb86736e919cb29be3f98e299d96bc96c267b8fa6b7256f066d182201c57a09c655f1767bae7c58d971ff02a727a8402b662714937e0",
            "file": "projects/admin/src/app/pages/admin/components/permissions/permissions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-admin-permissions",
            "styleUrls": [
                "./permissions.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./permissions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountPermissions",
                    "defaultValue": "[\n    {\n      question: 'Who manages members within an account and its subaccounts?',\n      role: 'Admin',\n    },\n    {\n      question: 'Who can create subaccounts and chapters?',\n      role: 'Admin',\n    },\n    {\n      question: \"Manages the account's billing\",\n      role: 'Admin',\n    },\n    {\n      question: 'Delegates credit to accounts and subaccounts',\n      role: 'Admin',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Permission[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "campaignPermissions",
                    "defaultValue": "[\n    {\n      question: 'Who can create a campaign?',\n      role: 'Admin, User',\n    },\n    {\n      question: 'Can manage the privacy for each campaign?',\n      role: 'Admin, User',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Permission[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "emailPermissions",
                    "defaultValue": "[\n    {\n      question: 'Who can publish an email?',\n      role: 'Admin',\n    },\n    {\n      question: 'Who can create an email draft?',\n      role: 'Admin, User, Volunteer',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Permission[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Permission } from './permission';\n\n@Component({\n  selector: 'org-admin-permissions',\n  templateUrl: './permissions.component.html',\n  styleUrls: ['./permissions.component.less'],\n})\nexport class PermissionsComponent {\n  accountPermissions: Permission[] = [\n    {\n      question: 'Who manages members within an account and its subaccounts?',\n      role: 'Admin',\n    },\n    {\n      question: 'Who can create subaccounts and chapters?',\n      role: 'Admin',\n    },\n    {\n      question: \"Manages the account's billing\",\n      role: 'Admin',\n    },\n    {\n      question: 'Delegates credit to accounts and subaccounts',\n      role: 'Admin',\n    },\n  ];\n\n  campaignPermissions: Permission[] = [\n    {\n      question: 'Who can create a campaign?',\n      role: 'Admin, User',\n    },\n    {\n      question: 'Can manage the privacy for each campaign?',\n      role: 'Admin, User',\n    },\n  ];\n\n  emailPermissions: Permission[] = [\n    {\n      question: 'Who can publish an email?',\n      role: 'Admin',\n    },\n    {\n      question: 'Who can create an email draft?',\n      role: 'Admin, User, Volunteer',\n    },\n  ];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./permissions.component.less"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"pt-4\">\n  <div nz-row class=\"pt-5\">\n    <div nz-col nzSpan=\"6\">\n      <div class=\"pb-5\">\n        <a href=\"#\">Data</a>\n      </div>\n      <div class=\"pt-3 pb-4\">\n        <a href=\"#\">Accounts</a>\n      </div>\n      <div>\n        <a href=\"#\">Features & Tools</a>\n      </div>\n    </div>\n    <div nz-col nzSpan=\"18\">\n      <org-admin-permission-sub\n        title=\"Data\"\n        description=\"(May be pulling out data section - it's currently in quartermaster - exports)\"\n      >\n        <div nz-row class=\"mb-5\">\n          <div nz-col nzSpan=\"12\" class=\"px-2\">\n            <nz-card nzTitle=\"Geography\" [nzExtra]=\"edit\" class=\"shadow-sm\">\n              <button nz-button nzType=\"default\">United States</button>\n            </nz-card>\n            <ng-template #edit>\n              <a>Edit</a>\n            </ng-template>\n          </div>\n          <div nz-col nzSpan=\"12\" class=\"px-2\">\n            <nz-card nzTitle=\"Sources\" [nzExtra]=\"edit\" class=\"shadow-sm\">\n              <div class=\"pt-2 ps-5\">L2, TargetSmart</div>\n            </nz-card>\n            <ng-template #edit>\n              <a>Edit</a>\n            </ng-template>\n          </div>\n        </div>\n      </org-admin-permission-sub>\n      <org-admin-permission-sub title=\"Account Roles\">\n        <org-admin-permission-card\n          title=\"Account Permissions\"\n          [permissions]=\"accountPermissions\"\n        ></org-admin-permission-card>\n      </org-admin-permission-sub>\n      <org-admin-permission-sub title=\"Features & Tools\">\n        <org-admin-permission-card\n          title=\"Campaign\"\n          [permissions]=\"campaignPermissions\"\n        ></org-admin-permission-card>\n        <org-admin-permission-card\n          title=\"Email\"\n          [permissions]=\"emailPermissions\"\n        ></org-admin-permission-card>\n      </org-admin-permission-sub>\n      <org-admin-permission-sub title=\"User Roles\"> </org-admin-permission-sub>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-e3aeaa3a1366bee06865aa4003e9ea40c1e872d9ba1f8bebcf27de3c86e1c9fc6ec0704f1949b6a441d7b2379cd08d5eb0c574c89970199f138f987bdc4189de",
            "file": "projects/admin/src/app/pages/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-profile",
            "styleUrls": [
                "./profile.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addOrganization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "changeOrganization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "changeUserRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "organizationRoles",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "organizations",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "removeOrganization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "userInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserState>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "userRole",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "handleAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleAddCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleChangeRole",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleChangeRoleCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleOpenAddModal",
                    "args": [
                        {
                            "name": "organization",
                            "type": "Organization",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "organization",
                            "type": "Organization",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePhoneNumberChange",
                    "args": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleRemoveCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapOrganizations",
                    "args": [
                        {
                            "name": "organizations",
                            "type": "Organization[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "organizations",
                            "type": "Organization[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openRemoveModal",
                    "args": [
                        {
                            "name": "organization",
                            "type": "Organization | OrganizationUsers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "organization",
                            "type": "Organization | OrganizationUsers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openRoleUpdate",
                    "args": [
                        {
                            "name": "organization",
                            "type": "Organization | OrganizationUsers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "organization",
                            "type": "Organization | OrganizationUsers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { NzNotificationService } from 'ng-zorro-antd/notification';\nimport * as fromUserSelectors from '../../store/selectors/user.selectors';\nimport {\n  FindOrganizationsWithRolesGQL,\n  FindRolesGQL,\n  FindUserGQL,\n  SendInvitationGQL,\n  StatusEnum,\n  UpdateOrganizationUserGQL,\n  UpdateUserGQL,\n  DeleteOrganizationUserGQL,\n} from '../../shared/services/graphql/graphql.service';\nimport { UserState } from '../../store/reducers/user.reducer';\nimport { AppState } from '../../store/reducers';\nimport { User } from '../../shared/models/user.model';\nimport { Organization } from '../../shared/models/organization.model';\nimport { Role } from '../../shared/models/role.model';\nimport { OrganizationUsers } from '../admin/components/members/member';\n\n@Component({\n  selector: 'org-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.less'],\n})\nexport class ProfileComponent implements OnInit {\n  userInfo$!: Observable<UserState>;\n  user: User | undefined;\n  userRole: any = {};\n  organizationRoles: any = {};\n\n  removeOrganization: any;\n\n  changeOrganization: any;\n  changeUserRole: any;\n  organizations: any[] = [];\n\n  addOrganization: any;\n\n  title = '';\n\n  constructor(\n    private findRolesService: FindRolesGQL,\n    private findUserService: FindUserGQL,\n    private route: ActivatedRoute,\n    private notification: NzNotificationService,\n    private findOrganizationsService: FindOrganizationsWithRolesGQL,\n    private updateOrganizationUserService: UpdateOrganizationUserGQL,\n    private deleteOrganizationUser: DeleteOrganizationUserGQL,\n    private updateUserService: UpdateUserGQL,\n    private sendInvitationService: SendInvitationGQL,\n    private store: Store<AppState>) { }\n\n  ngOnInit(): void {\n    this.userInfo$ = this.store.pipe(select(fromUserSelectors.selectUser));\n    const uuid: string = this.route.snapshot.paramMap.get('id') || '';\n    this.findUserService.fetch({ uuid }).pipe(take(1)).subscribe(result => {\n      this.user = result.data.user as User;\n\n      (this.user.organizationUsers || []).map(organizationUser => {\n        this.userRole[organizationUser?.organizationUuid || ''] = organizationUser?.role;\n\n        if (organizationUser?.organizationUuid === localStorage.getItem('selected_org')) {\n          this.title = organizationUser.title || '';\n        }\n\n        this.findRolesService.fetch({ organizationUuid: organizationUser?.organizationUuid }).pipe(take(1)).subscribe(result => {\n          this.organizationRoles[organizationUser?.organizationUuid || ''] = result.data.roles || [];\n        });\n      });\n\n      this.findOrganizationsService.fetch().pipe(take(1)).subscribe(result => {\n        this.mapOrganizations(result.data.organizations as Organization[] || []);\n      });\n    });\n  }\n\n  mapOrganizations(organizations: Organization[]): void {\n    (organizations || []).map(organization => {\n      if (this.user?.organizationUsers?.findIndex(organizationUser => organizationUser?.organizationUuid === organization.uuid) === -1) {\n        this.organizations.push({\n          name: organization?.name || '',\n          uuid: organization?.uuid || '',\n          organizationUuid: organization?.organizationUuid || '',\n          roles: organization?.roles,\n        });\n      }\n\n      if (organization?.organizations && organization?.organizations.length > 0) {\n        this.mapOrganizations(organization?.organizations || []);\n      }\n    });\n  }\n\n  openRoleUpdate(organization: Organization | OrganizationUsers, role: Role): void {\n    this.changeOrganization = organization;\n    this.changeUserRole = role;\n  }\n\n  handleChangeRoleCancel(): void {\n    this.changeOrganization = undefined;\n  }\n\n  openRemoveModal(organization: Organization | OrganizationUsers): void {\n    this.removeOrganization = organization;\n  }\n\n  handleRemoveCancel(): void {\n    this.removeOrganization = undefined;\n  }\n\n  handleOpenAddModal(organization: Organization): void {\n    this.addOrganization = organization;\n  }\n\n  handleAddCancel(): void {\n    this.addOrganization = '';\n  }\n\n  handleChangeRole(): void {\n    this.updateOrganizationUserService.mutate({\n      input: {\n        uuid: this.changeOrganization.uuid,\n        roleUuid: this.changeUserRole.uuid,\n      },\n    }).subscribe(result => {\n      this.userRole[result.data?.updateOrganizationUser?.organizationUuid || ''] = this.changeUserRole;\n    });\n\n    this.changeOrganization = '';\n  }\n\n  handleRemove(): void {\n    this.deleteOrganizationUser.mutate({\n      uuid: this.removeOrganization.uuid,\n    }).subscribe(result => {\n      if (this.user?.organizationUsers) {\n        const newOrganizationUsers = (this.user.organizationUsers || []).map(organizationUser => {\n          if (organizationUser) {\n            const newOrganizationUser = { ...organizationUser };\n            if (organizationUser && organizationUser?.organizationUuid === result.data?.deleteOrganizationUser?.organizationUuid) {\n              newOrganizationUser.status = StatusEnum.Deleted;\n            }\n            return newOrganizationUser;\n          }\n          return organizationUser;\n        });\n\n        this.user = {\n          ...this.user,\n          organizationUsers: newOrganizationUsers,\n        };\n      }\n    });\n\n    this.handleRemoveCancel();\n  }\n\n  handlePhoneNumberChange(ev: Event): void {\n    this.updateUserService.mutate({\n      input: {\n        uuid: this.user?.uuid || '',\n        phone: (ev.target as HTMLInputElement).value,\n      },\n    }).subscribe();\n  }\n\n  handleAdd(): void {\n    this.sendInvitationService.mutate({\n      input: {\n        organizationUuid: this.addOrganization.uuid || '',\n        users: [{\n          email: this.user?.email || '',\n          roleUuid: this.addOrganization.roles[0].uuid,\n        }],\n      },\n    }).subscribe(result => {\n      if ((result.data?.inviteOrganizationUsers?.invitedUsers?.length || 0) > 0) {\n        const orgUuid = result.data?.inviteOrganizationUsers?.organizationUuid || '';\n        this.organizations = this.organizations.filter(organization => organization.uuid !== orgUuid);\n\n        this.notification.blank(\n          'Invitation Sent',\n          'We have sent user invitation for the organization',\n          { nzPlacement: 'bottomLeft' },\n        );\n      }\n    });\n    this.handleAddCancel();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.user-avatar {\n  height: 72px;\n  width: 72px;\n}\n\n.profile {\n  &__personal-heading {\n    width: 50px;\n  }\n\n  &__organizer-name {\n    width: 120px;\n  }\n\n  &__organizer-role {\n    width: 100px;\n  }\n}",
                    "styleUrl": "./profile.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "findRolesService",
                        "type": "FindRolesGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "findUserService",
                        "type": "FindUserGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notification",
                        "type": "NzNotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "findOrganizationsService",
                        "type": "FindOrganizationsWithRolesGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "updateOrganizationUserService",
                        "type": "UpdateOrganizationUserGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deleteOrganizationUser",
                        "type": "DeleteOrganizationUserGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "updateUserService",
                        "type": "UpdateUserGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sendInvitationService",
                        "type": "SendInvitationGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "findRolesService",
                        "type": "FindRolesGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "findUserService",
                        "type": "FindUserGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notification",
                        "type": "NzNotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "findOrganizationsService",
                        "type": "FindOrganizationsWithRolesGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "updateOrganizationUserService",
                        "type": "UpdateOrganizationUserGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deleteOrganizationUser",
                        "type": "DeleteOrganizationUserGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "updateUserService",
                        "type": "UpdateUserGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sendInvitationService",
                        "type": "SendInvitationGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nz-avatar\n  class=\"user-avatar mb-2 mt-5\"\n  nz-icon=\"user\"\n  [nzSrc]=\"(userInfo$ | async)?.picture\"\n></nz-avatar>\n<h1 nz-typography>{{ user?.firstName }} {{ user?.lastName }}</h1>\n<p>{{ title }}</p>\n\n<nz-tabset nzCentered>\n  <nz-tab nzTitle=\"Personal info\">\n    <ul>\n      <li class=\"d-flex align-items-center my-2\">\n        <i nz-icon nzType=\"mail\" nzTheme=\"outline\"></i>\n        <strong class=\"profile__personal-heading mx-1\">Email:</strong>\n        <span class=\"flex-1\">{{ user?.email }}</span>\n      </li>\n      <li class=\"d-flex align-items-center my-2\">\n        <i nz-icon nzType=\"user\" nzTheme=\"outline\"></i>\n        <strong class=\"profile__personal-heading mx-1\">Title:</strong>\n        <span class=\"flex-1\">{{ title }}</span>\n      </li>\n      <li class=\"d-flex align-items-center my-2\">\n        <i nz-icon nzType=\"mobile\" nzTheme=\"outline\"></i>\n        <strong class=\"profile__personal-heading mx-1\">Phone:</strong>\n        <div class=\"flex-1\">\n          <input\n            nz-input\n            nzRequired\n            placeholder=\"Enter phone number\"\n            [value]=\"user?.phone\"\n            (change)=\"handlePhoneNumberChange($event)\"\n          />\n        </div>\n      </li>\n    </ul>\n  </nz-tab>\n\n  <nz-tab nzTitle=\"Accounts\">\n    <div *ngFor=\"let organizationUser of user?.organizationUsers\">\n      <div\n        *ngIf=\"organizationUser?.status !== 'DELETED'\"\n        class=\"d-flex align-items-center mb-1\"\n      >\n        <nz-avatar nzSize=\"small\" nzIcon=\"user\"></nz-avatar>\n        <span class=\"profile__organizer-name ms-2\">{{\n          organizationUser?.organization?.name\n        }}</span>\n\n        <div class=\"profile__organizer-role mx-2\">\n          <a nz-dropdown [nzDropdownMenu]=\"menu\" nzTrigger=\"click\">\n            {{ userRole[organizationUser?.organizationUuid || \"\"]?.name || \"\" }}\n            <i nz-icon nzType=\"down\"></i>\n          </a>\n\n          <nz-dropdown-menu #menu=\"nzDropdownMenu\">\n            <ul nz-menu nzSelectable>\n              <li\n                nz-menu-item\n                (click)=\"openRoleUpdate(organizationUser, role)\"\n                *ngFor=\"\n                  let role of organizationRoles[\n                    organizationUser?.organizationUuid || ''\n                  ] || []\n                \"\n              >\n                {{ role.name }}\n              </li>\n            </ul>\n          </nz-dropdown-menu>\n        </div>\n\n        <div>\n          {{ organizationUser?.status }}\n        </div>\n\n        <button\n          nz-button\n          nzType=\"link\"\n          (click)=\"openRemoveModal(organizationUser)\"\n        >\n          Remove access\n        </button>\n      </div>\n    </div>\n    <a nz-dropdown [nzDropdownMenu]=\"organizationMenu\">\n      <i nz-icon nzType=\"plus-circle\" nzTheme=\"outline\"></i>\n      Add to another account\n    </a>\n    <nz-dropdown-menu #organizationMenu=\"nzDropdownMenu\">\n      <ul nz-menu>\n        <ng-container *ngFor=\"let organization of organizations\">\n          <li\n            nz-menu-item\n            *ngIf=\"organization.roles.length > 0\"\n            (click)=\"handleOpenAddModal(organization)\"\n          >\n            {{ organization.name }}\n          </li>\n        </ng-container>\n      </ul>\n    </nz-dropdown-menu>\n  </nz-tab>\n</nz-tabset>\n\n<!-- Remove Access -->\n<nz-modal\n  [nzVisible]=\"!!removeOrganization\"\n  nzTitle=\"Removing access\"\n  (nzOnCancel)=\"handleRemoveCancel()\"\n  (nzOnOk)=\"handleRemove()\"\n  nzOkText=\"YES, REMOVE MEMBER\"\n  nzCancelText=\"NO, DO NOT REMOVE MEMBER\"\n>\n  <ng-container *nzModalContent>\n    <p>\n      {{ user?.firstName }} will not have access to any information or updates\n      from this account. Do you want to continue removing this member?\n    </p>\n  </ng-container>\n</nz-modal>\n\n<!-- Add Account -->\n<nz-modal\n  [nzVisible]=\"!!addOrganization\"\n  nzTitle=\"Add To Accounts\"\n  (nzOnCancel)=\"handleAddCancel()\"\n  (nzOnOk)=\"handleAdd()\"\n  [nzCancelText]=\"null\"\n  nzOkText=\"YES, ADD NEW ACCOUNT\"\n>\n  <ng-container *nzModalContent>\n    <p>\n      You are adding {{ user?.firstName }} to {{ addOrganization?.name }}. Do\n      you want to continue?\n    </p>\n  </ng-container>\n</nz-modal>\n\n<!-- Change User Role -->\n<nz-modal\n  [nzVisible]=\"!!changeOrganization\"\n  nzTitle=\"Continue changing role?\"\n  (nzOnCancel)=\"handleChangeRoleCancel()\"\n  (nzOnOk)=\"handleChangeRole()\"\n  [nzCancelText]=\"null\"\n  nzOkText=\"YES, CHANGE USER ROLE\"\n>\n  <ng-container *nzModalContent>\n    <p>\n      You are changing {{ user?.firstName }}'s role in\n      {{ changeOrganization?.name }} to {{ changeUserRole?.name }}. Do you want\n      to continue?\n    </p>\n  </ng-container>\n</nz-modal>\n"
        },
        {
            "name": "RecoverPasswordComponent",
            "id": "component-RecoverPasswordComponent-4b94599efc93aa129fbdda1f96fa5dfbe4e094fff3fbfe36cbcdc78fb41705ba9164b36bec993417369a83688f8f0bf8537eaba83cda0ac04eced6f572cdf4b3",
            "file": "projects/admin/src/app/login/recover-password/recover-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-recover-password",
            "styleUrls": [
                "./recover-password.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./recover-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "recoverPasswordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSend email to reset users password\n\n",
                    "description": "<p>Send email to reset users password</p>\n",
                    "jsdoctags": []
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { RequestUserPasswordResetGQL } from '../../shared/services/graphql/graphql.service';\n\n@Component({\n  selector: 'org-recover-password',\n  templateUrl: './recover-password.component.html',\n  styleUrls: ['./recover-password.component.less'],\n})\nexport class RecoverPasswordComponent implements OnInit {\n  recoverPasswordForm!: FormGroup;\n\n  constructor(private fb: FormBuilder, private router: Router, private requestPasswordChange: RequestUserPasswordResetGQL) { }\n\n  ngOnInit(): void {\n    this.recoverPasswordForm = this.fb.group({\n      email: [null, [Validators.email, Validators.required]],\n    });\n  }\n\n  /**\n   * Send email to reset users password\n   *\n   * @memberof RecoverPasswordComponent\n   */\n  resetPassword(): void {\n    const email = this.recoverPasswordForm.get('email')?.value as string;\n    this.requestPasswordChange.mutate({ email })\n      .subscribe(() => {\n        this.router.navigate(['/login/request-sent']);\n      });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n}\n\n.forgot-password-msg,\n.password-form,\n.forgot-password-header {\n  width: 300px;\n}\n\n.reset-password-btn {\n  width: 100%;\n}\n\n.validation-error {\n  background-color: #FFE6E6;\n  color: #000;\n  max-width: 305px;\n}",
                    "styleUrl": "./recover-password.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "requestPasswordChange",
                        "type": "RequestUserPasswordResetGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "requestPasswordChange",
                        "type": "RequestUserPasswordResetGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"forgot-password-header\">Forgot Password?</h1>\n<p class=\"forgot-password-msg\">Enter the email address you used when you joined and we'll send you instructions to reset your password.</p>\n<form nz-form [formGroup]=\"recoverPasswordForm\" (ngSubmit)=\"resetPassword()\" class=\"password-form\">\n  <nz-form-item>\n    <nz-form-control [nzErrorTip]=\"emailNotValid\">\n      <input nz-input nzRequired placeholder=\"Email address\" formControlName=\"email\" type=\"text\"/>\n      <ng-template #emailNotValid><div class=\"px-3 py-2 mb-3 mt-1 validation-error\">Please enter a valid email</div></ng-template>\n    </nz-form-control>\n  </nz-form-item>\n  <nz-form-item>\n    <nz-form-control>\n      <button nz-button [disabled]=\"recoverPasswordForm.status === 'INVALID'\" nzType=\"primary\" class=\"reset-password-btn\">Change Password</button>\n    </nz-form-control>\n  </nz-form-item>\n</form>"
        },
        {
            "name": "RequestSentComponent",
            "id": "component-RequestSentComponent-13b3f4bd544ef2ace2e8520f7d47f29b1140a3ec385248b8d360519a962df1fa965fd2d453acf41d445d99586ac1f9a674bca76f36d85f93f9d374e2508ac290",
            "file": "projects/admin/src/app/login/request-sent/request-sent.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-request-sent",
            "styleUrls": [
                "./request-sent.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./request-sent.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'org-request-sent',\n  templateUrl: './request-sent.component.html',\n  styleUrls: ['./request-sent.component.less']\n})\nexport class RequestSentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n}\n\nh1, p {\n  width: 500px;\n}",
                    "styleUrl": "./request-sent.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Reset password instructions sent</h1>\n<p>An email has been sent over with instructions to reset your password. Please check your email.</p>\n"
        },
        {
            "name": "ResetPasswordComponent",
            "id": "component-ResetPasswordComponent-a67183b57a30aee08073f89ba51f8688ddd853d68b44f2565790f34ce37671e1bb7235a52a775848f73dd972345e58571510ec39cfb987ace0941758b574d7c2",
            "file": "projects/admin/src/app/login/reset-password/reset-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-reset-password",
            "styleUrls": [
                "./reset-password.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmMatch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "isTokenValid$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Maybe | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "passwordChangeSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "passwordFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "passwordVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "resetPasswordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "token",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSend new password and token to the backend\n\n",
                    "description": "<p>Send new password and token to the backend</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "validateConfirmPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the password matches\n\n",
                    "description": "<p>Check if the password matches</p>\n",
                    "jsdoctags": []
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Maybe } from 'graphql/jsutils/Maybe';\nimport { Observable } from 'rxjs';\nimport { ResetUserPasswordGQL } from '../../shared/services/graphql/graphql.service';\nimport { UserService } from '../../shared/services/user/user.service';\nimport { passwordValidator } from '../../utils/input';\n\n@Component({\n  selector: 'org-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.less'],\n})\nexport class ResetPasswordComponent {\n  resetPasswordForm: FormGroup;\n  token = '';\n  passwordFocus = false;\n  passwordVisible = false;\n  passwordChangeSuccess = false;\n  isTokenValid$: Observable<Maybe<boolean> | undefined>;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private resetUserPassword: ResetUserPasswordGQL,\n    private userService: UserService,\n  ) {\n    this.resetPasswordForm = this.fb.group({\n      password: [null, [Validators.required, passwordValidator]],\n      passwordConfirmation: [null, [this.confirmMatch]],\n    });\n\n    this.token = this.activatedRoute.snapshot.queryParams.token as string || '';\n    this.isTokenValid$ = this.userService.isPasswordResetTokenValid(this.token);\n  }\n\n  /**\n   * Send new password and token to the backend\n   *\n   * @memberof ResetPasswordComponent\n   */\n  resetPassword(): void {\n    // Send new password and token to backend\n    // Log user in with new password\n    this.resetUserPassword\n      .mutate({\n        input: {\n          token: this.token,\n          password: this.resetPasswordForm.get('password')?.value as string,\n        },\n      })\n      .subscribe(() => {\n        this.passwordChangeSuccess = true;\n        // password has been reset , redirecting to login... (3 seconds)?\n        setTimeout(() => {\n          this.router.navigate(['/login']);\n        }, 3000);\n      });\n  }\n\n  /**\n   * Check if the password matches\n   *\n   * @memberof ResetPasswordComponent\n   */\n  validateConfirmPassword(): void {\n    setTimeout(() =>\n      this.resetPasswordForm.controls.passwordConfirmation.updateValueAndValidity(),\n    );\n  }\n\n  confirmMatch = (control: FormControl): { [s: string]: boolean } => {\n    if (control.value !== this.resetPasswordForm?.controls.password.value) {\n      return { mismatch: true, error: true };\n    }\n    return {};\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n}\n\nh1,\n.reset-password-form,\n.change-password-btn {\n  width: 300px;\n}\n\n.validation-error {\n  background-color: #FFE6E6;\n  color: #000;\n  margin-bottom: 12px;\n  margin-top: 2px;\n  max-width: 305px;\n  padding: 8px 12px;\n}",
                    "styleUrl": "./reset-password.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resetUserPassword",
                        "type": "ResetUserPasswordGQL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resetUserPassword",
                        "type": "ResetUserPasswordGQL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div *ngIf=\"(isTokenValid$ | async) === false\">\n  <h1>Token is expired!</h1>\n</div>\n<div *ngIf=\"isTokenValid$ | async\">\n  <h1>Change your password</h1>\n  <form\n    nz-form\n    [formGroup]=\"resetPasswordForm\"\n    (ngSubmit)=\"resetPassword()\"\n    class=\"reset-password-form\"\n  >\n    <nz-form-item>\n      <nz-form-control>\n        <nz-input-group\n          [nzSuffix]=\"suffixTemplate\"\n          nz-popover\n          [nzPopoverContent]=\"contentTemplate\"\n          [nzPopoverVisible]=\"\n            resetPasswordForm.controls['password']?.touched &&\n            (passwordFocus || !resetPasswordForm.controls['password'].valid)\n          \"\n          [nzPopoverTrigger]=\"null\"\n          nzPopoverPlacement=\"rightTop\"\n        >\n          <input\n            nz-input\n            nzRequired\n            placeholder=\"Password\"\n            formControlName=\"password\"\n            [type]=\"passwordVisible ? 'text' : 'password'\"\n            (focus)=\"passwordFocus = true\"\n            (blur)=\"passwordFocus = false\"\n          />\n        </nz-input-group>\n        <ng-template #suffixTemplate>\n          <a nzType=\"primary\" (click)=\"passwordVisible = !passwordVisible\"\n            >View Password</a\n          >\n        </ng-template>\n\n        <ng-template #contentTemplate>\n          <org-password-validator [control]=\"resetPasswordForm.controls['password']\"></org-password-validator>\n        </ng-template>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-control [nzErrorTip]=\"passwordMismatch\">\n        <input\n          nz-input\n          nzRequired\n          placeholder=\"Password Confirmation\"\n          formControlName=\"passwordConfirmation\"\n          type=\"password\"\n        />\n        <ng-template #passwordMismatch let-control>\n          <div *ngIf=\"control.hasError('mismatch')\" class=\"validation-error\">\n            Passwords do not match\n          </div>\n        </ng-template>\n      </nz-form-control>\n    </nz-form-item>\n    <nz-form-item>\n      <nz-form-control>\n        <button\n          nz-button\n          [disabled]=\"resetPasswordForm.status === 'INVALID'\"\n          nzType=\"primary\"\n          class=\"change-password-btn\"\n        >\n          Continue\n        </button>\n      </nz-form-control>\n    </nz-form-item>\n    <div *ngIf=\"passwordChangeSuccess\" nz-row>\n      <nz-alert nzType=\"success\" nzMessage=\"Password successfully changed! Redirecting to login...\"></nz-alert>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "SearchBoxComponent",
            "id": "component-SearchBoxComponent-7aad89bd6655daafd65768b7307f4617484661807f4a9e89488b7eafe3e0fdbf71616ed8401b858908916b67a5a35f2814999d3805232f841e7c11d936eb28e9",
            "file": "projects/explorer/src/app/shared/components/search-box/search-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-search-box",
            "styleUrls": [
                "./search-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "searchChange",
                    "defaultValue": "new EventEmitter<MapSelection>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "loader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "cleanSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchItemSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchLocation",
                    "args": [
                        {
                            "name": "q",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "q",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\nimport { MapService } from '../../services/map.service';\nimport { MapSelection } from '../us-map/map-selection.model';\nimport { MixpanelService } from '../../services/mixpanel.service';\n\n@Component({\n  selector: 'exp-search-box',\n  templateUrl: './search-box.component.html',\n  styleUrls: ['./search-box.component.scss'],\n})\nexport class SearchBoxComponent implements OnInit {\n  @Output() searchChange = new EventEmitter<MapSelection>();\n\n  options: Array<{ name: string; id: string; state: string; category: string; meta?: any }> = [];\n  searchControl = new FormControl();\n  loader = false;\n\n  constructor(private mapService: MapService, private mixpanel: MixpanelService) {}\n\n  ngOnInit(): void {\n    this.searchControl.valueChanges\n      .pipe(debounceTime(800))\n      .subscribe(newValue => this.searchLocation(newValue));\n  }\n\n  searchLocation(q: string): void {\n    this.loader = true;\n    this.mixpanel.track('Map Search', {typed: q});\n    this.options = [];\n\n    if (!q) {\n      this.loader = false;\n      return;\n    }\n\n    this.mapService.getSearchData(q).subscribe((res: any) => {\n      res.data.county.forEach((item: any) => {\n        this.options.push({\n          id: item.id,\n          name: item.label,\n          state: item.label === item.stateName ? 'state' : item.stateName,\n          category: item.level,\n          meta: item,\n        });\n      });\n\n      this.loader = false;\n    });\n  }\n\n  searchItemSelected(event: any, item: any): void {\n    if (event.isUserInput) {\n      const mapItem: MapSelection = {\n        id: item.id,\n        category: item.category,\n        meta: item.meta,\n      };\n      this.mixpanel.track('Map Search', {clicked: mapItem.id});\n      this.searchChange.emit(mapItem);\n      this.cleanSearch();\n    }\n  }\n\n  cleanSearch(): void {\n    this.searchControl.setValue('');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search-box {\n  background: rgba(0, 0, 0, 0.8);\n  position: absolute;\n  z-index: 1;\n  width: calc(100% - 40px);\n  padding: 15px;\n  border-radius: 5px;\n  -webkit-box-shadow: 0px 4px 7px 0px rgba(0,0,0,0.87);\n  box-shadow: 0px 4px 7px 0px rgba(0,0,0,0.87);\n\n  .search-box-title, .search-box-subtitle {\n    color: #FFF;\n    font-weight: 300;\n    margin-bottom: 0;\n    letter-spacing: 0.5px;\n  }\n\n  .search-box-title {\n    font-size: 20px;\n    font-weight: 100;\n\n    .highlight {\n      font-weight: 300;\n      text-decoration: underline;\n      cursor: pointer;\n    }\n  }\n\n  .search-box-subtitle {\n    font-size: 14px;\n    font-weight: 100;\n  }\n\n  .search-box-input {\n    padding: 10px 8px;\n    border-radius: 15px;\n    margin-top: 5px;\n\n    i {\n      font-size: 20px;\n      color: #BBB;\n    }\n  }\n\n  .search-button-wrapper {\n    text-align: center;\n\n    .search-button {\n      color: #00AEEF;\n      font-size: 22px;\n      margin-top: 15px;\n    }\n  }\n}\n\n.get-faq {\n  vertical-align: 3px;\n  cursor: pointer;\n\n  .anticon {\n    font-size: 12px !important;\n    color: #57affb;\n  }\n}\n",
                    "styleUrl": "./search-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--<div class=\"search-box\" nz-row>-->\n<!--  <div nz-col nzSpan=\"16\">-->\n<!--    <h2 class=\"search-box-title\">Explore communities by Civic Score <span nzTooltipTitle=\"The Helm Civic Score measures each individual’s level of civic engagement.\" nzTooltipPlacement=\"right\" nz-tooltip class=\"get-faq\" routerLink=\"/faq\"><i get-faq-icon nz-icon nzType=\"info-circle\" nzTheme=\"outline\"></i></span></h2>-->\n<!--    <h3 class=\"search-box-subtitle\">Select a community to see more detail.</h3>-->\n<!--  </div>-->\n<!--  <div nz-col nzSpan=\"8\">-->\n<!--    <nz-input-group [nzPrefix]=\"prefixTemplateUser\" class=\"search-box-input\">-->\n<!--      <input type=\"text\"-->\n<!--        nz-input placeholder=\"Locate county or state\"-->\n<!--        [formControl]=\"searchControl\"-->\n<!--        [nzAutocomplete]=\"auto\"-->\n<!--      />-->\n<!--      </nz-input-group>-->\n<!--      <ng-template #prefixTemplateUser><i nz-icon nzType=\"search\" nzTheme=\"outline\"></i></ng-template>-->\n<!--      <nz-autocomplete-->\n<!--        [nzOverlayClassName]=\"'search-box-overlay'\"-->\n<!--        #auto-->\n<!--      >-->\n<!--      <nz-auto-option-->\n<!--        class=\"global-search-item\"-->\n<!--        *ngFor=\"let option of options\"-->\n<!--        [nzValue]=\"option.name\"-->\n<!--        (selectionChange)=\"searchItemSelected($event, option)\"-->\n<!--      >-->\n<!--        <span class=\"result\">{{option.name | titlecase}}</span>-->\n<!--        <span class=\"state\">{{option.state | titlecase}}</span>-->\n<!--      </nz-auto-option>-->\n<!--    </nz-autocomplete>-->\n<!--  </div>-->\n<!--</div>-->\n\n<nz-input-group [nzPrefix]=\"prefixTemplateUser\" class=\"search-box-input\">\n  <input type=\"text\"\n         nz-input placeholder=\"Where are you exploring?\"\n         [formControl]=\"searchControl\"\n         [nzAutocomplete]=\"auto\"\n  />\n</nz-input-group>\n<ng-template #prefixTemplateUser><i *ngIf=\"!loader\" nz-icon nzType=\"search\" nzTheme=\"outline\"></i><i *ngIf=\"loader\" nz-icon nzType=\"loading\"></i></ng-template>\n<nz-autocomplete\n        [nzOverlayClassName]=\"'search-box-overlay'\"\n        #auto\n>\n  <nz-auto-option\n          class=\"global-search-item\"\n          *ngFor=\"let option of options\"\n          [nzValue]=\"option.name\"\n          (selectionChange)=\"searchItemSelected($event, option)\"\n  >\n    <span class=\"result\">{{option.name | titlecase}}</span>\n    <span class=\"state\">{{option.state | titlecase}}</span>\n  </nz-auto-option>\n</nz-autocomplete>\n"
        },
        {
            "name": "SelectionSummaryComponent",
            "id": "component-SelectionSummaryComponent-3a9c2bf694f2303110300d038ab40fafc21bedce6e09279d72fd66d054fa1048cc2cd1e7bc6587e5aa4912c3ad676a5ed07880dbd4c9df5cfd09894a370bc93c",
            "file": "projects/explorer/src/app/shared/components/selection-summary/selection-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-selection-summary",
            "styleUrls": [
                "./selection-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selection-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appliedFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "households",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mapSelections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "MapSelection",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'Nationwide'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "people",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "score",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "state",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggleGeoFilter",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filters$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isFiltersApplied",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "savedChangesTag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "unsavedChangesTag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "filtersChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFilterPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output, OnDestroy} from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport {select, Store} from '@ngrx/store';\nimport {takeUntil} from 'rxjs/operators';\n\nimport { MapSelection } from '../us-map/map-selection.model';\nimport * as FilterActions from '../../stores/filter-store/explorer-filters.actions';\nimport { filterList } from '../../stores/filter-store/explorer-filters.selectors';\nimport { FilterState } from '../../stores/filter-store/explorer-filters.reducer';\n\n\n@Component({\n  selector: 'exp-selection-summary',\n  templateUrl: './selection-summary.component.html',\n  styleUrls: ['./selection-summary.component.scss'],\n})\nexport class SelectionSummaryComponent implements OnInit, OnDestroy {\n  // @ts-ignore\n  @Input() mapSelections: MapSelection;\n  @Input() appliedFilters: any;\n  @Output() filterChange = new EventEmitter<any>();\n  @Output() toggleGeoFilter = new EventEmitter<any>();\n\n  @Input() households = 0;\n  @Input() people = 0;\n  @Input() name = 'Nationwide';\n  @Input() score = 0;\n  @Input() state = '';\n\n  isFiltersApplied = false;\n  unsavedChangesTag = false;\n  savedChangesTag = false;\n  filters$: Observable<any> | undefined;\n  private unsubscribe: Subject<void> = new Subject();\n\n  constructor(private filterStore: Store<FilterState>) { }\n\n  ngOnInit(): void {\n    this.filters$ = this.filterStore.pipe(select(filterList));\n    this.filters$.pipe(takeUntil(this.unsubscribe)).subscribe(res => {\n      if (res) {\n        if (res?.saveButtonActive) {\n          this.unsavedChangesTag = !res.saveButtonActive.saveButtonActive;\n        }\n        this.savedChangesTag = res?.saveButtonClicked?.saveButtonClicked;\n        if (res?.saveButtonClicked?.saveButtonClicked) {\n          this.unsavedChangesTag = false;\n          setTimeout(() => {\n            this.filterStore.dispatch(FilterActions.filterExplorerSaveCommunityClicked({saveButtonClicked: false}));\n          }, 5000);\n        }\n        if (res?.communitySelected?.communitySelected) {\n          setTimeout(() => {\n            this.isFiltersApplied = false;\n          }, 200);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n  filtersChanged(event: any): void {\n    this.isFiltersApplied = event?.length;\n    this.filterChange.emit(event);\n  }\n  toggleFilterPanel(): void {\n    this.toggleGeoFilter.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_colors';\n\n.selection-summary {\n  margin-top: 0px;\n  //border-radius: 10px;\n  //box-shadow: 0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n  //            0px 1px 10px 0px rgba(0, 0, 0, 0.12),\n  //            0px 2px 4px -1px rgba(0, 0, 0, 0.2);\n\n  .selection-summary-info {\n    padding: 24px 24px 10px 24px;\n  }\n\n  hr {\n    margin: 0;\n  }\n\n  .score-wrapper {\n    margin-right: 15px;\n    min-width: 80px;\n\n    .selection-score {\n      padding: 10px;\n      background-color: $civics-blue;\n      color: #FFFFFF;\n      font-size: 30px;\n      border-radius: 100%;\n      font-weight: 400;\n      line-height: 60px;\n      text-align: center;\n      width: 80px;\n    }\n  }\n\n  .selection-name {\n    h4 {\n      color: #121212;\n      font-size: 26px;\n      margin-bottom: 0;\n      font-weight: 500;\n      letter-spacing: 0.5px;\n      padding-top: 8px;\n      float: left;\n    }\n\n    .highlight {\n      text-decoration: underline;\n    }\n\n    .saved-tags {\n      margin-top: 17px;\n      margin-left: 10px;\n    }\n  }\n\n  .selection-data-title {\n    font-size: 14px;\n    text-transform: uppercase;\n    padding-top: 10px;\n\n    i {\n      font-size: 16px;\n    }\n  }\n\n  .selection-data-number {\n    font-size: 30px;\n    font-weight: 300;\n  }\n}\n.get-faq {\n  vertical-align: 1px;\n  cursor: pointer;\n  .anticon {\n    font-size: 12px !important;\n    color: #57affb;\n  }\n}\n",
                    "styleUrl": "./selection-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<nz-card class=\"selection-summary\" [nzBodyStyle]=\"{ padding: 0 }\">\n  <div nz-row class=\"selection-summary-info\">\n    <div nz-col nzSpan=\"2\" class=\"score-wrapper\">\n      <div nzTooltipTitle=\"The average Civic Score ranking of the people in this community.\" nzTooltipPlacement=\"right\"\n        nz-tooltip class=\"selection-score\" [ngClass]=\"{\n            'tooltip-score-color-two' : score < 34,\n            'tooltip-score-color-three' : score > 33 && score < 47,\n            'tooltip-score-color-four' : score > 46 && score < 55,\n            'tooltip-score-color-five' : score > 54 && score < 60,\n            'tooltip-score-color-six' : score > 59 && score < 70,\n            'tooltip-score-color-seven' : score > 69\n            }\">{{score}}</div>\n    </div>\n    <div nz-col nzSpan=\"15\" class=\"selection-name\">\n      <h4 *ngIf=\"isFiltersApplied\">Custom Community</h4>\n      <h4 *ngIf=\"!isFiltersApplied && name !== 'US'\">{{name}}</h4>\n      <h4 *ngIf=\"!isFiltersApplied && name === 'US'\">United States of America</h4>\n      <span>{{state}}</span>\n<!--      TODO badges below need to be wired up.-->\n      <nz-tag *ngIf=\"unsavedChangesTag\" class=\"saved-tags\" nzColor=\"warning\">\n        <i nz-icon nzType=\"close-circle\"></i>\n        <span>Unsaved Changes</span>\n      </nz-tag>\n      <nz-tag *ngIf=\"savedChangesTag\" class=\"saved-tags\" nzColor=\"success\">\n        <i nz-icon nzType=\"check-circle\"></i>\n        <span>Saved</span>\n      </nz-tag>\n      <!--      <span>Civic Score is average of all available counties. <span class=\"highlight\">Learn More</span></span>-->\n    </div>\n    <div nz-col nzSpan=\"3\">\n      <div class=\"selection-data-title\">\n        <i nz-icon nzType=\"user\" nzTheme=\"outline\"></i>\n        People <span nzTooltipTitle=\"The number of U.S. registered voters for whom we have a record in this community.\"\n          nzTooltipPlacement=\"right\" nz-tooltip class=\"get-faq\" routerLink=\"/faq\"><i get-faq-icon nz-icon\n            nzType=\"info-circle\" nzTheme=\"outline\"></i></span>\n      </div>\n      <div class=\"selection-data-number\">{{people | thousandSuff : 2}} </div>\n    </div>\n    <div nz-col nzSpan=\"3\">\n      <div class=\"selection-data-title\">\n        <i nz-icon nzType=\"home\" nzTheme=\"fill\"></i>\n        Households\n      </div>\n      <div class=\"selection-data-number\">{{households | thousandSuff : 2}}</div>\n    </div>\n  </div>\n  <hr>\n  <div class=\"filter-box-wrapper\">\n    <exp-filter-box\n      [mapSelections]=\"mapSelections\"\n      (filterChange)=\"filtersChanged($event)\"\n      (toggleGeoFilter)=\"toggleFilterPanel()\"\n      [appliedFilters]=\"appliedFilters\"\n    ></exp-filter-box>\n  </div>\n</nz-card>\n"
        },
        {
            "name": "SelectionToolTagboxComponent",
            "id": "component-SelectionToolTagboxComponent-4f9b004151125723dc7c2047d92aaf669ab1a448f3157f31b470c181e82d1c1c1f7c4872cf4d8352084e39b375b54972f3797d950fdb1ae31b3f718cb02b6163",
            "file": "projects/explorer/src/app/shared/components/selection-tool-tagbox/selection-tool-tagbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-selection-tool-tagbox",
            "styleUrls": [
                "./selection-tool-tagbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selection-tool-tagbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closeable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "regions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "TreeRegion[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<TreeRegion>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCommunity",
                    "args": [
                        {
                            "name": "region",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "region",
                            "type": "TreeRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { TreeRegion } from '../geo-filters-drawer/tree-region.model';\n\n@Component({\n  selector: 'exp-selection-tool-tagbox',\n  templateUrl: './selection-tool-tagbox.component.html',\n  styleUrls: ['./selection-tool-tagbox.component.scss']\n})\nexport class SelectionToolTagboxComponent implements OnInit {\n  @Input() regions: TreeRegion[] = [];\n  @Input() closeable: boolean = false;\n  @Output() remove = new EventEmitter<TreeRegion>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  removeCommunity(region: TreeRegion, index: number): void {\n    this.regions.splice(index, 1);\n    this.remove.emit(region);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".selection-tool-tagbox {\n  margin: 20px;\n}\n\n.selection-tool-tagbox-header {\n  margin: 10px;\n}\n\n.selection-tool-tagbox-container {\n  padding: 5px;\n  border: 1px solid black;\n  min-height: 100px;\n}\n",
                    "styleUrl": "./selection-tool-tagbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"selection-tool-tagbox\">\n  <div class=\"selection-tool-tagbox-container\">\n    <nz-tag\n      *ngFor=\"let region of regions; let i = index\"\n      [nzMode]=\"closeable ? 'closeable' : 'default'\"\n      (nzOnClose)=\"removeCommunity(region, i)\"\n    >{{region.name}}</nz-tag>\n  </div>\n</div>\n"
        },
        {
            "name": "SelectOrganizationComponent",
            "id": "component-SelectOrganizationComponent-1e2ccdb2fabd2abf0ff5562ab7a27049ae44c6c8b0a72f06e0487ebab3a38d7dd3428b21f9c65aba280708cab2a5243340e7ec1ce0d1e6efcc4b04e2df7e9729",
            "file": "projects/admin/src/app/select-organization/select-organization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-select-organization",
            "styleUrls": [
                "./select-organization.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./select-organization.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "orgList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Organization[]>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "userInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserState>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLog out of accounts\n\n",
                    "description": "<p>Log out of accounts</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "selectOrg",
                    "args": [
                        {
                            "name": "orgUuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelects the organization and saves to store\n\n",
                    "description": "<p>Selects the organization and saves to store</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1242,
                                "end": 1249,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "orgUuid"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1227,
                                "end": 1232,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 1233,
                                "end": 1241,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 1234,
                                    "end": 1240,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 149
                                }
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { AppState } from '../store/reducers';\nimport * as fromUserSelectors from '../store/selectors/user.selectors';\nimport { AuthService } from '../shared/services/auth/auth.service';\nimport { UserState } from '../store/reducers/user.reducer';\nimport { UserService } from '../shared/services/user/user.service';\nimport { Organization } from '../shared/models/organization.model';\n\n@Component({\n  selector: 'org-select-organization',\n  templateUrl: './select-organization.component.html',\n  styleUrls: ['./select-organization.component.less'],\n})\nexport class SelectOrganizationComponent {\n  userInfo$: Observable<UserState>;\n  orgList$: Observable<Organization[]>;\n\n  constructor(\n    private store: Store<AppState>,\n    private auth: AuthService,\n    private userService: UserService,\n    private router: Router) {\n    this.userInfo$ = this.store.pipe(select(fromUserSelectors.selectUser));\n    this.orgList$ = this.store.pipe(select(fromUserSelectors.selectActivePendingOrganizations));\n  }\n\n  /**\n   * Selects the organization and saves to store\n   *\n   * @param {string} orgUuid\n   * @memberof SelectOrganizationComponent\n   */\n  selectOrg(orgUuid: string): void {\n    localStorage.setItem('selected_org', orgUuid);\n    this.userService.addSelectedOrganizationUuid(orgUuid);\n    this.router.navigate(['/home']);\n  }\n\n  /**\n   * Log out of accounts\n   *\n   * @memberof SelectOrganizationComponent\n   */\n  logout(): void {\n    this.auth.logout();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n}\n\n.user-avatar {\n  height: 72px;\n  width: 72px;\n}\n\n.organization-list {\n  width: 320px;\n\n  ::ng-deep .ant-card-head-title {\n    color: #848484;\n    font-size: 12px;\n  }\n}\n\n.logout-btn {\n  width: 236px;\n}\n\n.org-list {\n  list-style: none;\n  padding-left: 0;\n\n  .org-list-item {\n    cursor: pointer;\n    margin-bottom: 20px;\n  }\n}",
                    "styleUrl": "./select-organization.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>Organizer</h1>\n<div class=\"user-info mb-4 d-flex flex-column align-items-center\">\n  <nz-avatar class=\"user-avatar mb-2\" nz-icon=\"user\" [nzSrc]=\"(userInfo$ | async)?.picture\"></nz-avatar>\n  <p nz-typography>{{(userInfo$ | async)?.name}}</p>\n</div>\n<nz-card class=\"organization-list mb-2\" nzTitle=\"Select an account\">\n  <ng-container *ngIf=\"(orgList$ | async)?.length === 0; else orgList\">\n    <div nz-typography>You are not associated with any Organizations. Please reach out to your Administrator if this is an error.</div>\n  </ng-container>\n  <ng-template #orgList>\n    <ul class='org-list'>\n      <li nz-typography *ngFor=\"let org of orgList$ | async\" class=\"org-list-item\" (click)=\"selectOrg(org.uuid)\">\n        {{org.name}}\n      </li>\n    </ul>\n  </ng-template>\n</nz-card>\n<button class=\"logout-btn\" nz-button nzType=\"default\" (click)=\"logout()\">Log out of all accounts</button>"
        },
        {
            "name": "SubPermissionComponent",
            "id": "component-SubPermissionComponent-17ea60fbaeb0b5f44df385248a510bae6f9f815b6b6af2695dbadfa43ee8760454bf12e63998d2dee58d9e129de6b8645145e545d3c0d5114ce1ae2fd871f954",
            "file": "projects/admin/src/app/pages/admin/components/permissions/sub-permission/sub-permission.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "org-admin-permission-sub",
            "styleUrls": [
                "./sub-permission.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./sub-permission.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'org-admin-permission-sub',\n  templateUrl: './sub-permission.component.html',\n  styleUrls: ['./sub-permission.component.less'],\n})\nexport class SubPermissionComponent implements OnInit {\n  @Input() title: string = '';\n  @Input() description?: string = '';\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sub-description {\n  color: #9575c8;\n}\n",
                    "styleUrl": "./sub-permission.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div nz-row nzAlign=\"middle\" class=\"mb-4\">\n  <h1 class=\"mb-1 me-3\">{{ title }}</h1>\n  <div class=\"sub-description\">{{ description }}</div>\n</div>\n<div class=\"pb-5\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "UsMapComponent",
            "id": "component-UsMapComponent-5c0a87876153d26c94b3e6c398d5169363a4ab63a7d88b7b6cc0008f0dbb520a6328ce561e55174df75ef47ff3dd2278e531c35b0e0f7eb027d26c8eb9fc640b",
            "file": "projects/explorer/src/app/shared/components/us-map/us-map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-us-map",
            "styleUrls": [
                "./us-map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./us-map.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "zoomIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeSelection",
                    "defaultValue": "new EventEmitter<MapSelection>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                },
                {
                    "name": "mapReset",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter"
                },
                {
                    "name": "national",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_zoomIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MapSelection",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "borderLines",
                    "defaultValue": "this.lines.filter(l => l.properties['hc-group'] === '__border_lines__')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "counties",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "countiesOriginal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "lines",
                    "defaultValue": "Highcharts.geojson(usMapCounties, 'mapline')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "methodsClass": [
                {
                    "name": "changeOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 357,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "zoomInControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 364,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "zoomOutControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 367,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';\nimport { MapService } from '../../services/map.service';\nimport Highcharts from 'highcharts/highmaps';\nimport usMapCounties from '../../../../assets/maps/us-all-all.geo.json';\nimport usMapStates from '@highcharts/map-collection/countries/us/us-all.geo.json';\nimport { MapSelection } from './map-selection.model';\nimport { ThousandSuffixesPipe } from '../../pipes/thousand-suff.pipe';\nimport { environment } from '../../../../environments/environment';\nimport { MixpanelService } from '../../services/mixpanel.service';\nimport {error} from 'highcharts';\n\n@Component({\n  selector: 'exp-us-map',\n  templateUrl: './us-map.component.html',\n  styleUrls: ['./us-map.component.scss'],\n})\nexport class UsMapComponent implements OnInit {\n  // tslint:disable-next-line:variable-name\n  private _zoomIn?: MapSelection;\n\n  @Input() set zoomIn(value: MapSelection | undefined) {\n    this._zoomIn = value;\n    if (value) {\n      const selection = this.chart.get(value.id);\n      selection.select();\n\n      selection.zoomTo();\n      if (value.category !== 'state') {\n        this.chart.mapZoom(2.5);\n      }\n\n      // Change to county view\n      this.chart.series[1].update({\n        visible: false,\n      });\n\n      const point: MapSelection = {\n        name: selection.name,\n        // @ts-ignore\n        households: selection.households,\n        // @ts-ignore\n        people: selection.people,\n        // @ts-ignore\n        score: parseFloat(selection.value).toFixed(2),\n        // @ts-ignore\n        id: selection.id,\n        // @ts-ignore\n        valueUpdated: selection.options.valueUpdated,\n        // @ts-ignore\n        state: selection.options.state,\n        category: value.category,\n      };\n\n      this.changeSelection.emit(point);\n    } else {\n      this.changeSelection.emit();\n    }\n  }\n\n  @Output() changeSelection = new EventEmitter<MapSelection>();\n  @Output() mapReset = new EventEmitter<any>();\n  @Output() national = new EventEmitter<any>();\n\n  chart: any;\n  counties: any;\n  countiesOriginal: any;\n  states: any;\n  lines = Highcharts.geojson(usMapCounties, 'mapline');\n  borderLines = this.lines.filter(l => l.properties['hc-group'] === '__border_lines__');\n  // separatorLines = this.lines.filter(l => l.properties['hc-group'] === '__separator_lines__');\n\n  constructor(private mapService: MapService, private thousandSuff: ThousandSuffixesPipe, private mixpanel: MixpanelService) { }\n\n  ngOnInit(): void {\n    const mainChart = () => {\n      this.changeOverlay();\n    };\n\n    const selectionChanged = (point: MapSelection) => {\n      if (point.category === 'state') {\n        let stateSelected = '';\n        stateSelected = point.id !== undefined ? point.id : '';\n        this.counties = JSON.parse(JSON.stringify(this.countiesOriginal));\n        // this.counties.forEach((a: any) => {\n        //   if (a.id) {\n        //     const tempValue = a.id.split('-');\n        //     if (tempValue[1] === stateSelected) {\n        //       a.value = Number(a.value) * 10;\n        //       a.valueUpdated = true;\n        //     } else {\n        //       if (a.valueUpdated) {\n        //         a.valueUpdated = false;\n        //         a.value = Number(a.value) / 10;\n        //       }\n        //       a.code = '';\n        //     }\n        //   }\n        // });\n        this.chart.series[0].update({data: this.counties}, false);\n      }\n      this.changeSelection.emit(point);\n      this.mixpanel.track('Map', {selected: point.category, name: point.name});\n    };\n    const getSuffixes = (a: any, b: any) => this.thousandSuff.transform(a, b);\n    if (environment.enableTimers) { console.time('MAP: Get All Data'); }\n    this.mapService.getAllAllData().subscribe(data => {\n      if (environment.enableTimers) { console.timeEnd('MAP: Get All Data'); }\n      this.national.emit(data.countries);\n      this.counties = data.counties;\n      this.countiesOriginal = JSON.parse(JSON.stringify(data.counties));\n      this.states = data.states;\n      if (this.states.length < 52) {\n        for (const a of usMapStates.features) {\n          let insert = true;\n          for (const b of data.states) {\n            if (a.properties['hc-a2'] === b.code) {\n              insert = false;\n            }\n          }\n          if (insert) {\n            this.states.push({id: a.properties['hc-a2'], code: a.properties['hc-a2'], value: 0});\n          }\n        }\n      }\n      if (environment.enableTimers) { console.time('MAP: Chart Load'); }\n      // @ts-ignore\n      this.chart = Highcharts.mapChart('container',  {\n        chart: {\n          borderWidth: 0,\n          marginRight: 20, // for the legend\n          backgroundColor: 'transparent',\n          height: '50%',\n          events: {\n            // tslint:disable-next-line:typedef\n            load() {\n              if (environment.enableTimers) { console.timeEnd('MAP: Chart Load'); }\n            },\n          },\n          resetZoomButton: {\n            theme: {\n              display: 'none',\n            },\n          },\n        },\n\n        credits: {\n          enabled: false,\n        },\n\n        tooltip: {\n          useHTML: true,\n          // tslint:disable-next-line:typedef\n          formatter() {\n            if (this.point.value !== 0) {\n              // @ts-ignore\n              const people = getSuffixes(Number(this.point.people), 2);\n              // @ts-ignore\n              const households = getSuffixes(Number(this.point.households), 2);\n              let score = 0;\n              // @ts-ignore\n              if (this.point?.options?.valueUpdated) {\n                score = Math.round(((Number(this.point.value) + Number.EPSILON) * 100) / 10);\n              } else {\n                score = Math.round((Number(this.point.value) + Number.EPSILON) * 100);\n              }\n              let colorValue = 'tooltip-score-color-two';\n              if (score > 33 && score < 47) {\n                colorValue = 'tooltip-score-color-three';\n              } else if (score > 46 && score < 55) {\n                colorValue = 'tooltip-score-color-four';\n              } else if (score > 54 && score < 60) {\n                colorValue = 'tooltip-score-color-five';\n              } else if (score > 59 && score < 70) {\n                colorValue = 'tooltip-score-color-six';\n              } else if (score > 69) {\n                colorValue = 'tooltip-score-color-seven';\n              }\n              // @ts-ignore\n              return `<div class=\"tooltip-wrapper\"><div class=\"tooltip-upper\"><span class=\"tooltip-score ${colorValue}\">${score}</span><span class=\"tooltip-name\">${this.point.name}</span></div><div class=\"tooltip-lower\"><div class=\"tooltip-lower-left\"><span class=\"tooltip-person-icon\"></span>PEOPLE<br><span class=\"tooltip-lower-numbers\">${people}</span></div><div class=\"tooltip-lower-right\"><span class=\"tooltip-home-icon\"></span>HOUSEHOLDS<br><span class=\"tooltip-lower-numbers\">${households}</span></div></div></div>`;\n            } else {\n              return '<div class=\"tooltip-wrapper\">Call your sales representative for access to this data.</div>';\n            }\n          },\n        },\n\n        title: {\n          text: '',\n        },\n\n        legend: {\n          enabled: false,\n        },\n\n        mapNavigation: {\n          enabled: false,\n        },\n\n        colorAxis: [{\n          min: 0,\n          max: 20,\n          tickInterval: 5,\n          stops: [\n            [0, '#f2f2f2'],\n            [0.015, '#dfc27d'],\n            [0.022, '#f6e8c3'],\n            [0.026, '#e1ead7'],\n            [0.030, '#c7eae5'],\n            [0.035, '#80cdc1'],\n            [0.040, '#01665e'],\n            [0.05, '#dfc27d'],\n            [0.15, '#f6e8c3'],\n            [0.20, '#e1ead7'],\n            [0.25, '#c7eae5'],\n            [0.30, '#80cdc1'],\n            [0.35, '#01665e'],\n            [1, '#3d3d3d'],\n          ],\n          labels: {\n            format: '{value}%',\n          },\n        }, {\n          min: 0,\n          max: 25,\n          stops: [\n            [0, '#ebebeb'],\n            [0.010, '#dfc27d'],\n            [0.014, '#f6e8c3'],\n            [0.018, '#e1ead7'],\n            [0.020, '#c7eae5'],\n            [0.025, '#80cdc1'],\n            [0.030, '#01665e'],\n            [1, '#3d3d3d'],\n          ],\n          labels: {\n            format: '{value}%',\n          },\n        }],\n\n        plotOptions: {\n          mapline: {\n            showInLegend: false,\n            enableMouseTracking: false,\n          },\n        },\n\n        series: [{\n          mapData: usMapCounties,\n          data: this.counties,\n          name: undefined,\n          colorAxis: 0,\n          joinBy: ['hc-key', 'code'],\n          borderWidth: 0.5,\n          allowPointSelect: true,\n          states: {\n            hover: {\n              borderColor: 'black',\n            },\n            select: {\n              enable: true,\n              color: 'rgb(0,0,0,0.01)',\n              borderColor: 'black',\n            },\n          },\n          events: {\n            // tslint:disable-next-line:typedef\n            click(e) {\n              const mapSelection: MapSelection = {\n                name: e.point.name,\n                // @ts-ignore\n                households: e.point.households,\n                // @ts-ignore\n                people: e.point.people,\n                // @ts-ignore\n                score: parseFloat(e.point.value).toFixed(2),\n                // @ts-ignore\n                category: 'county',\n                // @ts-ignore\n                id: e.point.id,\n                // @ts-ignore\n                valueUpdated: e.point.options.valueUpdated,\n                // @ts-ignore\n                state: e.point.options.state,\n                // // @ts-ignore\n                // degree: e.point.degree,\n                // // @ts-ignore\n                // income: e.point.income,\n                // // @ts-ignore\n                // marital: e.point.marital,\n              };\n              mapSelection.mapType = 'nationalCountyMap';\n              selectionChanged(mapSelection);\n              // const clickedPoint = e;\n              // const chart = this.chart.series[0].chart;\n\n              // TODO below will be good for selecting multiple counties\n              // chart.series.forEach((s) => {\n              //   s.points.forEach((p) => {\n              //     // @ts-ignore\n              //     if (p.code === clickedPoint.point.code) {\n              //       console.log(p);\n              //       p.select(undefined, true);\n              //     }\n              //   });\n              // });\n            },\n          },\n        },\n        {\n          mapData: usMapStates,\n          data: this.states,\n          name: undefined,\n          colorAxis: 1,\n          color: 'rgba(0,0,0,0.01)',\n          visible: false,\n          joinBy: ['postal-code', 'code'],\n          events: {\n            click(e): void {\n              // console.log(e);\n              const mapSelection: MapSelection = {\n                name: e.point.name,\n                // @ts-ignore\n                households: e.point.households,\n                // @ts-ignore\n                people: e.point.people,\n                // @ts-ignore\n                score: parseFloat(e.point.value).toFixed(2),\n                // @ts-ignore\n                category: 'state',\n                // @ts-ignore\n                id: e.point.id,\n                // gender: e.point.gender,\n                // // @ts-ignore\n                // age: e.point.age,\n                // // @ts-ignore\n                // degree: e.point.degree,\n                // // @ts-ignore\n                // income: e.point.income,\n                // // @ts-ignore\n                // marital: e.point.marital,\n              };\n              selectionChanged(mapSelection);\n              e.point.zoomTo();\n              mainChart();\n            },\n          },\n        },\n        {\n          type: 'mapline',\n          name: 'State borders',\n          data: this.borderLines,\n          color: 'white',\n          shadow: false,\n        }],\n      });\n    }, () => {}, () => { console.log('I\\'m Done!!!!!!!!'); }  );\n  }\n  changeOverlay(): void {\n    this.mixpanel.track('Map Buttons', {clicked: 'change layer'});\n    const isStateVisible = this.chart.series[1].visible;\n    this.chart.series[1].update({\n      visible: !isStateVisible,\n    });\n  }\n  zoomInControls(): void {\n    this.chart.mapZoom(0.5);\n  }\n  zoomOutControls(): void {\n    this.chart.mapZoom(1.5);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_colors';\n.buttons {\n  position: absolute;\n  top: 65%;\n  right: 0;\n  z-index: 1;\n\n  .button-wrapper {\n    margin-bottom: 10px;\n\n    button {\n      margin-left: 130px;\n      padding: 0 5px;\n      color: #000;\n      box-shadow: 0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n                  0px 2px 1px -1px rgba(0, 0, 0, 0.12),\n                  0px 1px 3px 0px rgba(0, 0, 0, 0.2);\n      border-radius: 4px;\n      border: none;\n      font-size: 16px;\n      cursor: pointer;\n      background-color: #fff;\n    }\n  }\n}\n#container {\n  max-height: 700px;\n}\n.spinner-margin{\n  display: block;\n  margin-top: 110px;\n  margin-bottom: 160px;\n}\n.progress-bar-wrapper {\n  width: 135px;\n  background-color: #FFFFFF;\n  padding: 10px;\n  border-radius: 6px;\n  font-size: 11px;\n  float: right;\n\n  #progress-bar-container {\n    width: 120px;\n    height: 7px;\n    margin: 0 auto;\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n    border-radius: 35px;\n    overflow: hidden;\n  }\n\n  .progress-bar-child {\n    width: 100%;\n    height: 100%;\n  }\n\n  .progress {\n    color: white;\n    text-align: center;\n    line-height: 75px;\n    font-size: 35px;\n    font-family: \"Segoe UI\";\n    animation-direction: reverse;\n    background: #e5405e;\n\n    /* Chrome10-25,Safari5.1-6 */\n    background: linear-gradient(to right, $civics-level-one 0%, $civics-level-three 25%, $civics-level-four 50%, $civics-level-six 75%, $civics-level-seven 100%);\n  }\n\n  .shrinker {\n    background-color: black;\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n  }\n\n  .timelapse {\n    animation-name: timelapse;\n    animation-fill-mode: forwards;\n    animation-duration: 0.5s;\n    animation-timing-function: cubic-bezier(.86, .05, .4, .96);\n  }\n\n  @keyframes timelapse {\n    0% {\n      width: 100%;\n    }\n    100% {\n      width: 0%;\n    }\n  }\n}\n",
                    "styleUrl": "./us-map.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "thousandSuff",
                        "type": "ThousandSuffixesPipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "thousandSuff",
                        "type": "ThousandSuffixesPipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "zoomIn": {
                    "name": "zoomIn",
                    "setSignature": {
                        "name": "zoomIn",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "MapSelection | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "MapSelection | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div id=\"container\">\n  <span class=\"spinner-margin\">\n    <exp-loading-spinner></exp-loading-spinner>\n  </span>\n</div>\n<div class=\"buttons\">\n  <div class=\"button-wrapper\">\n    <button nzTooltipTitle=\"Zoom In\" nzTooltipPlacement=\"left\" nz-tooltip (click)=\"zoomInControls()\"><i nz-icon nzType=\"plus\" nzTheme=\"outline\"></i></button>\n  </div>\n  <div class=\"button-wrapper\">\n    <button nzTooltipTitle=\"Zoom Out\" nzTooltipPlacement=\"left\" nz-tooltip (click)=\"zoomOutControls()\"><i nz-icon nzType=\"minus\" nzTheme=\"outline\"></i></button>\n  </div>\n<!--  <div class=\"button-wrapper\">-->\n<!--    <button nzTooltipTitle=\"Add/Remove States Overlay\" nzTooltipPlacement=\"left\" nz-tooltip (click)=\"changeOverlay()\"><i nz-icon nzType=\"eye\" nzTheme=\"fill\"></i></button>-->\n<!--  </div>-->\n  <div class=\"progress-bar-wrapper\">\n    <p style=\"margin-bottom: 10px;\">AVERAGE CIVIC SCORE</p>\n    <div id=\"progress-bar-container\">\n      <div class=\"progress-bar-child progress\"></div>\n      <div class=\"progress-bar-child shrinker timelapse\"></div>\n    </div>\n    <p style=\"margin-bottom: 0;\"><span style=\"margin-right: 38%;\">0</span><span style=\"margin-right: 35%;\">50</span><span>100</span></p>\n  </div>\n</div>\n"
        },
        {
            "name": "UsMapCongressionalDistrictsComponent",
            "id": "component-UsMapCongressionalDistrictsComponent-5138d017b9a3cc0fe0c0fe4d043bd450976a58ff5b8c54f19e929958669b194b71df1e76b54848d8e8bdbe80c6ef4bc8477da08db641a09f9e9fa93270e3df2c",
            "file": "projects/explorer/src/app/shared/components/us-map-congressional-districts/us-map-congressional-districts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-us-map-congressional-districts",
            "styleUrls": [
                "./us-map-congressional-districts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./us-map-congressional-districts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "changeSelection",
                    "defaultValue": "new EventEmitter<MapSelection>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "drilldown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "properties",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport Highcharts from 'highcharts/highmaps';\nimport Drilldown from 'highcharts/modules/drilldown';\nimport usMapStates from '@highcharts/map-collection/countries/us/us-all.geo.json';\nimport { MapService } from '../../services/map.service';\nimport { ThousandSuffixesPipe } from '../../pipes/thousand-suff.pipe';\nimport { MapSelection } from '../us-map/map-selection.model';\nimport { MixpanelService } from '../../services/mixpanel.service';\nDrilldown(Highcharts);\n\n@Component({\n  selector: 'exp-us-map-congressional-districts',\n  templateUrl: './us-map-congressional-districts.component.html',\n  styleUrls: ['./us-map-congressional-districts.component.scss']\n})\nexport class UsMapCongressionalDistrictsComponent implements OnInit {\n  drilldown: any;\n  properties: any;\n  value: any;\n  chart: any;\n  states: any;\n\n  @Output() changeSelection = new EventEmitter<MapSelection>();\n\n  constructor(private mapService: MapService, private thousandSuff: ThousandSuffixesPipe, private mixpanel: MixpanelService) { }\n\n  ngOnInit(): void {\n    const usMap = Highcharts.geojson(usMapStates);\n    const getSuffixes = (a: any, b: any) => {\n      return this.thousandSuff.transform(a, b);\n    };\n    const getCountyData = (selected: string): Observable<any> => {\n      return this.mapService.getCountyData('county', selected);\n    };\n    const countyClickedSelection = (point: any) => {\n      const countySelections = {\n        households: point.point.options.totals.households,\n        id: point.point.segment,\n        name: point.point.options.county,\n        people: point.point.options.totals.people,\n        score: point.point.options.totals.civic_score,\n        state: point.point.options.state\n      };\n      this.mixpanel.setPeople({map: 'us-CD', clicked: countySelections});\n      this.changeSelection.emit(countySelections);\n    };\n    const stateClickedSelection = (point: any) => {\n      const stateSelections = {\n        id: point.id,\n        people: point.people,\n        name: point.name\n      };\n      this.mixpanel.setPeople({map: 'us-state', clicked: stateSelections});\n      this.changeSelection.emit(stateSelections);\n    };\n\n    this.mapService.getStateData().subscribe(data => {\n      this.changeSelection.emit({id: 'US', name: 'US'});\n      this.states = data.states;\n      usMap.forEach((el: any, i) => {\n        el.drilldown = el.properties['hc-key'];\n      });\n      // @ts-ignore\n      this.charts = Highcharts.mapChart('container', {\n        chart: {\n          backgroundColor: 'transparent',\n          height: '50%',\n          events: {\n            drilldown(e: any): void {\n              const chart = this as any;\n              const cDistricts = 'countries/us/custom/' + e.point.drilldown + '-congress-113';\n              const mapData = require(`@highcharts/map-collection/${cDistricts}.geo.json`);\n              const provinceData = Highcharts.geojson(mapData);\n              // Set map value\n              getCountyData(e.point.code).subscribe(res => {\n                res.data.county.forEach((f: any) => {\n                  f.value = f.totals.civic_score;\n                });\n                // Set map value\n                provinceData.forEach((el: any) => {\n                  el.properties['hc-key'] = el.properties['hc-key'].toUpperCase();\n                  el.name = e.point.name;\n                  el.people = e.point.people;\n                  el.households = e.point.households;\n                });\n\n                chart.addSeriesAsDrilldown(e.point, {\n                  name: e.point.name,\n                  mapData: provinceData,\n                  data: res.data.county,\n                  joinBy: ['hc-key', 'segment'],\n                  states: {\n                    hover: {\n                      color: 'rgba(225, 234, 215, 0.5)',\n                      borderColor: 'gray'\n                    }\n                  },\n                  events: {\n                    // tslint:disable-next-line:typedef\n                    click(el: any) {\n                      countyClickedSelection(el);\n                    }\n                  },\n\n                  dataLabels: {\n                    enabled: false\n                  }\n                });\n\n                chart.setTitle(null, {text: e.point.name});\n              });\n            },\n            drillup(a: any): void{\n              stateClickedSelection({id: 'US', name: 'US'});\n            }\n          }\n        },\n        credits: {\n          enabled: false\n        },\n        legend: {\n          enabled: false\n        },\n        tooltip: {\n          useHTML: true,\n          // tslint:disable-next-line:typedef\n          formatter() {\n            if (this.point.value !== 0) {\n              let score = 0;\n              // @ts-ignore\n              if (this.point?.options?.valueUpdated) {\n                score = Math.round(((Number(this.point.value) + Number.EPSILON) * 100) / 10);\n              } else {\n                score = Math.round((Number(this.point.value) + Number.EPSILON) * 100);\n              }\n              let colorValue = 'tooltip-score-color-two';\n              if (score > 33 && score < 47) {\n                colorValue = 'tooltip-score-color-three';\n              } else if (score > 46 && score < 55) {\n                colorValue = 'tooltip-score-color-four';\n              } else if (score > 54 && score < 60) {\n                colorValue = 'tooltip-score-color-five';\n              } else if (score > 59 && score < 70) {\n                colorValue = 'tooltip-score-color-six';\n              } else if (score > 69) {\n                colorValue = 'tooltip-score-color-seven';\n              }\n              // @ts-ignore\n              const name = this.point.county ? this.point.county : this.point.name;\n              // @ts-ignore\n              const people = this.point.county ?\n                // @ts-ignore\n                getSuffixes(Number(this.point.totals.people), 2) : getSuffixes(Number(this.point.people), 2);\n              // @ts-ignore\n              const households = this.point.county ?\n                // @ts-ignore\n                getSuffixes(Number(this.point.totals.households), 2) : getSuffixes(Number(this.point.households), 2);\n\n              // @ts-ignore\n              return `<div class=\"tooltip-wrapper\"><div class=\"tooltip-upper\"><span class=\"tooltip-score ${colorValue}\">${score}</span><span class=\"tooltip-name\">${name}</span></div><div class=\"tooltip-lower\"><div class=\"tooltip-lower-left\"><span class=\"tooltip-person-icon\"></span>PEOPLE<br><span class=\"tooltip-lower-numbers\">${people}</span></div><div class=\"tooltip-lower-right\"><span class=\"tooltip-home-icon\"></span>HOUSEHOLDS<br><span class=\"tooltip-lower-numbers\">${households}</span></div></div></div>`;\n            } else {\n              return `<div class=\"tooltip-wrapper\">Call your sales representative for access to this data.</div>`;\n            }\n          }\n        },\n        title: {\n          text: ''\n        },\n        colorAxis: {\n          min: 0,\n          max: 25,\n          stops: [\n            [0, '#ebebeb'],\n            [0.010, '#dfc27d'],\n            [0.014, '#f6e8c3'],\n            [0.018, '#e1ead7'],\n            [0.020, '#c7eae5'],\n            [0.025, '#80cdc1'],\n            [0.030, '#01665e'],\n            [1, '#3d3d3d'],\n          ],\n          labels: {\n            format: '{value}%'\n          },\n        },\n\n        mapNavigation: {\n          enabled: false,\n          buttonOptions: {\n            verticalAlign: 'bottom'\n          }\n        },\n        plotOptions: {\n          map: {\n            states: {\n              hover: {\n                color: '#F8BA03'\n              }\n            }\n          },\n          mapline: {\n            showInLegend: false,\n            enableMouseTracking: false\n          }\n        },\n        series: [\n          {\n            name: 'National',\n            mapData: usMap,\n            data: this.states,\n            visible: true,\n            joinBy: ['postal-code', 'code'],\n            states: {\n              hover: {\n                color: 'rgba(225, 234, 215, 0.5)',\n                borderColor: 'gray'\n              }\n            },\n            point: {\n              events: {\n                click(state: any): void{\n                  stateClickedSelection(state.point);\n                }\n              }\n            }\n          }\n        ],\n      });\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_colors';\n\n.buttons {\n  position: absolute;\n  top: 75%;\n  right: 0;\n  z-index: 1;\n\n  .button-wrapper {\n    margin-bottom: 10px;\n\n    button {\n      margin-left: 130px;\n      padding: 0 5px;\n      color: #00AEEF;\n      box-shadow: 0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n      0px 2px 1px -1px rgba(0, 0, 0, 0.12),\n      0px 1px 3px 0px rgba(0, 0, 0, 0.2);\n      border-radius: 4px;\n      border: none;\n      font-size: 16px;\n      cursor: pointer;\n    }\n  }\n}\n.progress-bar-wrapper {\n  width: 135px;\n  background-color: #FFFFFF;\n  padding: 10px;\n  border-radius: 6px;\n  font-size: 11px;\n  float: right;\n\n  #progress-bar-container {\n    width: 120px;\n    height: 7px;\n    margin: 0 auto;\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n    border-radius: 35px;\n    overflow: hidden;\n  }\n\n  .progress-bar-child {\n    width: 100%;\n    height: 100%;\n  }\n\n  .progress {\n    color: white;\n    text-align: center;\n    line-height: 75px;\n    font-size: 35px;\n    font-family: \"Segoe UI\";\n    animation-direction: reverse;\n    background: #e5405e;\n\n    /* Chrome10-25,Safari5.1-6 */\n    background: linear-gradient(to right, $civics-level-one 0%, $civics-level-three 25%, $civics-level-four 50%, $civics-level-six 75%, $civics-level-seven 100%);\n  }\n\n  .shrinker {\n    background-color: black;\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n  }\n\n  .timelapse {\n    animation-name: timelapse;\n    animation-fill-mode: forwards;\n    animation-duration: 0.5s;\n    animation-timing-function: cubic-bezier(.86, .05, .4, .96);\n  }\n\n  @keyframes timelapse {\n    0% {\n      width: 100%;\n    }\n    100% {\n      width: 0%;\n    }\n  }\n}\n",
                    "styleUrl": "./us-map-congressional-districts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "thousandSuff",
                        "type": "ThousandSuffixesPipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "thousandSuff",
                        "type": "ThousandSuffixesPipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"container\">\n    <div style=\"margin-bottom: 150px; margin-top: 100px;\"><exp-loading-spinner></exp-loading-spinner></div>\n</div>\n<div class=\"buttons\">\n    <div class=\"progress-bar-wrapper\">\n        <p style=\"margin-bottom: 10px;\">AVERAGE CIVIC SCORE</p>\n        <div id=\"progress-bar-container\">\n            <div class=\"progress-bar-child progress\"></div>\n            <div class=\"progress-bar-child shrinker timelapse\"></div>\n        </div>\n        <p style=\"margin-bottom: 0;\"><span style=\"margin-right: 38%;\">0</span><span style=\"margin-right: 35%;\">50</span><span>100</span></p>\n    </div>\n</div>\n"
        },
        {
            "name": "UsMapStatesComponent",
            "id": "component-UsMapStatesComponent-10b1237d444f57c1a909a45bac90603fb267928fa1d31f92044c4ae5c41e7b50f7d14118e3dfd1f7ef9f684f5b1c9d466d36874296dbdafb40344b6f6ad2cf6b",
            "file": "projects/explorer/src/app/shared/components/us-map-states/us-map-states.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "exp-us-map-states",
            "styleUrls": [
                "./us-map-states.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./us-map-states.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedRegions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "sidepanel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "GeoFiltersDrawerComponent",
                    "decorators": []
                },
                {
                    "name": "updateMapSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "updateMapWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeSelection",
                    "defaultValue": "new EventEmitter<MapSelection>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "statesLoaded",
                    "defaultValue": "new EventEmitter<MapSelection>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "geoFilterInUse",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "properties",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectedMap",
                    "defaultValue": "'States'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "setPoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "userMapSelection",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "zoomPoint",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "displayCongressionalDistrictsMap",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "geoFilterSelections",
                            "type": "TreeRegion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "geoFilterSelections",
                            "type": "TreeRegion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayNationalMap",
                    "args": [
                        {
                            "name": "geoFilterSelections",
                            "type": "TreeRegion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "cancelFilterUpdate",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "geoFilterSelections",
                            "type": "TreeRegion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cancelFilterUpdate",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayPostalMap",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "geoFilterSelections",
                            "type": "TreeRegion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "zipcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 380,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "geoFilterSelections",
                            "type": "TreeRegion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "zipcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayStateMap",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "geoFilterSelections",
                            "type": "TreeRegion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "geoFilterSelections",
                            "type": "TreeRegion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loopDataForSearch",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "zipcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 457,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "zipcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loopDataForSelect",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "point",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 447,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "point",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetMap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "zoomInControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 469,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "zoomOutControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 472,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport Highcharts from 'highcharts/highmaps';\nimport usMapStates from '@highcharts/map-collection/countries/us/us-all.geo.json';\nimport { MapService } from '../../services/map.service';\nimport { ThousandSuffixesPipe } from '../../pipes/thousand-suff.pipe';\nimport { MapSelection } from '../us-map/map-selection.model';\nimport { StateModel } from '../../models/states.model';\nimport { MixpanelService } from '../../services/mixpanel.service';\nimport { ExplorerState } from '../../stores/state-store/explorer.reducer';\nimport * as ExplorerActions from '../../stores/state-store/explorer.actions';\nimport { HighchartMapService } from '../../services/highchart-map.service';\nimport { TreeRegion } from '../geo-filters-drawer/tree-region.model';\nimport { GeoFiltersDrawerComponent } from '../geo-filters-drawer/geo-filters-drawer.component';\nimport { FilterState } from '../../stores/filter-store/explorer-filters.reducer';\nimport * as FilterActions from '../../stores/filter-store/explorer-filters.actions';\nimport { GeoFilterState } from '../../stores/geo-filter-store/explorer-geo-filter.reducer';\nimport * as GeoFilterActions from '../../stores/geo-filter-store/explorer-geo-filter.actions';\n\n@Component({\n  selector: 'exp-us-map-states',\n  templateUrl: './us-map-states.component.html',\n  styleUrls: ['./us-map-states.component.scss'],\n})\nexport class UsMapStatesComponent implements OnInit {\n  @Output() changeSelection = new EventEmitter<MapSelection>();\n  @Output() statesLoaded = new EventEmitter<MapSelection>();\n\n  properties: any;\n  value: any;\n  chart: any;\n  states: any;\n  setPoint: any;\n  loading = false;\n  selectedMap = 'States';\n  geoFilterInUse = false;\n  zoomPoint = '';\n  // This is the Observable for the selector test.\n  // states$: Observable<StateModel[]> | undefined;\n\n  constructor(\n    private mapService: MapService,\n    private thousandSuff: ThousandSuffixesPipe,\n    private mixpanel: MixpanelService,\n    private store: Store<ExplorerState>,\n    private highchartMapService: HighchartMapService,\n    private filterStore: Store<FilterState>,\n    private geoFilter: Store<GeoFilterState>,\n  ) { }\n\n  // tslint:disable-next-line:variable-name\n  // private _selectedRegions?: TreeRegion[];\n  @Input() sidepanel?: GeoFiltersDrawerComponent;\n\n  @Input() set updateMapWidth(newWidth: number) {\n    // @ts-ignore\n    const width = document.getElementById('container').clientWidth - newWidth;\n    if (this.chart) {\n      this.chart.update({\n        chart: {\n          width,\n        },\n      });\n    }\n  }\n\n  @Input() set updateMapSelection(mapSelected: string) {\n    this.userMapSelection(mapSelected);\n    this.selectedMap = mapSelected;\n  }\n\n  @Input() set selectedRegions(value: TreeRegion[] | undefined) {\n    let searchCounty = false;\n    if (value && value[0] && value[0].level === 0) {\n      let stateSelections = {};\n      if (value[0].search) {\n        stateSelections = {\n          id: value[0].name,\n          people: 1,\n          name: value[0].name,\n          level: undefined,\n          segment: [],\n        };\n      } else {\n        stateSelections = {\n          id: 'Custom Community',\n          people: 1,\n          name: value[0].communityName || 'Custom Community',\n          level: undefined,\n          segment: [],\n        };\n      }\n      value.forEach((el: any) => {\n        const tempSegment: any = {state: el.key.replace('US-', '')};\n        // @ts-ignore\n        stateSelections.segment.push(tempSegment);\n      });\n      this.changeSelection.emit(stateSelections);\n      // here we will load the national map with the states selected\n      this.displayNationalMap(value, true);\n    } else if (value && value[0] && value[0].level === 1) {\n      let countySelections = {};\n      if (value[0].search) {\n        searchCounty = true;\n        countySelections = {\n          // @ts-ignore\n          id: value[0].id,\n          people: 1,\n          name: value[0].name,\n          level: undefined,\n          segment: [],\n        };\n      } else if (value[0].communityName) {\n        countySelections = {\n          // @ts-ignore\n          id: value[0].communityName,\n          people: 1,\n          name: value[0].communityName,\n          level: undefined,\n          segment: [],\n        };\n      } else {\n        countySelections = {\n          id: 'Custom Community',\n          people: 1,\n          name: 'Custom Community',\n          level: undefined,\n          segment: [],\n        };\n      }\n\n      // here we will load the state map with the counties selected\n      if (value[0].type === 'county' || searchCounty) {\n        value.forEach((el: any) => {\n          const splitId = el.key.split('-');\n          const tempSegment: any = { state: splitId[1], county: splitId[2] };\n          // @ts-ignore\n          countySelections.segment.push(tempSegment);\n        });\n        this.changeSelection.emit(countySelections);\n        // @ts-ignore\n        this.displayStateMap(value[0].parentCode.replace('US-', ''), value[0].parentCode, value);\n      } else if (value[0].type === 'congress') {\n        value.forEach((el: any) => {\n          const splitId = el.key.split('-');\n          const tempSegment: any = { state: splitId[1], congress: splitId[2] };\n          // @ts-ignore\n          countySelections.segment.push(tempSegment);\n        });\n        this.changeSelection.emit(countySelections);\n        // @ts-ignore\n        this.displayCongressionalDistrictsMap(value[0].parentCode.replace('US-', ''), value);\n      } else if (value[0].type === 'postcode') {\n        value.forEach((el: any) => {\n          const splitId = el.key.split('-');\n          const tempSegment: any = { state: splitId[1], postcode: splitId[2] };\n          // @ts-ignore\n          countySelections.segment.push(tempSegment);\n        });\n        this.changeSelection.emit(countySelections);\n        // @ts-ignore\n        this.displayPostalMap(value[0].parentCode.replace('US-', ''), value);\n      }\n    } else if (value && value[0] && value[0].level === 2) {\n      // @ts-ignore\n      this.displayPostalMap(value[0].name, undefined, value[0].id);\n    }\n  }\n\n  ngOnInit(): void {\n    this.displayNationalMap();\n  }\n\n  userMapSelection = (e: string): void => {\n    if (e === 'Congressional Districts' && this.setPoint){\n      this.displayCongressionalDistrictsMap(this.setPoint.code);\n    }\n    if (e === 'Zipcodes' && this.setPoint) {\n      this.displayPostalMap(this.setPoint.code);\n    }\n    if (e === 'Counties' && this.setPoint) {\n      this.displayStateMap(this.setPoint.code, this.setPoint.id);\n    }\n    if (e === 'States') {\n      this.displayNationalMap();\n    }\n  };\n\n  displayNationalMap(geoFilterSelections?: TreeRegion[], cancelFilterUpdate?: boolean): void {\n    this.geoFilterInUse = geoFilterSelections ? true : false;\n    const stateClickedSelection = (point: any): void => {\n      this.setPoint = {\n        id: point.id,\n        code: point.code,\n        name: point.name,\n        people: point.people,\n        households: point.households,\n      };\n      const stateSelections = {\n        id: point.id,\n        people: point.people,\n        name: point.name,\n        level: 'state',\n        segment: {state: point.id.replace('US-', '')},\n      };\n      this.mixpanel.setPeople({map: 'us-state', clicked: stateSelections});\n      this.changeSelection.emit(stateSelections);\n      this.userMapSelection('Counties');\n      this.filterStore.dispatch(FilterActions.filterExplorerSaveCommunityActive({saveButtonActive: false}));\n    };\n    const usMap = Highcharts.geojson(usMapStates);\n    // This is and example of using the effect to load the data into the stores.\n    // We dispatch and action that will trigger the effect that will populate the stores.\n    // After the stores is populated you can use a selector to retrieve the data.\n    // Example of the selector is at the bottom of the file.\n    // this.stores.dispatch(ExplorerActions.loadExplorersStates());\n    this.mapService.getStateData().subscribe((states: StateModel[]) => {\n      if (!cancelFilterUpdate) {\n        this.changeSelection.emit({id: 'US', name: 'US'});\n      }\n      // after data is returned we are adding the state data to the stores.\n      this.store.dispatch(ExplorerActions.loadExplorersStatesSuccess({states}));\n      this.states = states;\n      usMap.forEach((el: any, i) => {\n        el.drilldown = el.properties['hc-key'];\n      });\n      if (geoFilterSelections) {\n        this.states.forEach((fl: any) => {\n          fl.selected = true;\n          geoFilterSelections.forEach((gl: any) => {\n            if (fl.code === gl.key.replace('US-', '')) {\n              fl.selected = false;\n            }\n          });\n        });\n      }\n      const nationalMap = this.highchartMapService.getChart(usMap, this.states, ['postal-code', 'code']);\n      nationalMap.series[0].point.events = {\n        click(state: any): void{\n          if (!geoFilterSelections) {\n            stateClickedSelection(state.point);\n          }\n        },\n      };\n      this.chart = Highcharts.mapChart('container', nationalMap);\n      // This is and example if we wanted to use the selector\n      // to get data from the stores after it's been populated.\n      //\n      // this.states$ = this.stores.pipe(select(statesList));\n      // this.states$.subscribe(resTwo => console.log(resTwo));\n    });\n  }\n\n  resetMap(): void {\n    this.displayNationalMap();\n    this.sidepanel?.clearSelections();\n    this.geoFilter.dispatch(GeoFilterActions.geoFilterExplorerApplied({geoFilters: null}));\n  }\n\n  displayStateMap(code: string, id: string, geoFilterSelections?: TreeRegion[]): void {\n    this.geoFilterInUse = geoFilterSelections ? true : false;\n    const countyClickedSelection = (point: any, data: any): void => {\n      const splitId = point.point.segment.split('-');\n      const countySelections = {\n        households: point.point.options.totals.households,\n        id: point.point.segment,\n        name: point.point.options.county,\n        people: point.point.options.totals.people,\n        score: point.point.options.totals.civic_score,\n        state: point.point.options.state,\n        level: 'county',\n        segment: {state: splitId[1], county: splitId[2]},\n      };\n      this.mixpanel.setPeople({map: 'us-counties', clicked: countySelections});\n      this.changeSelection.emit(countySelections);\n      const newData = this.loopDataForSelect(data, point.point.segment);\n      this.chart.series[0].update({data: newData}, false);\n      this.chart.redraw();\n    };\n    this.loading = true;\n    this.highchartMapService.getJsonfile('county', id.toLowerCase()).subscribe( map => {\n      const provinceData = Highcharts.geojson(map);\n      this.mapService.getCountyData('county', code).subscribe(res => {\n        res.data.county.forEach((f: any) => {\n          f.value = f.totals.civic_score;\n        });\n        // Set map value\n        provinceData.forEach((el: any) => {\n          el.properties['hc-key'] = el.properties['hc-key'].toUpperCase();\n        });\n        if (geoFilterSelections) {\n          res.data.county.forEach((fl: any) => {\n            fl.selected = true;\n            geoFilterSelections.forEach((gl: any) => {\n              if (fl.segment === gl.key) {\n                fl.selected = false;\n              }\n            });\n          });\n        }\n        const countiesMap = this.highchartMapService.getChart(provinceData, res.data.county, ['hc-key', 'segment']);\n        countiesMap.series[0].events = {\n          click(county: any): void{\n            if (!geoFilterSelections) {\n              countyClickedSelection(county, res.data.county);\n            }\n          },\n        };\n        this.chart = Highcharts.mapChart('container', countiesMap);\n        // this.chart.addSeries(countiesMap, true);\n        // this.chart.series[0].remove();\n\n        this.loading = false;\n      });\n    });\n  }\n\n  displayCongressionalDistrictsMap(code: string, geoFilterSelections?: TreeRegion[]): void {\n    this.geoFilterInUse = !!geoFilterSelections;\n    const districtClickedSelection = (point: any, data: any): void => {\n      const splitId = point.point.segment.split('-');\n      const districtSelections = {\n        households: point.point.options.totals.households,\n        id: point.point.segment,\n        name: point.point.name,\n        people: point.point.options.totals.people,\n        score: point.point.options.totals.civic_score,\n        state: point.point.options.state,\n        level: 'congress',\n        segment: {state: splitId[1], congress: splitId[2]},\n      };\n      this.mixpanel.setPeople({map: 'us-congressional-district', clicked: districtSelections});\n      this.changeSelection.emit(districtSelections);\n      const newData = this.loopDataForSelect(data, point.point.segment);\n      this.chart.series[0].update({data: newData}, false);\n      this.chart.redraw();\n    };\n    this.loading = true;\n    this.highchartMapService.getJsonfile('district', code).subscribe( res => {\n      res.features.forEach((fl: any) => {\n        fl.properties.name = fl.properties.NAMELSAD;\n      });\n      this.mapService.getCountyData('congress', code).subscribe(data => {\n        data.data.county.forEach((el: any) => {\n          if (el.segment) {\n            if (el.congress.length === 1) {\n              el.congress = '0' + el.congress;\n            }\n            el.people = el.totals.people;\n            el.households = el.totals.households;\n            el.value = el.totals.civic_score;\n          }\n        });\n        if (geoFilterSelections) {\n          data.data.county.forEach((fl: any) => {\n            fl.selected = true;\n            geoFilterSelections.forEach((gl: any) => {\n              if (fl.segment === gl.key) {\n                fl.selected = false;\n              }\n            });\n          });\n        }\n        const districtsMap = this.highchartMapService.getChart(Highcharts.geojson(res), data.data.county, ['CD116FP', 'congress']);\n        districtsMap.series[0].events = {\n          click(district: any): void{\n            if (!geoFilterSelections) {\n              districtClickedSelection(district, data.data.county);\n            }\n          },\n        };\n        // this.chart.addSeries(districtsMap, true);\n        // this.chart.series[0].remove();\n        this.chart = Highcharts.mapChart('container', districtsMap);\n        this.loading = false;\n      });\n    });\n  }\n\n  displayPostalMap(code: string, geoFilterSelections?: TreeRegion[], zipcode?: string): void {\n    this.geoFilterInUse = !!geoFilterSelections;\n    const postalClickedSelection = (point: any, data: any): void => {\n      const splitId = point.point.segment.split('-');\n      const postalSelections = {\n        households: point.point.options.totals.households,\n        id: point.point.segment,\n        name: point.point.name,\n        people: point.point.options.totals.people,\n        score: point.point.options.totals.civic_score,\n        state: point.point.options.state,\n        level: 'postcode',\n        segment: {state: splitId[1], postcode: splitId[2]},\n      };\n      this.mixpanel.setPeople({map: 'us-postal', clicked: postalSelections});\n      this.changeSelection.emit(postalSelections);\n      const newData = this.loopDataForSelect(data, point.point.segment);\n      this.chart.series[0].update({data: newData}, false);\n      this.chart.redraw();\n    };\n    this.loading = true;\n    this.highchartMapService.getJsonfile('postal', code).subscribe( res => {\n      res.features.forEach((fl: any) => {\n        fl.properties.name = fl.properties.GEOID20;\n      });\n      this.mapService.getCountyData('postcode', code).subscribe(data => {\n        data.data.county.forEach((el: any) => {\n          el.people = el.totals.people;\n          el.households = el.totals.households;\n          el.value = el.totals.civic_score;\n        });\n        if (geoFilterSelections) {\n          data.data.county.forEach((fl: any) => {\n            fl.selected = true;\n            geoFilterSelections.forEach((gl: any) => {\n              if (fl.segment === gl.key) {\n                fl.selected = false;\n                fl.id = fl.segment;\n                this.zoomPoint = fl.segment;\n              }\n            });\n          });\n        }\n        if (code && zipcode) {\n          // @ts-ignore\n          data.data.county = this.loopDataForSearch(data.data.county, zipcode);\n        }\n        const postalMap = this.highchartMapService.getChart(Highcharts.geojson(res), data.data.county, ['GEOID20', 'postcode']);\n        postalMap.series[0].events = {\n          click(postal: any): void{\n            if (!geoFilterSelections) {\n              postalClickedSelection(postal, data.data.county);\n            }\n          },\n        };\n        // this.chart.addSeries(postalMap, true);\n        // this.chart.series[0].remove();\n        this.chart = Highcharts.mapChart('container', postalMap);\n        this.loading = false;\n        if (this.zoomPoint !== '') {\n          this.chart.get(this.zoomPoint).zoomTo();\n          this.chart.mapZoom(5);\n          this.zoomPoint = '';\n        }\n      });\n    });\n  }\n  loopDataForSelect(data: any, point: any): any {\n    data.forEach((fl: any) => {\n      if (point === fl.segment) {\n        fl.selected = false;\n      } else {\n        fl.selected = true;\n      }\n    });\n    return data;\n  }\n  loopDataForSearch(data: any, zipcode: string): any {\n    data.forEach((fl: any) => {\n      if (zipcode === fl.postcode) {\n        fl.selected = false;\n        fl.id = fl.segment;\n        this.zoomPoint = fl.segment;\n      } else {\n        fl.selected = true;\n      }\n    });\n    return data;\n  }\n  zoomInControls(): void {\n    this.chart.mapZoom(0.5);\n  }\n  zoomOutControls(): void {\n    this.chart.mapZoom(1.5);\n  }\n}\n// add to test deployment pipeline\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_colors';\n\n.buttons {\n  position: absolute;\n  top: 65%;\n  right: 0;\n  z-index: 1;\n\n  .button-wrapper {\n    margin-bottom: 10px;\n\n    button {\n      margin-left: 130px;\n      padding: 0 5px;\n      color: #000;\n      box-shadow: 0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n      0px 2px 1px -1px rgba(0, 0, 0, 0.12),\n      0px 1px 3px 0px rgba(0, 0, 0, 0.2);\n      border-radius: 4px;\n      border: none;\n      font-size: 16px;\n      cursor: pointer;\n      background-color: #fff;\n    }\n  }\n}\n.progress-bar-wrapper {\n  width: 135px;\n  background-color: #FFFFFF;\n  padding: 10px;\n  border-radius: 6px;\n  font-size: 11px;\n  float: right;\n\n  #progress-bar-container {\n    width: 120px;\n    height: 7px;\n    margin: 0 auto;\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n    border-radius: 35px;\n    overflow: hidden;\n  }\n\n  .progress-bar-child {\n    width: 100%;\n    height: 100%;\n  }\n\n  .progress {\n    color: white;\n    text-align: center;\n    line-height: 75px;\n    font-size: 35px;\n    font-family: \"Segoe UI\";\n    animation-direction: reverse;\n    background: #e5405e;\n\n    /* Chrome10-25,Safari5.1-6 */\n    background: linear-gradient(to right, $civics-level-one 0%, $civics-level-three 25%, $civics-level-four 50%, $civics-level-six 75%, $civics-level-seven 100%);\n  }\n\n  .shrinker {\n    background-color: black;\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n  }\n\n  .timelapse {\n    animation-name: timelapse;\n    animation-fill-mode: forwards;\n    animation-duration: 0.5s;\n    animation-timing-function: cubic-bezier(.86, .05, .4, .96);\n  }\n\n  @keyframes timelapse {\n    0% {\n      width: 100%;\n    }\n    100% {\n      width: 0%;\n    }\n  }\n}\n.highcharts-point-select{\n  stroke: black !important;\n  stroke-width: 5px !important;\n}\n",
                    "styleUrl": "./us-map-states.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "thousandSuff",
                        "type": "ThousandSuffixesPipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<ExplorerState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "highchartMapService",
                        "type": "HighchartMapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "geoFilter",
                        "type": "Store<GeoFilterState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "thousandSuff",
                        "type": "ThousandSuffixesPipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mixpanel",
                        "type": "MixpanelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<ExplorerState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "highchartMapService",
                        "type": "HighchartMapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterStore",
                        "type": "Store<FilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "geoFilter",
                        "type": "Store<GeoFilterState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "updateMapWidth": {
                    "name": "updateMapWidth",
                    "setSignature": {
                        "name": "updateMapWidth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newWidth",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "newWidth",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "updateMapSelection": {
                    "name": "updateMapSelection",
                    "setSignature": {
                        "name": "updateMapSelection",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "mapSelected",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 67,
                        "jsdoctags": [
                            {
                                "name": "mapSelected",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selectedRegions": {
                    "name": "selectedRegions",
                    "setSignature": {
                        "name": "selectedRegions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "TreeRegion[] | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 72,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "TreeRegion[] | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div id=\"container\" [hidden]=\"loading\">\n    <div style=\"margin-bottom: 150px; margin-top: 100px;\"><exp-loading-spinner></exp-loading-spinner></div>\n</div>\n<div *ngIf=\"loading\" style=\"margin-bottom: 150px; margin-top: 100px;\"><exp-loading-spinner></exp-loading-spinner></div>\n<div class=\"buttons\">\n    <div class=\"button-wrapper\">\n        <button nzTooltipTitle=\"Zoom In\" nzTooltipPlacement=\"left\" nz-tooltip (click)=\"zoomInControls()\"><i nz-icon nzType=\"plus\" nzTheme=\"outline\"></i></button>\n    </div>\n    <div class=\"button-wrapper\">\n        <button nzTooltipTitle=\"Zoom Out\" nzTooltipPlacement=\"left\" nz-tooltip (click)=\"zoomOutControls()\"><i nz-icon nzType=\"minus\" nzTheme=\"outline\"></i></button>\n    </div>\n    <div *ngIf=\"selectedMap !== 'States' || geoFilterInUse\" class=\"button-wrapper\">\n        <button nzTooltipTitle=\"Back to Nationwide\" nzTooltipPlacement=\"left\" nz-tooltip (click)=\"resetMap()\"><i nz-icon nzType=\"rollback\" nzTheme=\"outline\"></i></button>\n    </div>\n    <div class=\"progress-bar-wrapper\">\n        <p style=\"margin-bottom: 10px;\">AVERAGE CIVIC SCORE</p>\n        <div id=\"progress-bar-container\">\n            <div class=\"progress-bar-child progress\"></div>\n            <div class=\"progress-bar-child shrinker timelapse\"></div>\n        </div>\n        <p style=\"margin-bottom: 0;\"><span style=\"margin-right: 38%;\">0</span><span style=\"margin-right: 35%;\">50</span><span>100</span></p>\n    </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AdminModule",
            "id": "module-AdminModule-c447f1d260348cf9f4737a1e6e8adc3a042ce43328cfa4b17c1e7676ed788b862bcc3825cb835efc77900d6ef4ef55b717c108fb0f586d8533af35a60f1363a0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/app.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [],
                    "optional": false,
                    "returnType": "ModuleWithProviders<any>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "sourceCode": "import { APP_BASE_HREF } from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\n\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nregisterLocaleData(en);\n\n/** config ng-zorro-antd i18n **/\nimport { NZ_I18N, en_US } from 'ng-zorro-antd/i18n';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { reducers, metaReducers } from './store/reducers';\nimport { environment } from '../environments/environment';\nimport { AppEffects } from './store/effects/app.effects';\nimport { GraphQLModule } from './graphql.module';\nimport { UserEffects } from './store/effects/user.effects';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n\n    // NgRx\n    StoreModule.forRoot(reducers, { metaReducers }),\n    EffectsModule.forRoot([AppEffects, UserEffects]),\n    !environment.production ? StoreDevtoolsModule.instrument({maxAge: 25}) : [],\n    GraphQLModule,\n  ],\n  // Set router root to /\n  providers: [\n    {provide: APP_BASE_HREF, useValue: '/'},\n    { provide: NZ_I18N, useValue: en_US },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n\n@NgModule({})\nexport class AdminModule{\n  static forRoot(): ModuleWithProviders<any> {\n    return {\n      ngModule: AppModule,\n      providers: []\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminModule",
            "id": "module-AdminModule-5fa68c32040ea02b0249aed54a9961d03e35fadee407b72da8ad68ec3aeaee433292df01575b398b6819ef2fbe850cb3d23731af65e606e19aa01847f621d826-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/pages/admin/admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminComponent } from './admin.component';\nimport { MembersComponent } from './components/members/members.component';\nimport { MemberRowComponent } from './components/members/member-row/member-row.component';\nimport { AccountsComponent } from './components/accounts/accounts.component';\nimport { AccountCollapseComponent } from './components/accounts/account-collapse/account-collapse.component';\nimport { PermissionsComponent } from './components/permissions/permissions.component';\nimport { SubPermissionComponent } from './components/permissions/sub-permission/sub-permission.component';\nimport { PermissionCardComponent } from './components/permissions/permission-card/permission-card.component';\n\nimport { AdminRoutingModule } from './admin-routing.module';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  declarations: [\n    AdminComponent,\n    MembersComponent,\n    MemberRowComponent,\n    AccountsComponent,\n    AccountCollapseComponent,\n    PermissionsComponent,\n    SubPermissionComponent,\n    PermissionCardComponent,\n  ],\n  exports: [AdminComponent],\n  imports: [CommonModule, AdminRoutingModule, SharedModule],\n})\nexport class AdminModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountCollapseComponent"
                        },
                        {
                            "name": "AccountsComponent"
                        },
                        {
                            "name": "AdminComponent"
                        },
                        {
                            "name": "MemberRowComponent"
                        },
                        {
                            "name": "MembersComponent"
                        },
                        {
                            "name": "PermissionCardComponent"
                        },
                        {
                            "name": "PermissionsComponent"
                        },
                        {
                            "name": "SubPermissionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminRoutingModule",
            "id": "module-AdminRoutingModule-f3178211c4d7400065bce0a50d576ee942b5d008fd9a8a77724db892daf8848914c41106d22738c4550ec39420d89c72bcee0506d3775df54fa491172d7609a2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/pages/admin/admin-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { MembersComponent } from './components/members/members.component';\nimport { AccountsComponent } from './components/accounts/accounts.component';\nimport { PermissionsComponent } from './components/permissions/permissions.component';\n\nconst routes: Routes = [\n  {\n    path: 'members',\n    component: MembersComponent,\n  },\n  {\n    path: 'accounts',\n    component: AccountsComponent,\n  },\n  {\n    path: 'permissions',\n    component: PermissionsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AdminRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-011f0b7f16a4fa0769a34a74f28be72463b25468fb094d28ffb422bb88d816f4ae2f18d67598e8ed985cc5e51485c27ecef3a87de9e8104b5e9502afcdf981a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {AdminModule} from \"../../projects/admin/src/app/app.module\";\nimport {ExplorerModule} from \"../../projects/explorer/src/app/app.module\";\nimport {FormsModule} from \"../../projects/forms/src/app/app.module\";\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    AdminModule.forRoot(),\n    ExplorerModule.forRoot(),\n    FormsModule.forRoot(),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "ExplorerModule"
                        },
                        {
                            "name": "FormsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-c447f1d260348cf9f4737a1e6e8adc3a042ce43328cfa4b17c1e7676ed788b862bcc3825cb835efc77900d6ef4ef55b717c108fb0f586d8533af35a60f1363a0-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { APP_BASE_HREF } from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\n\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nregisterLocaleData(en);\n\n/** config ng-zorro-antd i18n **/\nimport { NZ_I18N, en_US } from 'ng-zorro-antd/i18n';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { reducers, metaReducers } from './store/reducers';\nimport { environment } from '../environments/environment';\nimport { AppEffects } from './store/effects/app.effects';\nimport { GraphQLModule } from './graphql.module';\nimport { UserEffects } from './store/effects/user.effects';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n\n    // NgRx\n    StoreModule.forRoot(reducers, { metaReducers }),\n    EffectsModule.forRoot([AppEffects, UserEffects]),\n    !environment.production ? StoreDevtoolsModule.instrument({maxAge: 25}) : [],\n    GraphQLModule,\n  ],\n  // Set router root to /\n  providers: [\n    {provide: APP_BASE_HREF, useValue: '/'},\n    { provide: NZ_I18N, useValue: en_US },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n\n@NgModule({})\nexport class AdminModule{\n  static forRoot(): ModuleWithProviders<any> {\n    return {\n      ngModule: AppModule,\n      providers: []\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "!environment"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "GraphQLModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-066a658b4f561b04b78d91ed8d24118ed461338cd8fbba1b824fd9e8dc812ece995e041520ea7485da053c18b2eee2a99e665205c41d4199ee614b7b4e9c298a-2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/explorer/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NzAutocompleteModule } from 'ng-zorro-antd/auto-complete';\nimport { NzAvatarModule } from 'ng-zorro-antd/avatar';\nimport { NzButtonModule  } from 'ng-zorro-antd/button';\nimport { NzCardModule } from 'ng-zorro-antd/card';\nimport { NzDividerModule  } from 'ng-zorro-antd/divider';\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\nimport { NzFormModule  } from 'ng-zorro-antd/form';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzInputModule } from 'ng-zorro-antd/input';\nimport { NzLayoutModule } from 'ng-zorro-antd/layout';\nimport { NzMenuModule } from 'ng-zorro-antd/menu';\nimport { NzMessageModule } from 'ng-zorro-antd/message';\nimport { NzRadioModule } from 'ng-zorro-antd/radio';\nimport { NzPopconfirmModule } from 'ng-zorro-antd/popconfirm';\nimport { NzPopoverModule } from 'ng-zorro-antd/popover';\nimport { NzSelectModule  } from 'ng-zorro-antd/select';\nimport { NzSwitchModule  } from 'ng-zorro-antd/switch';\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\nimport { NzTableModule  } from 'ng-zorro-antd/table';\nimport { NzTagModule  } from 'ng-zorro-antd/tag';\nimport { NzAlertModule } from 'ng-zorro-antd/alert';\nimport { NZ_I18N } from 'ng-zorro-antd/i18n';\nimport { en_US } from 'ng-zorro-antd/i18n';\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HighchartsChartModule } from 'highcharts-angular';\nimport { NzCheckboxModule } from 'ng-zorro-antd/checkbox';\nimport { NzTreeModule } from 'ng-zorro-antd/tree';\nimport { AuthModule, AuthHttpInterceptor } from '@auth0/auth0-angular';\nimport { NzSpinModule } from 'ng-zorro-antd/spin';\nimport { NzModalModule } from 'ng-zorro-antd/modal';\nimport { NzDrawerModule } from 'ng-zorro-antd/drawer';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GraphQLModule } from './graphql.module';\nimport { HomeComponent } from './home/home.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeaderComponent } from './shared/components/header/header.component';\nimport { UsMapComponent } from './shared/components/us-map/us-map.component';\nimport { SearchBoxComponent } from './shared/components/search-box/search-box.component';\nimport { SelectionSummaryComponent } from './shared/components/selection-summary/selection-summary.component';\nimport { ThousandSuffixesPipe } from './shared/pipes/thousand-suff.pipe';\nimport { LoginComponent } from './shared/components/login/login.component';\n\nimport {environment, environment as env} from '../environments/environment';\nimport { LogoutComponent } from './shared/components/logout/logout.component';\nimport { HorizontalBarChartComponent } from './shared/components/horizontal-bar-chart/horizontal-bar-chart.component';\nimport { LoadingSpinnerComponent } from './shared/components/loading-spinner/loading-spinner.component';\nimport { AccountsComponent } from './accounts/accounts.component';\nimport { AccountInterceptor } from './accounts/account.interceptor';\nimport { MaintenanceComponent } from './maintenance/maintenance.component';\nimport { AuthGuardMaintenance } from './shared/services/auth-maintenance.service';\nimport { FaqComponent } from './faq/faq.component';\nimport { SelectionToolTagboxComponent } from './shared/components/selection-tool-tagbox/selection-tool-tagbox.component';\nimport { FilterBoxComponent } from './shared/components/filter-box/filter-box.component';\nimport { UsMapStatesComponent } from './shared/components/us-map-states/us-map-states.component';\nimport { UsMapCongressionalDistrictsComponent } from './shared/components/us-map-congressional-districts/us-map-congressional-districts.component';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { EffectsModule } from '@ngrx/effects';\nimport * as fromExplorer from './shared/stores/state-store/explorer.reducer';\nimport { ExplorerEffects } from './shared/stores/state-store/explorer.effects';\nimport { GeoFiltersDrawerComponent } from './shared/components/geo-filters-drawer/geo-filters-drawer.component';\nimport * as fromExplorerFilters from './shared/stores/filter-store/explorer-filters.reducer';\nimport { ExplorerFiltersEffects } from './shared/stores/filter-store/explorer-filters.effects';\nimport { MyCommunitiesDrawerComponent } from './shared/components/my-communities-drawer/my-communities-drawer.component';\nimport * as fromExplorerGeoFilter from './shared/stores/geo-filter-store/explorer-geo-filter.reducer';\nimport { ExplorerGeoFilterEffects } from './shared/stores/geo-filter-store/explorer-geo-filter.effects';\nimport { CommunitySaveDrawerComponent } from './shared/components/community-save-drawer/community-save-drawer.component';\nimport { CompareChartsComponent } from './shared/components/compare-charts/compare-charts.component';\n\n\nregisterLocaleData(en);\n\nconst auth = env.auth;\nconst httpInterceptor = env.httpInterceptor;\n\nif (auth.domain === '{PLACEHOLDER}') {\n  switch (window.location.hostname) {\n  case 'login.civicexplorer.com':\n    auth.domain = 'helm-prod.us.auth0.com';\n    auth.clientId = 'rMOk6HWMNk51ZFWIW5pn43iunnL6yyto';\n    auth.audience = 'http://helmteam.us';\n    break;\n  case 'staging-www.civicexplorer.com':\n    auth.domain = 'helm-staging.us.auth0.com';\n    auth.clientId = 'BYjmdIqgpSnVrIZLSmldUCvPVdwZzGpD';\n    auth.audience = 'http://helmteam.us';\n    break;\n  }\n}\nif (env.apiURL === '{PLACEHOLDER}') {\n  switch (window.location.hostname) {\n  case 'login.civicexplorer.com':\n    httpInterceptor.allowedList = ['https://production.explorer.organizer.helmahead.com/*'];\n    break;\n  case 'staging-www.civicexplorer.com':\n    httpInterceptor.allowedList = ['https://staging.explorer.organizer.helmahead.com/*'];\n    break;\n  case 'sandbox-www.civicexplorer.com':\n    httpInterceptor.allowedList = ['https://sandbox.explorer.organizer.helmahead.com/*'];\n    break;\n  }\n}\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    AdminComponent,\n    DashboardComponent,\n    HeaderComponent,\n    UsMapComponent,\n    SearchBoxComponent,\n    SelectionSummaryComponent,\n    ThousandSuffixesPipe,\n    LoginComponent,\n    LogoutComponent,\n    HorizontalBarChartComponent,\n    LoadingSpinnerComponent,\n    AccountsComponent,\n    MaintenanceComponent,\n    FaqComponent,\n    SelectionToolTagboxComponent,\n    FilterBoxComponent,\n    UsMapStatesComponent,\n    UsMapCongressionalDistrictsComponent,\n    GeoFiltersDrawerComponent,\n    MyCommunitiesDrawerComponent,\n    CommunitySaveDrawerComponent,\n    CompareChartsComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    HighchartsChartModule,\n    GraphQLModule,\n    NzAvatarModule,\n    NzButtonModule,\n    NzCardModule,\n    NzDividerModule,\n    NzDropDownModule,\n    NzFormModule,\n    NzGridModule,\n    NzIconModule,\n    NzInputModule,\n    NzLayoutModule,\n    NzMenuModule,\n    NzMessageModule,\n    NzRadioModule,\n    NzPopconfirmModule,\n    NzPopoverModule,\n    NzSelectModule,\n    NzSwitchModule,\n    NzToolTipModule,\n    NzTableModule,\n    NzTagModule,\n    NzAlertModule,\n    GraphQLModule,\n    NzAutocompleteModule,\n    ReactiveFormsModule,\n    NzCheckboxModule,\n    NzTreeModule,\n    NzModalModule,\n    NzDrawerModule,\n    AuthModule.forRoot({\n      ...auth,\n      httpInterceptor: {\n        ...httpInterceptor,\n      },\n    }),\n    NzSpinModule,\n    StoreModule.forRoot({}, {}),\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\n    EffectsModule.forRoot([]),\n    StoreModule.forFeature(fromExplorer.explorersFeatureKey, fromExplorer.reducer),\n    EffectsModule.forFeature([ExplorerEffects, ExplorerFiltersEffects, ExplorerGeoFilterEffects]),\n    StoreModule.forFeature(fromExplorerFilters.explorerFiltersFeatureKey, fromExplorerFilters.reducer),\n    StoreModule.forFeature(fromExplorerGeoFilter.explorerGeoFilterFeatureKey, fromExplorerGeoFilter.reducer),\n  ],\n  providers: [\n    { provide: NZ_I18N, useValue: en_US },\n    { provide: HTTP_INTERCEPTORS, useClass: AuthHttpInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: AccountInterceptor, multi: true },\n    ThousandSuffixesPipe,\n    AuthGuardMaintenance,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n\n@NgModule({})\nexport class ExplorerModule{\n  static forRoot(): ModuleWithProviders<any> {\n    return {\n      ngModule: AppModule,\n      providers: []\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AccountInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountsComponent"
                        },
                        {
                            "name": "AdminComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CommunitySaveDrawerComponent"
                        },
                        {
                            "name": "CompareChartsComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "FaqComponent"
                        },
                        {
                            "name": "FilterBoxComponent"
                        },
                        {
                            "name": "GeoFiltersDrawerComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "HorizontalBarChartComponent"
                        },
                        {
                            "name": "LoadingSpinnerComponent"
                        },
                        {
                            "name": "MaintenanceComponent"
                        },
                        {
                            "name": "MyCommunitiesDrawerComponent"
                        },
                        {
                            "name": "SearchBoxComponent"
                        },
                        {
                            "name": "SelectionSummaryComponent"
                        },
                        {
                            "name": "SelectionToolTagboxComponent"
                        },
                        {
                            "name": "ThousandSuffixesPipe"
                        },
                        {
                            "name": "UsMapComponent"
                        },
                        {
                            "name": "UsMapCongressionalDistrictsComponent"
                        },
                        {
                            "name": "UsMapStatesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "FormsModule"
                        },
                        {
                            "name": "GraphQLModule"
                        },
                        {
                            "name": "GraphQLModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-e3490730f426a398e2af2efa2303bf411371cca0eb637fdc463181ef05f183b3cc0e595911f128ef30ebc02f13bc736ba505c0a3c3793b520e0a92104009192d-3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/forms/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {ModuleWithProviders, NgModule} from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n@NgModule({})\nexport class FormsModule {\n  static forRoot(): ModuleWithProviders<any> {\n    return {\n      ngModule: AppModule,\n      providers: []\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-97e07deb51b7439cd1b850c759bdb28fdc482eb1e8629193fd3c905a91027f2f7fc92893442e4af8d67f28088bd7926b82be483c917aed393a688d1a5b8d4cb5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {AdminModule} from \"../../projects/admin/src/app/app.module\";\nimport {ExplorerModule} from \"../../projects/explorer/src/app/app.module\";\nimport {AppComponent} from \"./app.component\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => \"import(`../../projects/admin/src/app/app.module`) .then(m => m.AdminModule)\"\n  }, {\n    path: '',\n    loadChildren: () => \"import(`../../projects/explorer/src/app/app.module`) .then(m => m.ExplorerModule)\"\n  }, {\n    path: '',\n    loadChildren: () => \"import(`../../projects/forms/src/app/app.module`) .then(m => m.FormsModule)\"\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { enableTracing: true }),\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-1170ddbbdeee481b987e0b35828d515afe09a2cc1ce31e645759a660aaa06ec107c90f7ffdb3743f8a37e13a596c152ed510ae790adf02909cfcfd534ff335ba-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginModule } from './login/login.module';\nimport { JoinModule } from './pages/join/join.module';\nimport { PageModule } from './pages/page.module';\nimport { SelectOrganizationModule } from './select-organization/select-organization.module';\nimport { AuthGuardService } from './shared/services/auth/auth-guard.service';\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: (): Promise<PageModule> => \"import('./pages/page.module').then(m => m.PageModule)\",\n    canActivate: [AuthGuardService],\n  },\n  {\n    path: 'login',\n    loadChildren: (): Promise<LoginModule> => \"import('./login/login.module').then(m => m.LoginModule)\",\n  },\n  {\n    path: 'join',\n    loadChildren: (): Promise<JoinModule> => \"import('./pages/join/join.module').then(m => m.JoinModule)\",\n  },\n  {\n    path: 'select-organization',\n    loadChildren: (): Promise<SelectOrganizationModule> =>\n      \"import('./select-organization/select-organization.module').then(m => m.SelectOrganizationModule)\",\n    canActivate: [AuthGuardService],\n  },\n  {\n    path: '**',\n    redirectTo: 'login',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-5f268337f1c035b83ea9413083deacf2e15b6363f747d3a1ebc980b50861527b84fbca12ea0f5c3bc3f7096942947218fb1b63b4e9725f0c3e6d640cd4a9e1c9-2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/explorer/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomeComponent } from './home/home.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { MaintenanceComponent } from './maintenance/maintenance.component';\n\nimport { AuthGuard } from '@auth0/auth0-angular';\nimport { AccountsComponent } from './accounts/accounts.component';\nimport { AccountSelectionGuard } from './shared/services/account-selection.guard';\nimport { AuthGuardMaintenance } from './shared/services/auth-maintenance.service';\nimport { FaqComponent } from './faq/faq.component';\n\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent, canActivate: [AuthGuardMaintenance] },\n  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard, AccountSelectionGuard, AuthGuardMaintenance] },\n  { path: 'admin', component: AdminComponent, canActivate: [AuthGuard, AuthGuardMaintenance] },\n  { path: 'accounts', component: AccountsComponent, canActivate: [AuthGuard, AuthGuardMaintenance] },\n  { path: 'maintenance', component: MaintenanceComponent },\n  { path: 'faq', component: FaqComponent },\n  { path: '**', component: HomeComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-1ea2f067aa619b20116535530ff0074db387e4934ca47dcb2cc20cc5639a3b03618ee97da7e215dba80cbf6f602e8b2f4da82b7ca796f696acad4e5fcecf637c-3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/forms/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {AppComponent} from \"./app.component\";\n\nconst routes: Routes = [\n  {path: 'forms', component: AppComponent},\n  {path: 'forms/dashboard', component: AppComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExplorerModule",
            "id": "module-ExplorerModule-066a658b4f561b04b78d91ed8d24118ed461338cd8fbba1b824fd9e8dc812ece995e041520ea7485da053c18b2eee2a99e665205c41d4199ee614b7b4e9c298a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/explorer/src/app/app.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [],
                    "optional": false,
                    "returnType": "ModuleWithProviders<any>",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NzAutocompleteModule } from 'ng-zorro-antd/auto-complete';\nimport { NzAvatarModule } from 'ng-zorro-antd/avatar';\nimport { NzButtonModule  } from 'ng-zorro-antd/button';\nimport { NzCardModule } from 'ng-zorro-antd/card';\nimport { NzDividerModule  } from 'ng-zorro-antd/divider';\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\nimport { NzFormModule  } from 'ng-zorro-antd/form';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzInputModule } from 'ng-zorro-antd/input';\nimport { NzLayoutModule } from 'ng-zorro-antd/layout';\nimport { NzMenuModule } from 'ng-zorro-antd/menu';\nimport { NzMessageModule } from 'ng-zorro-antd/message';\nimport { NzRadioModule } from 'ng-zorro-antd/radio';\nimport { NzPopconfirmModule } from 'ng-zorro-antd/popconfirm';\nimport { NzPopoverModule } from 'ng-zorro-antd/popover';\nimport { NzSelectModule  } from 'ng-zorro-antd/select';\nimport { NzSwitchModule  } from 'ng-zorro-antd/switch';\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\nimport { NzTableModule  } from 'ng-zorro-antd/table';\nimport { NzTagModule  } from 'ng-zorro-antd/tag';\nimport { NzAlertModule } from 'ng-zorro-antd/alert';\nimport { NZ_I18N } from 'ng-zorro-antd/i18n';\nimport { en_US } from 'ng-zorro-antd/i18n';\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HighchartsChartModule } from 'highcharts-angular';\nimport { NzCheckboxModule } from 'ng-zorro-antd/checkbox';\nimport { NzTreeModule } from 'ng-zorro-antd/tree';\nimport { AuthModule, AuthHttpInterceptor } from '@auth0/auth0-angular';\nimport { NzSpinModule } from 'ng-zorro-antd/spin';\nimport { NzModalModule } from 'ng-zorro-antd/modal';\nimport { NzDrawerModule } from 'ng-zorro-antd/drawer';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GraphQLModule } from './graphql.module';\nimport { HomeComponent } from './home/home.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeaderComponent } from './shared/components/header/header.component';\nimport { UsMapComponent } from './shared/components/us-map/us-map.component';\nimport { SearchBoxComponent } from './shared/components/search-box/search-box.component';\nimport { SelectionSummaryComponent } from './shared/components/selection-summary/selection-summary.component';\nimport { ThousandSuffixesPipe } from './shared/pipes/thousand-suff.pipe';\nimport { LoginComponent } from './shared/components/login/login.component';\n\nimport {environment, environment as env} from '../environments/environment';\nimport { LogoutComponent } from './shared/components/logout/logout.component';\nimport { HorizontalBarChartComponent } from './shared/components/horizontal-bar-chart/horizontal-bar-chart.component';\nimport { LoadingSpinnerComponent } from './shared/components/loading-spinner/loading-spinner.component';\nimport { AccountsComponent } from './accounts/accounts.component';\nimport { AccountInterceptor } from './accounts/account.interceptor';\nimport { MaintenanceComponent } from './maintenance/maintenance.component';\nimport { AuthGuardMaintenance } from './shared/services/auth-maintenance.service';\nimport { FaqComponent } from './faq/faq.component';\nimport { SelectionToolTagboxComponent } from './shared/components/selection-tool-tagbox/selection-tool-tagbox.component';\nimport { FilterBoxComponent } from './shared/components/filter-box/filter-box.component';\nimport { UsMapStatesComponent } from './shared/components/us-map-states/us-map-states.component';\nimport { UsMapCongressionalDistrictsComponent } from './shared/components/us-map-congressional-districts/us-map-congressional-districts.component';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { EffectsModule } from '@ngrx/effects';\nimport * as fromExplorer from './shared/stores/state-store/explorer.reducer';\nimport { ExplorerEffects } from './shared/stores/state-store/explorer.effects';\nimport { GeoFiltersDrawerComponent } from './shared/components/geo-filters-drawer/geo-filters-drawer.component';\nimport * as fromExplorerFilters from './shared/stores/filter-store/explorer-filters.reducer';\nimport { ExplorerFiltersEffects } from './shared/stores/filter-store/explorer-filters.effects';\nimport { MyCommunitiesDrawerComponent } from './shared/components/my-communities-drawer/my-communities-drawer.component';\nimport * as fromExplorerGeoFilter from './shared/stores/geo-filter-store/explorer-geo-filter.reducer';\nimport { ExplorerGeoFilterEffects } from './shared/stores/geo-filter-store/explorer-geo-filter.effects';\nimport { CommunitySaveDrawerComponent } from './shared/components/community-save-drawer/community-save-drawer.component';\nimport { CompareChartsComponent } from './shared/components/compare-charts/compare-charts.component';\n\n\nregisterLocaleData(en);\n\nconst auth = env.auth;\nconst httpInterceptor = env.httpInterceptor;\n\nif (auth.domain === '{PLACEHOLDER}') {\n  switch (window.location.hostname) {\n  case 'login.civicexplorer.com':\n    auth.domain = 'helm-prod.us.auth0.com';\n    auth.clientId = 'rMOk6HWMNk51ZFWIW5pn43iunnL6yyto';\n    auth.audience = 'http://helmteam.us';\n    break;\n  case 'staging-www.civicexplorer.com':\n    auth.domain = 'helm-staging.us.auth0.com';\n    auth.clientId = 'BYjmdIqgpSnVrIZLSmldUCvPVdwZzGpD';\n    auth.audience = 'http://helmteam.us';\n    break;\n  }\n}\nif (env.apiURL === '{PLACEHOLDER}') {\n  switch (window.location.hostname) {\n  case 'login.civicexplorer.com':\n    httpInterceptor.allowedList = ['https://production.explorer.organizer.helmahead.com/*'];\n    break;\n  case 'staging-www.civicexplorer.com':\n    httpInterceptor.allowedList = ['https://staging.explorer.organizer.helmahead.com/*'];\n    break;\n  case 'sandbox-www.civicexplorer.com':\n    httpInterceptor.allowedList = ['https://sandbox.explorer.organizer.helmahead.com/*'];\n    break;\n  }\n}\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    AdminComponent,\n    DashboardComponent,\n    HeaderComponent,\n    UsMapComponent,\n    SearchBoxComponent,\n    SelectionSummaryComponent,\n    ThousandSuffixesPipe,\n    LoginComponent,\n    LogoutComponent,\n    HorizontalBarChartComponent,\n    LoadingSpinnerComponent,\n    AccountsComponent,\n    MaintenanceComponent,\n    FaqComponent,\n    SelectionToolTagboxComponent,\n    FilterBoxComponent,\n    UsMapStatesComponent,\n    UsMapCongressionalDistrictsComponent,\n    GeoFiltersDrawerComponent,\n    MyCommunitiesDrawerComponent,\n    CommunitySaveDrawerComponent,\n    CompareChartsComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    HighchartsChartModule,\n    GraphQLModule,\n    NzAvatarModule,\n    NzButtonModule,\n    NzCardModule,\n    NzDividerModule,\n    NzDropDownModule,\n    NzFormModule,\n    NzGridModule,\n    NzIconModule,\n    NzInputModule,\n    NzLayoutModule,\n    NzMenuModule,\n    NzMessageModule,\n    NzRadioModule,\n    NzPopconfirmModule,\n    NzPopoverModule,\n    NzSelectModule,\n    NzSwitchModule,\n    NzToolTipModule,\n    NzTableModule,\n    NzTagModule,\n    NzAlertModule,\n    GraphQLModule,\n    NzAutocompleteModule,\n    ReactiveFormsModule,\n    NzCheckboxModule,\n    NzTreeModule,\n    NzModalModule,\n    NzDrawerModule,\n    AuthModule.forRoot({\n      ...auth,\n      httpInterceptor: {\n        ...httpInterceptor,\n      },\n    }),\n    NzSpinModule,\n    StoreModule.forRoot({}, {}),\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\n    EffectsModule.forRoot([]),\n    StoreModule.forFeature(fromExplorer.explorersFeatureKey, fromExplorer.reducer),\n    EffectsModule.forFeature([ExplorerEffects, ExplorerFiltersEffects, ExplorerGeoFilterEffects]),\n    StoreModule.forFeature(fromExplorerFilters.explorerFiltersFeatureKey, fromExplorerFilters.reducer),\n    StoreModule.forFeature(fromExplorerGeoFilter.explorerGeoFilterFeatureKey, fromExplorerGeoFilter.reducer),\n  ],\n  providers: [\n    { provide: NZ_I18N, useValue: en_US },\n    { provide: HTTP_INTERCEPTORS, useClass: AuthHttpInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: AccountInterceptor, multi: true },\n    ThousandSuffixesPipe,\n    AuthGuardMaintenance,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n\n@NgModule({})\nexport class ExplorerModule{\n  static forRoot(): ModuleWithProviders<any> {\n    return {\n      ngModule: AppModule,\n      providers: []\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormsModule",
            "id": "module-FormsModule-e3490730f426a398e2af2efa2303bf411371cca0eb637fdc463181ef05f183b3cc0e595911f128ef30ebc02f13bc736ba505c0a3c3793b520e0a92104009192d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/forms/src/app/app.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [],
                    "optional": false,
                    "returnType": "ModuleWithProviders<any>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "sourceCode": "import {ModuleWithProviders, NgModule} from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n@NgModule({})\nexport class FormsModule {\n  static forRoot(): ModuleWithProviders<any> {\n    return {\n      ngModule: AppModule,\n      providers: []\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GraphQLModule",
            "id": "module-GraphQLModule-4fbb85bb7ec05f08894ff7c6748eb44801ec3121b2b3ce47ef642400e4f97a6c532db3acb2a1fe7e2ed4b12e002e2bce2c67f9ad75c0ea28da8c417da6401dbe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/graphql.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { APOLLO_OPTIONS } from 'apollo-angular';\nimport { ApolloClientOptions, InMemoryCache } from '@apollo/client/core';\nimport { HttpLink } from 'apollo-angular/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../environments/environment';\n\nconst uri = `${environment.apiURL}/graphql`;\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n  return {\n    link: httpLink.create({\n      uri,\n      headers: new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('id_token')}`,\n        organizationUuid: `${localStorage.getItem('selected_org')}`,\n      }),\n    }),\n    cache: new InMemoryCache(),\n  };\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GraphQLModule",
            "id": "module-GraphQLModule-bde498cd3fd49acadb3a81ce4c33a13e2d7e0290587a864aa360db03634f6d62e44720482de838bd87c4c2f970ac3a067d7574ca88fff772b4e12cf619436042-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/explorer/src/app/graphql.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {APOLLO_OPTIONS} from 'apollo-angular';\nimport {ApolloClientOptions, DefaultOptions, InMemoryCache} from '@apollo/client/core';\nimport {HttpLink} from 'apollo-angular/http';\n\nimport { environment  } from '../environments/environment';\n\nlet uriHost = '';\nif (environment.apiURL === '{PLACEHOLDER}') {\n  switch (window.location.hostname) {\n    case 'login.civicexplorer.com':\n      uriHost = 'https://production.explorer.organizer.helmahead.com';\n    break;\n    case 'staging-www.civicexplorer.com':\n      uriHost  = 'https://staging.explorer.organizer.helmahead.com';\n    break;\n    case 'sandbox-www.civicexplorer.com':\n      uriHost = 'https://sandbox.explorer.organizer.helmahead.com';\n    break;\n  }\n} else {\n  uriHost = environment.apiURL;\n}\n\nconst uri = uriHost + '/graphql' // <-- add the URL of the GraphQL server here\n\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n  const defaultOptions: DefaultOptions = {\n    watchQuery: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'ignore',\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all',\n    },\n  };\n  return {\n    link: httpLink.create({uri}),\n    cache: new InMemoryCache(),\n    defaultOptions,\n  };\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InviteModule",
            "id": "module-InviteModule-b3a48beab5d35b42fd9777fffd4895db55ff28333affbf3f68526834d5f43617cb26acc453ad05e37f46e5cf4e2b94fc3cbbabef725d812f0253abf55154cfd5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/pages/invite/invite.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { NzBreadCrumbModule } from 'ng-zorro-antd/breadcrumb';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzInputModule } from 'ng-zorro-antd/input';\nimport { NzTypographyModule } from 'ng-zorro-antd/typography';\nimport { NzUploadModule } from 'ng-zorro-antd/upload';\nimport { NzLayoutModule } from 'ng-zorro-antd/layout';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\nimport { NzFormModule } from 'ng-zorro-antd/form';\nimport { NzRadioModule } from 'ng-zorro-antd/radio';\nimport { NzTableModule } from 'ng-zorro-antd/table';\nimport { NzSelectModule } from 'ng-zorro-antd/select';\nimport { NzSpinModule } from 'ng-zorro-antd/spin';\n\nimport { InviteComponent } from './invite.component';\nimport { InviteMembersComponent } from './components/invite-members/invite-members.component';\nimport { InviteRoutingModule } from './invite-routing.module';\nimport { AssignRolesComponent } from './components/assign-roles/assign-roles.component';\nimport { InvitationSentComponent } from './components/invitation-sent/invitation-sent.component';\n\n@NgModule({\n  declarations: [\n    InviteComponent,\n    InviteMembersComponent,\n    AssignRolesComponent,\n    InvitationSentComponent,\n  ],\n  exports: [InviteComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    NzLayoutModule,\n    NzGridModule,\n    NzBreadCrumbModule,\n    NzIconModule,\n    NzTypographyModule,\n    NzButtonModule,\n    NzInputModule,\n    NzUploadModule,\n    NzRadioModule,\n    NzFormModule,\n    NzTableModule,\n    NzSelectModule,\n    NzSpinModule,\n\n    InviteRoutingModule,\n  ],\n})\nexport class InviteModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AssignRolesComponent"
                        },
                        {
                            "name": "InvitationSentComponent"
                        },
                        {
                            "name": "InviteComponent"
                        },
                        {
                            "name": "InviteMembersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        },
                        {
                            "name": "InviteRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InviteComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InviteRoutingModule",
            "id": "module-InviteRoutingModule-28ba3a2e985f73a7ec653698118eb406943d8647626080ccdaa686d311c4c303dc5eeeaad848243a8969370941f6c2300f94acce06d085a407edd3e2ba736599",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/pages/invite/invite-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { InviteComponent } from './invite.component';\n\nconst routes: Routes = [\n  {\n    path: '**',\n    component: InviteComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\n\nexport class InviteRoutingModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JoinModule",
            "id": "module-JoinModule-507ed42c47d8f41470f1dc6d9582f3f8c05e7f75a8fe3bed1239dc5fc6ae482c307c8ec8fdc015c2e5d2904781644104007e21684358cf10d54890ee1913556f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/pages/join/join.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { JoinComponent } from './join.component';\nimport { JoinRoutingModule } from './join-routing.module';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  declarations: [\n    JoinComponent,\n  ],\n  exports: [\n    JoinComponent,\n  ],\n  imports: [\n    SharedModule,\n    JoinRoutingModule,\n  ],\n})\n\nexport class JoinModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "JoinComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "JoinRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "JoinComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JoinRoutingModule",
            "id": "module-JoinRoutingModule-239af674238cee7d719a48bd3eaff3a3345d63f31c5f75d3cde375a62a1c566dd116dfb367c7a6a696cbfe9d0fb9c8708dfc24d7bc611461e1bbc6cd6868edf9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/pages/join/join-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { JoinComponent } from './join.component';\n\nconst routes: Routes = [\n  {\n    path: '**',\n    component: JoinComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\n\nexport class JoinRoutingModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "id": "module-LoginModule-9ca832340982a897c807619ef036aceab15b343d02fa1674a55145857476f6d38aa5dbc50fe91f94c9f7c0a6b209523cda88f0dcf7015fd73db72540c09ad5e4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/login/login.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\n\nimport { environment } from '../../environments/environment';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport * as fromLogin from './store/reducers/login.reducer';\nimport { RecoverPasswordComponent } from './recover-password/recover-password.component';\nimport { RequestSentComponent } from './request-sent/request-sent.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RecoverPasswordComponent,\n    RequestSentComponent,\n    ResetPasswordComponent,\n  ],\n  exports: [\n    LoginComponent,\n  ],\n  imports: [\n    HttpClientModule,\n    LoginRoutingModule,\n    SharedModule,\n\n    // NgRx\n    StoreModule.forFeature(fromLogin.loginFeatureKey, fromLogin.loginReducer),\n    !environment.production ? StoreDevtoolsModule.instrument({maxAge: 25}) : [],\n  ],\n  providers: [ ],\n})\n\nexport class LoginModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RecoverPasswordComponent"
                        },
                        {
                            "name": "RequestSentComponent"
                        },
                        {
                            "name": "ResetPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "!environment"
                        },
                        {
                            "name": "LoginRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginRoutingModule",
            "id": "module-LoginRoutingModule-5ac5054a26891eb5ebc5784f71b37bb5e6576e084a2e817bbbc22b3a08bfd01b2b341bea1ba6bbfaedab7bc9329087e580c299684f8913129ce5a27f61c42130",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/login/login-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RecoverPasswordComponent } from './recover-password/recover-password.component';\nimport { RequestSentComponent } from './request-sent/request-sent.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent,\n  },\n  {\n    path: 'recover-password',\n    component: RecoverPasswordComponent,\n  },\n  {\n    path: 'request-sent',\n    component: RequestSentComponent,\n  },\n  {\n    path: 'change-password',\n    component: ResetPasswordComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OrgCompLibModule",
            "id": "module-OrgCompLibModule-222e92a74ce968c3732fe4e2647d2fd157f1f87b774e2e0c090fb2a295917d04f83145dce259be8080ba28b7645967c1f5eada5fb79b4495556749040c5e5973",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/org-comp-lib/src/lib/org-comp-lib.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { OrgCompLibComponent } from './org-comp-lib.component';\n\n\n\n@NgModule({\n  declarations: [\n    OrgCompLibComponent,\n  ],\n  imports: [\n    NzButtonModule,\n  ],\n  exports: [\n    OrgCompLibComponent,\n  ],\n})\nexport class OrgCompLibModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OrgCompLibComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "OrgCompLibComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PageModule",
            "id": "module-PageModule-a90fb437f71a0b832b54b2e1e3b07b31240a5797f549f98017af51f0653ad45a78dd6e82a636fba395ceffbfa95edb46e316a7ab260a2305ddc453197030cf16",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/pages/page.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { FormsModule } from '@angular/forms';\n\nimport { environment } from 'src/environments/environment';\n\nimport { PageRoutingModule } from './page-routing.module';\nimport { AdminModule } from './admin/admin.module';\nimport { PageComponent } from './page.component';\nimport { CreateOrganizationComponent } from './organization/create-organization/create-organization.component';\nimport { OrganizationComponent } from './organization/organization.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { HomeComponent } from './home/home.component';\nimport { LogoutComponent } from '../logout/logout.component';\nimport { ProfileComponent } from './profile/profile.component';\n\n@NgModule({\n  declarations: [\n    PageComponent,\n    OrganizationComponent,\n    CreateOrganizationComponent,\n    HomeComponent,\n    LogoutComponent,\n    ProfileComponent,\n  ],\n  exports: [],\n  imports: [\n    AdminModule,\n    PageRoutingModule,\n    SharedModule,\n    FormsModule,\n\n    // NgRx\n    StoreModule.forFeature('', {}),\n    EffectsModule.forFeature([]),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production,\n    }),\n  ],\n  providers: [],\n})\nexport class PageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CreateOrganizationComponent"
                        },
                        {
                            "name": "LogoutComponent"
                        },
                        {
                            "name": "OrganizationComponent"
                        },
                        {
                            "name": "PageComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminModule"
                        },
                        {
                            "name": "FormsModule"
                        },
                        {
                            "name": "PageRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PageRoutingModule",
            "id": "module-PageRoutingModule-f352de1712b3e60a1c44b5e3a8e7f714f5fa724888371342937c027383eb417eb845f1bd0ef65360603dced224ce70d389a967ca04a96fdfd11195110a2f399a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/pages/page-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { PageComponent } from './page.component';\nimport { CreateOrganizationComponent } from './organization/create-organization/create-organization.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { AdminModule } from './admin/admin.module';\nimport { InviteModule } from './invite/invite.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PageComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: 'home',\n      },\n      {\n        path: 'dashboard',\n        component: AdminComponent,\n        loadChildren: (): Promise<AdminModule> =>\n          \"import('./admin/admin.module').then(m => m.AdminModule)\",\n      },\n      { path: 'home', component: HomeComponent },\n      { path: 'create-org', component: CreateOrganizationComponent },\n      { path: 'profile/:id', component: ProfileComponent },\n      {\n        path: 'invite',\n        loadChildren: (): Promise<InviteModule> =>\n          \"import('./invite/invite.module').then(m => m.InviteModule)\",\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectOrganizationModule",
            "id": "module-SelectOrganizationModule-a11c73872ff2ec6616d808383faa3f4fcf8ae62183f1f66bb4514175b7c7a355a12742ff6111da6c821d4ce3fb1b17e6367527d98698b0a5ab2addf552078509",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/select-organization/select-organization.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SelectOrganizationComponent } from './select-organization.component';\nimport { SelectOrganizationRoutingModule } from './select-organization-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [\n    SelectOrganizationComponent,\n  ],\n  exports: [\n    SelectOrganizationComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n\n    SharedModule,\n\n    SelectOrganizationRoutingModule,\n  ],\n})\n\nexport class SelectOrganizationModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectOrganizationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        },
                        {
                            "name": "SelectOrganizationRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectOrganizationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectOrganizationRoutingModule",
            "id": "module-SelectOrganizationRoutingModule-2553e170f55a7bc43f21b077f2db68bf894fcf3fb3aa2f3947bcf7136f80cf9c4ee07fc5fc9000ac7e9af0685685f1b7194f065041ecba262ce38bed9d9726cc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/select-organization/select-organization-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SelectOrganizationComponent } from './select-organization.component';\n\nconst routes: Routes = [\n  {\n    path: '**',\n    component: SelectOrganizationComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\n\nexport class SelectOrganizationRoutingModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-8a537221f57faec445fd80540aa0c389ce0b5ed4d6db1de3275e505e7192eaf507bfdeac23c1a164b47a2decc573b4f87784e8079876e276ab842e709733e86f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/admin/src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NzAlertModule } from 'ng-zorro-antd/alert';\nimport { NzLayoutModule } from 'ng-zorro-antd/layout';\nimport { NzTypographyModule } from 'ng-zorro-antd/typography';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\nimport { NzModalModule } from 'ng-zorro-antd/modal';\nimport { NzInputModule } from 'ng-zorro-antd/input';\nimport { NzUploadModule } from 'ng-zorro-antd/upload';\nimport { NzSelectModule } from 'ng-zorro-antd/select';\nimport { NzFormModule } from 'ng-zorro-antd/form';\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzAvatarModule } from 'ng-zorro-antd/avatar';\nimport { NzTabsModule } from 'ng-zorro-antd/tabs';\nimport { NzTableModule } from 'ng-zorro-antd/table';\nimport { NzCollapseModule } from 'ng-zorro-antd/collapse';\nimport { NzCardModule } from 'ng-zorro-antd/card';\nimport { NzSpinModule } from 'ng-zorro-antd/spin';\nimport { NzNotificationModule } from 'ng-zorro-antd/notification';\nimport { NzPopoverModule } from 'ng-zorro-antd/popover';\nimport { PasswordValidatorComponent } from './components/password-validator/password-validator.component';\n\n@NgModule({\n  declarations: [\n    PasswordValidatorComponent,\n  ],\n  imports: [\n    NzTypographyModule,\n    NzIconModule,\n  ],\n  exports: [\n    // Angular\n    CommonModule,\n    ReactiveFormsModule,\n\n    // Helm\n    PasswordValidatorComponent,\n\n    // Ant Design\n    NzAlertModule,\n    NzAvatarModule,\n    NzButtonModule,\n    NzCardModule,\n    NzCollapseModule,\n    NzDropDownModule,\n    NzFormModule,\n    NzGridModule,\n    NzIconModule,\n    NzInputModule,\n    NzLayoutModule,\n    NzModalModule,\n    NzNotificationModule,\n    NzPopoverModule,\n    NzSelectModule,\n    NzSpinModule,\n    NzTableModule,\n    NzTabsModule,\n    NzTypographyModule,\n    NzUploadModule,\n  ],\n  providers: [],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PasswordValidatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PasswordValidatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AcceptOrganizationUserInviteDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Organization>",
                "defaultValue": "createEntityAdapter<Organization>({\n  selectId: (org: Organization) => org.uuid,\n})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<any>",
                "defaultValue": "createEntityAdapter<any>()"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<StateModel>",
                "defaultValue": "createEntityAdapter<StateModel>()"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<any>",
                "defaultValue": "createEntityAdapter<any>()"
            },
            {
                "name": "addSelectedOrgUuid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/actions/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[User] Add selected organization uuid',\n  props<{ selectedOrganizationUuid: string }>(),\n)"
            },
            {
                "name": "addUserInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/actions/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[User] Add user info',\n  props<{ user: User }>(),\n)"
            },
            {
                "name": "AllDataDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.local.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'http://localhost:3000'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.staging.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://staging-api.civicexplorer.com'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.sandbox.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://sandbox-api.civicexplorer.com'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://api.civicexplorer.com'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://sandbox-api.civicexplorer.com'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.hmr.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://staging.explorer.organizer.helmahead.com'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.deploy.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'{PLACEHOLDER}'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.local.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'http://localhost:3000'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://explorer.organizer.helmahead.com'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.sandbox.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://sandbox.explorer.organizer.helmahead.com'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://staging.explorer.organizer.helmahead.com'"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.staging.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://staging.explorer.organizer.helmahead.com'"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/ci-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new cdk.App()"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/dev-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new cdk.App()"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/frontend-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new cdk.App()"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/app-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new cdk.App()"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/dev-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getAppEnvironment('sandbox')"
            },
            {
                "name": "appInfra",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/dev-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AppInfrastructureStack(app, `${CONSTANTS.stackPrefix}-sandbox`, appConfig)"
            },
            {
                "name": "auth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "env.auth"
            },
            {
                "name": "AUTH_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/auth/auth0-variables.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AuthConfig",
                "defaultValue": "{\n  clientId: env.auth.clientId,\n  domain: env.auth.domain,\n  apiURL: env.apiURL,\n  redirectUri: env.auth.redirectUri,\n  responseType: 'token',\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => platformBrowserDynamic().bootstrapModule(AppModule)"
            },
            {
                "name": "ChartDataDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `"
            },
            {
                "name": "compareDropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] The state of the compare dropdown (because I\\'m lazy)',\n  props<{ compareDropdown: string }>(),\n)"
            },
            {
                "name": "CONSTANTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/lib/config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    sandbox:  { account: '552593679126', region: 'us-east-1' },\n    staging:  { account: '343567461217', region: 'us-east-1' },\n    production:  { account: '020931949237', region: 'us-east-1' },\n    tld: domain,\n    subdomain:  `${subdomain}.${domain}`,\n    version: process.env.BITBUCKET_COMMIT || 'latest',\n    serviceName: 'front', // TODO: Change me to service name\n    stackPrefix: 'HelmOrganizerFrontends', // TODO: Change me and match me in bitbucketpipeline\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/forms/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/org-comp-lib/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CREATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/services/communities.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n  mutation CreateCommunity($input: CommunityInput!){\n    createCommunity(input: $input) {\n      name\n      description\n      notes\n      status\n    }\n  }\n`"
            },
            {
                "name": "CreateOrganizationDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `"
            },
            {
                "name": "DELETE_COMMUNITY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/services/communities.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n  mutation DeleteCommunity($input: CommunityInput!) {\n    deleteCommunity(input: $input)\n  }\n`"
            },
            {
                "name": "DeleteOrganizationUserDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `"
            },
            {
                "name": "DisableOrganizationDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `"
            },
            {
                "name": "Document",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    {\n  forms(first: 2) {\n    edges {\n      node {\n        name\n        uuid\n        organizationUuid\n        status\n        createdBy\n        createdAt\n        updatedAt\n        description\n        content\n      }\n    }\n  }\n}\n    `"
            },
            {
                "name": "domain",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/lib/config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'helmahead.com'"
            },
            {
                "name": "EnableOrganizationDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.local.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-sandbox.us.auth0.com',\n    clientId: 'rU8r90TON0aOtpIj00GSQ0dUuT2fe5IP',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.staging.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: false,\n  production: true,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-staging.us.auth0.com',\n    clientId: 'BYjmdIqgpSnVrIZLSmldUCvPVdwZzGpD',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.sandbox.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-sandbox.us.auth0.com',\n    clientId: 'rU8r90TON0aOtpIj00GSQ0dUuT2fe5IP',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: false,\n  production: true,\n  mixpanel: false,\n  auth: {\n    domain: 'helm-prod.us.auth0.com',\n    clientId: 'rMOk6HWMNk51ZFWIW5pn43iunnL6yyto',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'https://helm-sandbox.us.auth0.com',\n    clientId: 'rU8r90TON0aOtpIj00GSQ0dUuT2fe5IP',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.hmr.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-staging.us.auth0.com',\n    clientId: 'BYjmdIqgpSnVrIZLSmldUCvPVdwZzGpD',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.deploy.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: false,\n  production: true,\n  mixpanel: false,\n  auth: {\n    domain: '{PLACEHOLDER}',\n    clientId: '{PLACEHOLDER}',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: ['{PLACEHOLDER}'],\n  },\n  hmr: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.local.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-sandbox.us.auth0.com',\n    clientId: 'D8ejI5YjzaVGaxlkSOvS4NR4P91kLpyi',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: false,\n  production: true,\n  mixpanel: false,\n  auth: {\n    domain: 'helm-prod.us.auth0.com',\n    clientId: 'rMOk6HWMNk51ZFWIW5pn43iunnL6yyto',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.sandbox.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: true,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-sandbox.us.auth0.com',\n    clientId: 'D8ejI5YjzaVGaxlkSOvS4NR4P91kLpyi',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-staging.us.auth0.com',\n    clientId: 'BYjmdIqgpSnVrIZLSmldUCvPVdwZzGpD',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.staging.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: false,\n  production: true,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-staging.us.auth0.com',\n    clientId: 'BYjmdIqgpSnVrIZLSmldUCvPVdwZzGpD',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/forms/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/forms/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "explorerFiltersFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'explorerFilters'"
            },
            {
                "name": "explorerGeoFilterFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'explorerGeoFilter'"
            },
            {
                "name": "explorersFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'explorersListStates'"
            },
            {
                "name": "filterExplorerApplied",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] Filter ExplorerFilterss Success',\n  props<{ filters: FilterOption }>(),\n)"
            },
            {
                "name": "filterExplorerApplyButtonClicked",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] Apply filters',\n  props<{ applyButtonClicked: boolean }>(),\n)"
            },
            {
                "name": "filterExplorerApplyFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] Apply filters',\n  props<{ applyFilters: boolean }>(),\n)"
            },
            {
                "name": "filterExplorerCommunityUpdated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] When a community is updated',\n  props<{ communityUpdated: boolean }>(),\n)"
            },
            {
                "name": "filterExplorerSaveCommunityActive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] Is the save button active',\n  props<{ saveButtonActive: boolean }>(),\n)"
            },
            {
                "name": "filterExplorerSaveCommunityClicked",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] Is the save button was clicked',\n  props<{ saveButtonClicked: boolean }>(),\n)"
            },
            {
                "name": "filterExplorerSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] Filter is selected but not applied',\n  props<{ selected: boolean }>(),\n)"
            },
            {
                "name": "filterList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(listSelectedFilter, selectAll => selectAll)"
            },
            {
                "name": "filterStringifiedFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] Apply stringified filters',\n  props<{ stringifiedFilters: string }>(),\n)"
            },
            {
                "name": "FindMembersDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `"
            },
            {
                "name": "FindMyOrganizationsDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `"
            },
            {
                "name": "FindOrganizationsDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `"
            },
            {
                "name": "FindOrganizationsWithRolesDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `"
            },
            {
                "name": "FindOrganizationTreesDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `"
            },
            {
                "name": "FindRolesDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `"
            },
            {
                "name": "FindUserDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `"
            },
            {
                "name": "geoFilterExplorerApplied",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerGeoFilters] Geo-Filter ExplorerFilters Success',\n  props<{ geoFilters: any }>(),\n)"
            },
            {
                "name": "geoFilterExplorerSaved",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerGeoFilters] Geo-Filter ExplorerFilters Saved',\n  props<{ geoFiltersSaved: any }>(),\n)"
            },
            {
                "name": "geoFilterList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(listSelectedGeoFilter, geoSelectAll => geoSelectAll)"
            },
            {
                "name": "GET_ALL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/services/communities.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n  query ListCommunities($accountId: ID!){\n    listCommunities(accountId: $accountId) {\n      uuid\n      name\n      description\n      notes\n      selections\n      criteriaFilters\n      geoFilters\n    }\n  }\n`"
            },
            {
                "name": "GET_ALL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/services/geographic.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n  query {\n    segment {\n      id\n      name\n      segments {\n          counties {\n              id\n              name\n          }\n      }\n    }\n  }\n`"
            },
            {
                "name": "GET_ALL_ACCOUNTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/services/account.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\nquery {\n  listAccounts {\n    uuid\n    name\n    segment\n    status\n  }\n}\n`"
            },
            {
                "name": "GET_HASH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/services/intercom.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\nquery GetHash($email: String!){\n  getIntercomHash(email: $email)\n}\n`"
            },
            {
                "name": "hmrBootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/hmr.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(module: any, bootstrap: () => Promise<NgModuleRef<any>>) => {\n  let ngModule: NgModuleRef<any>;\n  module.hot.accept();\n  bootstrap().then(mod => ngModule = mod);\n  module.hot.dispose(() => {\n    const appRef: ApplicationRef = ngModule.injector.get(ApplicationRef);\n    const elements = appRef.components.map(c => c.location.nativeElement);\n    const makeVisible = createNewHosts(elements);\n    ngModule.destroy();\n    makeVisible();\n  });\n}"
            },
            {
                "name": "httpInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "env.httpInterceptor"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UserState",
                "defaultValue": "adapter.getInitialState({\n  email: '',\n  name: '',\n  nickname: '',\n  picture: '',\n  selectedOrganizationUuid: '',\n  addOrgsSuccess: false,\n  addOrgsFailure: false,\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LoginState",
                "defaultValue": "{\n  success: false,\n  failure: false,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GeoFilterState",
                "defaultValue": "adapter.getInitialState({\n  geoFiltersSaved: undefined,\n  geoFilters: undefined,\n  error: undefined,\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ExplorerState",
                "defaultValue": "adapter.getInitialState({\n  // additional entity state properties\n  error: undefined,\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FilterState",
                "defaultValue": "adapter.getInitialState({\n  // additional entity state properties\n  error: undefined,\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "listSelectedFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<FilterState>(explorerFiltersFeatureKey)"
            },
            {
                "name": "listSelectedGeoFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<GeoFilterState>(explorerGeoFilterFeatureKey)"
            },
            {
                "name": "listStatesState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ExplorerState>(explorersFeatureKey)"
            },
            {
                "name": "loadCounties",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Explorer/API] Update Explorer',\n  props<{ states: Update<any> }>(),\n)"
            },
            {
                "name": "loadExplorersStates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Explorer US Map States Component] Load Explorers States ',\n)"
            },
            {
                "name": "loadExplorersStatesFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Explorer State Effect] Load Explorers States For Map Failure',\n  props<{ error: any }>(),\n)"
            },
            {
                "name": "loadExplorersStatesSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Explorer State Effect] Load Explorers States Success',\n  props<{ states: StateModel[] }>(),\n)"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loginFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/login/store/actions/login.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Login] Login failure',\n  props<{ error: LoginErrorResponse }>(),\n)"
            },
            {
                "name": "loginFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'login'"
            },
            {
                "name": "loginReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n\n  on(fromActions.loginSuccess, state => ({\n    ...state,\n    success: true,\n    failure: false,\n  })),\n\n  on(fromActions.loginFailure, (state, {error}) => ({\n    ...state,\n    success: false,\n    failure: true,\n    error,\n  })),\n)"
            },
            {
                "name": "loginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/login/store/actions/login.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Login] Login success')"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production ? [] : []"
            },
            {
                "name": "passwordValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/utils/input.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(control: FormControl): { [s: string]: boolean } => {\n  const value: string = (control.value as string) || '';\n  const validator: { [s: string]: boolean } = {};\n\n  if (value.length < 8) {\n    validator.length = true;\n  }\n  if (!/[`!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(value)) {\n    validator.special = true;\n  }\n  if (!/\\d/.test(value)) {\n    validator.num = true;\n  }\n  if (!/[a-z]/.test(value)) {\n    validator.lowercase = true;\n  }\n  if (!/[A-Z]/.test(value)) {\n    validator.uppercase = true;\n  }\n\n  return validator;\n}",
                "rawdescription": "Custom validator to check if the passwords match the requirements",
                "description": "<p>Custom validator to check if the passwords match the requirements</p>\n"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/atomics/example.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "productionAppConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/app-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getAppEnvironment('production')"
            },
            {
                "name": "productionAppInfra",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/app-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AppInfrastructureStack(app, `${CONSTANTS.stackPrefix}-production`, productionAppConfig)"
            },
            {
                "name": "productionDns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/app-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new DnsInfrastructureStack(app, `${CONSTANTS.stackPrefix}-dns-production`, getDnsEnvironment('production'))"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n\n  // on(ExplorerGeoFilterActions.geoFilterExplorerApplied,\n  //   (state, action) => adapter.setAll(action.geoFilters, state),\n  // ),\n\n  on(ExplorerGeoFilterActions.geoFilterExplorerApplied,\n    (state, action) => ({\n      ...state,\n      geoFilters: action,\n    }),\n  ),\n\n  on(ExplorerGeoFilterActions.geoFilterExplorerSaved,\n    (state, action) => ({\n      ...state,\n      geoFiltersSaved: action,\n    }),\n  ),\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(ExplorerActions.loadExplorersStatesSuccess,\n    (state, action) => {\n    // I left this as and example of trouble shooting a reducer\n    // console.log(action.states);\n    return adapter.setAll(action.states, state);\n  }\n  ),\n  on(ExplorerActions.loadExplorersStatesFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(ExplorerActions.loadCounties,\n    (state, action) => adapter.updateOne(action.states, state)\n  ),\n\n\n  // on(ExplorerActions.loadCounties,\n  //   (state, action) => adapter.updateOne({ id: action.states.id, changes: action.states }, state)\n  // ),\n  // boiler plate examples\n  //\n  // on(ExplorerActions.addExplorer,\n  //   (state, action) => adapter.addOne(action.explorer, state)\n  // ),\n  // on(ExplorerActions.upsertExplorer,\n  //   (state, action) => adapter.upsertOne(action.explorer, state)\n  // ),\n  // on(ExplorerActions.addExplorers,\n  //   (state, action) => adapter.addMany(action.explorers, state)\n  // ),\n  // on(ExplorerActions.upsertExplorers,\n  //   (state, action) => adapter.upsertMany(action.explorers, state)\n  // ),\n  // on(ExplorerActions.updateExplorer,\n  //   (state, action) => adapter.updateOne(action.explorer, state)\n  // ),\n  // on(ExplorerActions.updateExplorers,\n  //   (state, action) => adapter.updateMany(action.explorers, state)\n  // ),\n  // on(ExplorerActions.deleteExplorer,\n  //   (state, action) => adapter.removeOne(action.id, state)\n  // ),\n  // on(ExplorerActions.deleteExplorers,\n  //   (state, action) => adapter.removeMany(action.ids, state)\n  // ),\n  // on(ExplorerActions.loadExplorers,\n  //   (state, action) => adapter.setAll(action.explorers, state)\n  // ),\n  // on(ExplorerActions.clearExplorers,\n  //   state => adapter.removeAll(state)\n  // ),\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n\n  // on(ExplorerFiltersActions.filterExplorerApplied,\n  //   (state, action) => adapter.setAll(action.filters, state),\n  // ),\n\n  on(ExplorerFiltersActions.filterExplorerApplied,\n    (state, action) => ({\n      ...state,\n      filters: action.filters,\n    }),\n  ),\n  on(ExplorerFiltersActions.filterExplorerSelected,\n    (state, action) => ({\n      ...state,\n      selected: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerApplyFilters,\n    (state, action) => ({\n      ...state,\n      applyFilters: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterStringifiedFilters,\n    (state, action) => ({\n      ...state,\n      stringifiedFilters: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerApplyButtonClicked,\n    (state, action) => ({\n      ...state,\n      applyButtonClicked: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerSaveCommunityActive,\n    (state, action) => ({\n      ...state,\n      saveButtonActive: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerSaveCommunityClicked,\n    (state, action) => ({\n      ...state,\n      saveButtonClicked: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerCommunityUpdated,\n    (state, action) => ({\n      ...state,\n      communityUpdated: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.savedCommunitySelected,\n    (state, action) => ({\n      ...state,\n      communitySelected: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.usChartsData,\n    (state, action) => ({\n      ...state,\n      usChart: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.stateChartsData,\n    (state, action) => ({\n      ...state,\n      stateChart: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.compareDropdown,\n    (state, action) => ({\n      ...state,\n      compareDropdown: action,\n    }),\n  ),\n)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\n  user: userReducer,\n  login: loginReducer,\n}"
            },
            {
                "name": "requestOrganizations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/actions/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Organization] Request user organizations',\n)"
            },
            {
                "name": "requestOrganizationsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/actions/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Organization] Request user organizations failure',\n)"
            },
            {
                "name": "requestOrganizationsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/actions/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Organization] Request user organizations success',\n  props<{ organizations: Organization[] }>(),\n)"
            },
            {
                "name": "requestUserInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/actions/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[User] Request user info',\n)"
            },
            {
                "name": "RequestUserPasswordResetDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/forms/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/org-comp-lib/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "ResetUserPasswordDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `"
            },
            {
                "name": "sandboxApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/frontend-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FrontendStack(app, `${CONSTANTS.stackPrefix}-frontend-sandbox`, {\n    env: CONSTANTS.sandbox,\n    stage: 'sandbox',\n    hostedZone: sandboxDns.domain,\n})"
            },
            {
                "name": "sandboxAppConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/app-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getAppEnvironment('sandbox')"
            },
            {
                "name": "sandboxAppInfra",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/app-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AppInfrastructureStack(app, `${CONSTANTS.stackPrefix}-sandbox`, sandboxAppConfig)"
            },
            {
                "name": "sandboxDns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/frontend-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new DnsInfrastructureStack(app, `${CONSTANTS.stackPrefix}-frontend-dns-sandbox`, getDnsEnvironment('sandbox'))"
            },
            {
                "name": "sandboxDns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/app-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new DnsInfrastructureStack(app, `${CONSTANTS.stackPrefix}-dns-sandbox`, getDnsEnvironment('sandbox'))"
            },
            {
                "name": "savedCommunitySelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] When a community is selected',\n  props<{ communitySelected: boolean }>(),\n)"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectActivePendingOrganizations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectAllOrganizations,\n  (orgs: Organization[]) => orgs.filter(org => org.status === StatusEnum.Active || org.status === StatusEnum.Pending))"
            },
            {
                "name": "selectAllOrganizationEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectUserState, fromUser.selectEntities)"
            },
            {
                "name": "selectAllOrganizations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectUserState, fromUser.selectAll)"
            },
            {
                "name": "selectCurrentOrganization",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectUserState, selectAllOrganizationEntities,\n  (user: fromUser.UserState, orgs: Dictionary<Organization>) => orgs[user.selectedOrganizationUuid])"
            },
            {
                "name": "selectCurrentOrganizationUuid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectUserState, (user: fromUser.UserState) => user.selectedOrganizationUuid)"
            },
            {
                "name": "selectIsHelmAdmin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectCurrentOrganization,\n  (currOrg: Organization | undefined) => {\n    let isHelmAdmin = false;\n    // Check if the current organization is the helm organization by checking for a parent organization uuid\n    if (!currOrg?.organizationUuid) {\n      isHelmAdmin = true;\n    }\n    return isHelmAdmin;\n  })"
            },
            {
                "name": "selectLoginFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/login/store/selectors/login.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectLoginState, (state: fromLogin.LoginState) =>\n  ({ failure: state.failure, error: state.error }))"
            },
            {
                "name": "selectLoginOrgSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/app.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(fromLoginSelectors.selectLoginState, fromUserSelectors.selectUserState,\n  (loginState: fromLogin.LoginState, userState: fromUser.UserState) => loginState.success && userState.addOrgsSuccess)"
            },
            {
                "name": "selectLoginState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/login/store/selectors/login.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromLogin.LoginState>(\n  fromLogin.loginFeatureKey,\n)"
            },
            {
                "name": "selectLoginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/login/store/selectors/login.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectLoginState, (state: fromLogin.LoginState) => state.success)"
            },
            {
                "name": "selectOrganizationByUuid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(orgUuid: string): MemoizedSelector<object, Organization | undefined> =>\n  createSelector(selectAllOrganizationEntities, (orgs: Dictionary<Organization>) => orgs[orgUuid])"
            },
            {
                "name": "selectOrganizationsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectUserState, fromUser.selectTotal)"
            },
            {
                "name": "selectUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectUserState, (user: fromUser.UserState) => user)"
            },
            {
                "name": "selectUserState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromUser.UserState>(\n  fromUser.userFeatureKey,\n)"
            },
            {
                "name": "SendInvitationDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "stagingAppConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/app-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getAppEnvironment('staging')"
            },
            {
                "name": "stagingAppInfra",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/app-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AppInfrastructureStack(app, `${CONSTANTS.stackPrefix}-staging`, stagingAppConfig)"
            },
            {
                "name": "stagingDns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/bin/app-infrastructure.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new DnsInfrastructureStack(app, `${CONSTANTS.stackPrefix}-dns-staging`, getDnsEnvironment('staging'))"
            },
            {
                "name": "stateChartsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] Chart data for selected state (because I\\'m lazy)',\n  props<{ stateChart: any }>(),\n)"
            },
            {
                "name": "statesList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(listStatesState, selectAll)"
            },
            {
                "name": "subdomain",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "infrastructure/lib/config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'organizer'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/atomics/example.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<OrgCompLibComponent>",
                "defaultValue": "(args: OrgCompLibComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.local.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.staging.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.sandbox.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'84898ca8909d420056544b2d33ffdb0c'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.hmr.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.deploy.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'{PLACEHOLDER}'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.local.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'84898ca8909d420056544b2d33ffdb0c'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.sandbox.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
            },
            {
                "name": "track",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/environments/environment.staging.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
            },
            {
                "name": "UPDATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/services/communities.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n  mutation UpdateCommunity($input: CommunityInput!){\n    updateCommunity(input: $input) {\n      name\n      description\n      notes\n      status\n    }\n  }\n`"
            },
            {
                "name": "UpdateOrganizationUserDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `"
            },
            {
                "name": "uri",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/graphql.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`${environment.apiURL}/graphql`"
            },
            {
                "name": "uri",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/graphql.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "uriHost + '/graphql'"
            },
            {
                "name": "uriHost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/graphql.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "''"
            },
            {
                "name": "userFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'user'"
            },
            {
                "name": "userReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n\n  on(fromActions.addUserInfo, (state, { user }) => ({\n    ...state,\n    email: user.email,\n    name: user.name,\n    nickname: user.nickname,\n    picture: user.picture,\n  })),\n\n  on(fromActions.addSelectedOrgUuid, (state, { selectedOrganizationUuid }) => ({\n    ...state,\n    selectedOrganizationUuid,\n  })),\n\n  on(fromActions.requestOrganizationsSuccess, (state, { organizations }) => adapter.addMany(organizations, {\n    ...state,\n    addOrgsSuccess: true,\n    addOrgsFailure: false,\n  })),\n\n  on(fromActions.requestOrganizationsFailure, state => ({\n    ...state,\n    addOrgsFailure: true,\n    addOrgsSuccess: false,\n  })),\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "name": "UpdateUserDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `"
            },
            {
                "name": "usChartsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ExplorerFilters] Chart data for US national (because I\\'m lazy)',\n  props<{ usChart: any[] }>(),\n)"
            },
            {
                "name": "ValidateAssociationTokenDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `"
            },
            {
                "name": "ValidatePasswordResetTokenDocument",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            }
        ],
        "functions": [
            {
                "name": "createApollo",
                "file": "projects/admin/src/app/graphql.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpLink",
                        "type": "HttpLink",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ApolloClientOptions<any>",
                "jsdoctags": [
                    {
                        "name": "httpLink",
                        "type": "HttpLink",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createApollo",
                "file": "projects/explorer/src/app/graphql.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpLink",
                        "type": "HttpLink",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ApolloClientOptions<any>",
                "jsdoctags": [
                    {
                        "name": "httpLink",
                        "type": "HttpLink",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getAppEnvironment",
                "file": "infrastructure/lib/config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "stage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "AppInfrastructureStackProps",
                "jsdoctags": [
                    {
                        "name": "stage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCiEnvironment",
                "file": "infrastructure/lib/config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "stage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ContinuousIntegrationInfrastructureStackProps",
                "jsdoctags": [
                    {
                        "name": "stage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDnsEnvironment",
                "file": "infrastructure/lib/config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "stage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "DnsInfrastructureStackProps",
                "jsdoctags": [
                    {
                        "name": "stage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "_Service",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "AcceptOrganizationUserInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "AcceptOrganizationUserInputUser",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "AcceptOrganizationUserInviteMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "AcceptOrganizationUserInviteMutationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "AgeCategories",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "AllDataQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "AllDataQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Types.Exact<literal type>",
                "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "AssignRolePermissionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "AssignUserPermissionInputType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ChartDataQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "ChartDataQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Types.Exact<literal type>",
                "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "CivicModel",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "CreateFormInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "CreateOrganizationHostnameInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "CreateOrganizationInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "CreateOrganizationMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "CreateOrganizationMutationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "CreateRoleInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Datapoint",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "DegreeCategories",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "DeleteOrganizationHostnameInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "DeleteOrganizationUserMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "DeleteOrganizationUserMutationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "DeleteRoleInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "DisableOrganizationMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "DisableOrganizationMutationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "EnableOrganizationMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "EnableOrganizationMutationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Exact",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            },
            {
                "name": "Exact",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            },
            {
                "name": "Exact",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            },
            {
                "name": "Exact",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            },
            {
                "name": "Exact",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            },
            {
                "name": "FindMembersQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "FindMembersQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FindMyOrganizationsQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "FindMyOrganizationsQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FindOrganizationsQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "FindOrganizationsQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FindOrganizationsWithRolesQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "FindOrganizationsWithRolesQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FindOrganizationTreesQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "FindOrganizationTreesQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FindRolesQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "FindRolesQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FindUserQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "FindUserQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Form",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "FormConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "FormEdge",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "FormFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "GenderCategories",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IncomeCategories",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Indicators",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "InputMaybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Maybe<T>",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "InviteOrganizationUserInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "InviteOrganizationUserInputUser",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "InviteOrganizationUserInvitationErrors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "InviteOrganizationUserPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "InviteOrganizationUsersEmailRoleInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "InviteOrganizationUsersInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MakeMaybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MakeMaybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MakeMaybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MakeMaybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MakeMaybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MakeOptional",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MakeOptional",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MakeOptional",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MakeOptional",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MakeOptional",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MaritalCategories",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Maybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "T | null",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Maybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "T | null",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Maybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "T | null | undefined",
                "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Maybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "T | null | undefined",
                "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Maybe",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "T | null",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "MigratePayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Models",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Mutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Mutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationAcceptOrganizationUserInviteArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationAssignRolePermissionArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationAssignUserPermissionArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationBlockOrganizationUserArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationBlockUserArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationCreateFormArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationCreateOrganizationArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationCreateOrganizationHostnameArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationCreateRoleArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationDeleteOrganizationHostnameArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationDeleteOrganizationUserArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationDeleteRoleArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationDeleteUserArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationDisableOrganizationArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationDisableUserArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationEnableOrganizationArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationEnableUserArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationInviteOrganizationUsersArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationRequestUserPasswordResetArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationResetUserPasswordArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationUpdateOrganizationUserArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationUpdateRoleArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MutationUpdateUserArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "OrderByInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "PageInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Query",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Query",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryFormArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryFormsArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryMigrateArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryOrganizationArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryOrganizationHostnameArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryOrganizationHostnamesArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryOrganizationsArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryPermissionArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryRoleArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryRolesArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryUserArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryUsersArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryValidateAssociationTokenArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "QueryValidatePasswordResetTokenArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "RequestUserPasswordResetMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "RequestUserPasswordResetMutationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "ResetUserPasswordInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ResetUserPasswordMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "ResetUserPasswordMutationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "RootQueryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "RootQueryTypeCacheArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "RootQueryTypeExplorerArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Scalars",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>All built-in and custom scalars, mapped to their actual values</p>\n",
                "kind": 181
            },
            {
                "name": "Scalars",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>All built-in and custom scalars, mapped to their actual values</p>\n",
                "kind": 181
            },
            {
                "name": "Scalars",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>All built-in and custom scalars, mapped to their actual values</p>\n",
                "kind": 181
            },
            {
                "name": "SchemaActivityLog",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaOrganization",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaOrganizationHostname",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaOrganizationNested1",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaOrganizationNested2",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaOrganizationNested3",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaOrganizationNested4",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaOrganizationNested5",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaOrganizationPermission",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaOrganizationUser",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaPermission",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaRole",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaRolePermission",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaUser",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SchemaUserPermission",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Segment",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SendInvitationMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "SendInvitationMutationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Total",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/explorer/src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Unnamed_1_Query",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Unnamed_1_QueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/forms/src/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "UpdateOrganizationUserInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "UpdateOrganizationUserMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "UpdateOrganizationUserMutationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "UpdateRoleInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "UpdateUserInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "UpdateUserMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "UpdateUserMutationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "ValidateAssociationTokenPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ValidateAssociationTokenQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "ValidateAssociationTokenQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "ValidatePasswordResetTokenQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "ValidatePasswordResetTokenQueryVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exact<literal type>",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "ActivityLogEnum",
                "childs": [
                    {
                        "name": "Create",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CREATE"
                    },
                    {
                        "name": "Update",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "UPDATE"
                    },
                    {
                        "name": "Delete",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DELETE"
                    },
                    {
                        "name": "Remove",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "REMOVE"
                    },
                    {
                        "name": "Suspend",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SUSPEND"
                    },
                    {
                        "name": "Activate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ACTIVATE"
                    },
                    {
                        "name": "Block",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "BLOCK"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts"
            },
            {
                "name": "DomainTypeEnum",
                "childs": [
                    {
                        "name": "Email",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EMAIL"
                    },
                    {
                        "name": "LandingPage",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LANDING_PAGE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts"
            },
            {
                "name": "OrderFieldName",
                "childs": [
                    {
                        "name": "Name",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NAME"
                    },
                    {
                        "name": "Created",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CREATED"
                    },
                    {
                        "name": "Updated",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "UPDATED"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/forms/src/graphql/graphql.service.ts"
            },
            {
                "name": "OrderType",
                "childs": [
                    {
                        "name": "Asc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ASC"
                    },
                    {
                        "name": "Desc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DESC"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/forms/src/graphql/graphql.service.ts"
            },
            {
                "name": "OrganizationEnum",
                "childs": [
                    {
                        "name": "Advocacy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ADVOCACY"
                    },
                    {
                        "name": "Agency",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AGENCY"
                    },
                    {
                        "name": "Association",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ASSOCIATION"
                    },
                    {
                        "name": "Corporate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CORPORATE"
                    },
                    {
                        "name": "Education",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EDUCATION"
                    },
                    {
                        "name": "Electoral",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ELECTORAL"
                    },
                    {
                        "name": "Foundation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FOUNDATION"
                    },
                    {
                        "name": "Mixed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MIXED"
                    },
                    {
                        "name": "Nonprofit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NONPROFIT"
                    },
                    {
                        "name": "Other",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "OTHER"
                    },
                    {
                        "name": "Pac",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PAC"
                    },
                    {
                        "name": "Philanthropy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PHILANTHROPY"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts"
            },
            {
                "name": "Status",
                "childs": [
                    {
                        "name": "Deleted",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DELETED"
                    },
                    {
                        "name": "Draft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DRAFT"
                    },
                    {
                        "name": "Published",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PUBLISHED"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/forms/src/graphql/graphql.service.ts"
            },
            {
                "name": "Status",
                "childs": [
                    {
                        "name": "Active",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Unverified",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Blocked",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/explorer/src/app/admin/admin.component.ts"
            },
            {
                "name": "StatusEnum",
                "childs": [
                    {
                        "name": "Deleted",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DELETED"
                    },
                    {
                        "name": "Blocked",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "BLOCKED"
                    },
                    {
                        "name": "Suspended",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SUSPENDED"
                    },
                    {
                        "name": "Pending",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PENDING"
                    },
                    {
                        "name": "Active",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ACTIVE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts"
            },
            {
                "name": "SubscriptionEnum",
                "childs": [
                    {
                        "name": "Explorer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EXPLORER"
                    },
                    {
                        "name": "Starter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "STARTER"
                    },
                    {
                        "name": "Basic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "BASIC"
                    },
                    {
                        "name": "Premium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PREMIUM"
                    },
                    {
                        "name": "Enterprise",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ENTERPRISE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts"
            }
        ],
        "groupedVariables": {
            "projects/admin/src/app/shared/services/graphql/graphql.service.ts": [
                {
                    "name": "AcceptOrganizationUserInviteDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    mutation acceptOrganizationUserInvite($input: AcceptOrganizationUserInput!) {\n  acceptOrganizationUserInvite(input: $input)\n}\n    `"
                },
                {
                    "name": "CreateOrganizationDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    uuid\n    name\n  }\n}\n    `"
                },
                {
                    "name": "DeleteOrganizationUserDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    mutation deleteOrganizationUser($uuid: ID!) {\n  deleteOrganizationUser(uuid: $uuid) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `"
                },
                {
                    "name": "DisableOrganizationDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    mutation disableOrganization($uuid: ID!) {\n  disableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `"
                },
                {
                    "name": "EnableOrganizationDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    mutation enableOrganization($uuid: ID!) {\n  enableOrganization(uuid: $uuid) {\n    uuid\n  }\n}\n    `"
                },
                {
                    "name": "FindMembersDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query findMembers($search: String) {\n  users(search: $search) {\n    uuid\n    firstName\n    lastName\n    email\n    phone\n    organizationUsers {\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `"
                },
                {
                    "name": "FindMyOrganizationsDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query findMyOrganizations {\n  myOrganizations {\n    uuid\n    name\n    status\n  }\n}\n    `"
                },
                {
                    "name": "FindOrganizationsDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query findOrganizations {\n  organizations {\n    uuid\n    organizationUuid\n    name\n  }\n}\n    `"
                },
                {
                    "name": "FindOrganizationsWithRolesDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query findOrganizationsWithRoles {\n  organizations {\n    uuid\n    name\n    organizationUuid\n    roles {\n      uuid\n    }\n    organizations {\n      uuid\n      name\n      organizationUuid\n      roles {\n        uuid\n      }\n      organizations {\n        uuid\n        name\n        organizationUuid\n        roles {\n          uuid\n        }\n        organizations {\n          uuid\n          name\n          organizationUuid\n          roles {\n            uuid\n          }\n          organizations {\n            uuid\n            name\n            organizationUuid\n            roles {\n              uuid\n            }\n            organizations {\n              uuid\n              name\n              organizationUuid\n              roles {\n                uuid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `"
                },
                {
                    "name": "FindOrganizationTreesDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query findOrganizationTrees {\n  organizations {\n    uuid\n    organizationUuid\n    name\n    countUsers\n    status\n    organizations {\n      uuid\n      organizationUuid\n      name\n      countUsers\n      status\n      organizations {\n        uuid\n        organizationUuid\n        name\n        countUsers\n        status\n        organizations {\n          uuid\n          organizationUuid\n          name\n          countUsers\n          status\n          organizations {\n            uuid\n            organizationUuid\n            name\n            countUsers\n            status\n            organizations {\n              uuid\n              organizationUuid\n              name\n              countUsers\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `"
                },
                {
                    "name": "FindRolesDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query findRoles($organizationUuid: ID!) {\n  roles(organizationUuid: $organizationUuid) {\n    uuid\n    name\n  }\n}\n    `"
                },
                {
                    "name": "FindUserDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query findUser($uuid: ID!) {\n  user(uuid: $uuid) {\n    uuid\n    status\n    firstName\n    lastName\n    email\n    phone\n    resetToken\n    organizationUsers {\n      uuid\n      status\n      organizationUuid\n      organization {\n        uuid\n        name\n      }\n      role {\n        uuid\n        name\n      }\n      title\n    }\n  }\n}\n    `"
                },
                {
                    "name": "RequestUserPasswordResetDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    mutation requestUserPasswordReset($email: String!) {\n  requestUserPasswordReset(email: $email)\n}\n    `"
                },
                {
                    "name": "ResetUserPasswordDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    mutation resetUserPassword($input: ResetUserPasswordInput!) {\n  resetUserPassword(input: $input)\n}\n    `"
                },
                {
                    "name": "SendInvitationDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    mutation sendInvitation($input: InviteOrganizationUsersInput!) {\n  inviteOrganizationUsers(input: $input) {\n    organizationUuid\n    invitationErrors {\n      email\n      description\n    }\n    invitedUsers\n  }\n}\n    `"
                },
                {
                    "name": "UpdateOrganizationUserDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    mutation updateOrganizationUser($input: UpdateOrganizationUserInput!) {\n  updateOrganizationUser(input: $input) {\n    uuid\n    organizationUuid\n    role {\n      uuid\n      name\n    }\n  }\n}\n    `"
                },
                {
                    "name": "UpdateUserDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    uuid\n  }\n}\n    `"
                },
                {
                    "name": "ValidateAssociationTokenDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query validateAssociationToken($token: String!) {\n  validateAssociationToken(token: $token) {\n    status\n    email\n    name\n  }\n}\n    `"
                },
                {
                    "name": "ValidatePasswordResetTokenDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query validatePasswordResetToken($token: String!) {\n  validatePasswordResetToken(token: $token)\n}\n    `"
                }
            ],
            "projects/admin/src/app/store/reducers/user.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Organization>",
                    "defaultValue": "createEntityAdapter<Organization>({\n  selectId: (org: Organization) => org.uuid,\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "defaultValue": "adapter.getInitialState({\n  email: '',\n  name: '',\n  nickname: '',\n  picture: '',\n  selectedOrganizationUuid: '',\n  addOrgsSuccess: false,\n  addOrgsFailure: false,\n})"
                },
                {
                    "name": "userFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'user'"
                },
                {
                    "name": "userReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n\n  on(fromActions.addUserInfo, (state, { user }) => ({\n    ...state,\n    email: user.email,\n    name: user.name,\n    nickname: user.nickname,\n    picture: user.picture,\n  })),\n\n  on(fromActions.addSelectedOrgUuid, (state, { selectedOrganizationUuid }) => ({\n    ...state,\n    selectedOrganizationUuid,\n  })),\n\n  on(fromActions.requestOrganizationsSuccess, (state, { organizations }) => adapter.addMany(organizations, {\n    ...state,\n    addOrgsSuccess: true,\n    addOrgsFailure: false,\n  })),\n\n  on(fromActions.requestOrganizationsFailure, state => ({\n    ...state,\n    addOrgsFailure: true,\n    addOrgsSuccess: false,\n  })),\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/reducers/user.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<any>",
                    "defaultValue": "createEntityAdapter<any>()"
                },
                {
                    "name": "explorerGeoFilterFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'explorerGeoFilter'"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GeoFilterState",
                    "defaultValue": "adapter.getInitialState({\n  geoFiltersSaved: undefined,\n  geoFilters: undefined,\n  error: undefined,\n})"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n\n  // on(ExplorerGeoFilterActions.geoFilterExplorerApplied,\n  //   (state, action) => adapter.setAll(action.geoFilters, state),\n  // ),\n\n  on(ExplorerGeoFilterActions.geoFilterExplorerApplied,\n    (state, action) => ({\n      ...state,\n      geoFilters: action,\n    }),\n  ),\n\n  on(ExplorerGeoFilterActions.geoFilterExplorerSaved,\n    (state, action) => ({\n      ...state,\n      geoFiltersSaved: action,\n    }),\n  ),\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<StateModel>",
                    "defaultValue": "createEntityAdapter<StateModel>()"
                },
                {
                    "name": "explorersFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'explorersListStates'"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExplorerState",
                    "defaultValue": "adapter.getInitialState({\n  // additional entity state properties\n  error: undefined,\n})"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(ExplorerActions.loadExplorersStatesSuccess,\n    (state, action) => {\n    // I left this as and example of trouble shooting a reducer\n    // console.log(action.states);\n    return adapter.setAll(action.states, state);\n  }\n  ),\n  on(ExplorerActions.loadExplorersStatesFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(ExplorerActions.loadCounties,\n    (state, action) => adapter.updateOne(action.states, state)\n  ),\n\n\n  // on(ExplorerActions.loadCounties,\n  //   (state, action) => adapter.updateOne({ id: action.states.id, changes: action.states }, state)\n  // ),\n  // boiler plate examples\n  //\n  // on(ExplorerActions.addExplorer,\n  //   (state, action) => adapter.addOne(action.explorer, state)\n  // ),\n  // on(ExplorerActions.upsertExplorer,\n  //   (state, action) => adapter.upsertOne(action.explorer, state)\n  // ),\n  // on(ExplorerActions.addExplorers,\n  //   (state, action) => adapter.addMany(action.explorers, state)\n  // ),\n  // on(ExplorerActions.upsertExplorers,\n  //   (state, action) => adapter.upsertMany(action.explorers, state)\n  // ),\n  // on(ExplorerActions.updateExplorer,\n  //   (state, action) => adapter.updateOne(action.explorer, state)\n  // ),\n  // on(ExplorerActions.updateExplorers,\n  //   (state, action) => adapter.updateMany(action.explorers, state)\n  // ),\n  // on(ExplorerActions.deleteExplorer,\n  //   (state, action) => adapter.removeOne(action.id, state)\n  // ),\n  // on(ExplorerActions.deleteExplorers,\n  //   (state, action) => adapter.removeMany(action.ids, state)\n  // ),\n  // on(ExplorerActions.loadExplorers,\n  //   (state, action) => adapter.setAll(action.explorers, state)\n  // ),\n  // on(ExplorerActions.clearExplorers,\n  //   state => adapter.removeAll(state)\n  // ),\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<any>",
                    "defaultValue": "createEntityAdapter<any>()"
                },
                {
                    "name": "explorerFiltersFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'explorerFilters'"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterState",
                    "defaultValue": "adapter.getInitialState({\n  // additional entity state properties\n  error: undefined,\n})"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n\n  // on(ExplorerFiltersActions.filterExplorerApplied,\n  //   (state, action) => adapter.setAll(action.filters, state),\n  // ),\n\n  on(ExplorerFiltersActions.filterExplorerApplied,\n    (state, action) => ({\n      ...state,\n      filters: action.filters,\n    }),\n  ),\n  on(ExplorerFiltersActions.filterExplorerSelected,\n    (state, action) => ({\n      ...state,\n      selected: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerApplyFilters,\n    (state, action) => ({\n      ...state,\n      applyFilters: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterStringifiedFilters,\n    (state, action) => ({\n      ...state,\n      stringifiedFilters: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerApplyButtonClicked,\n    (state, action) => ({\n      ...state,\n      applyButtonClicked: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerSaveCommunityActive,\n    (state, action) => ({\n      ...state,\n      saveButtonActive: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerSaveCommunityClicked,\n    (state, action) => ({\n      ...state,\n      saveButtonClicked: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.filterExplorerCommunityUpdated,\n    (state, action) => ({\n      ...state,\n      communityUpdated: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.savedCommunitySelected,\n    (state, action) => ({\n      ...state,\n      communitySelected: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.usChartsData,\n    (state, action) => ({\n      ...state,\n      usChart: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.stateChartsData,\n    (state, action) => ({\n      ...state,\n      stateChart: action,\n    }),\n  ),\n\n  on(ExplorerFiltersActions.compareDropdown,\n    (state, action) => ({\n      ...state,\n      compareDropdown: action,\n    }),\n  ),\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "projects/admin/src/app/store/actions/user.actions.ts": [
                {
                    "name": "addSelectedOrgUuid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/actions/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[User] Add selected organization uuid',\n  props<{ selectedOrganizationUuid: string }>(),\n)"
                },
                {
                    "name": "addUserInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/actions/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[User] Add user info',\n  props<{ user: User }>(),\n)"
                },
                {
                    "name": "requestOrganizations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/actions/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Organization] Request user organizations',\n)"
                },
                {
                    "name": "requestOrganizationsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/actions/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Organization] Request user organizations failure',\n)"
                },
                {
                    "name": "requestOrganizationsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/actions/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Organization] Request user organizations success',\n  props<{ organizations: Organization[] }>(),\n)"
                },
                {
                    "name": "requestUserInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/actions/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[User] Request user info',\n)"
                }
            ],
            "projects/explorer/src/app/shared/services/map-charts.generated.ts": [
                {
                    "name": "AllDataDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query allData {\n  national: explorer {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n  state: explorer(level: \"state\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n  county: explorer(level: \"county\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n  }\n}\n    `"
                }
            ],
            "projects/admin/src/environments/environment.local.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.local.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'http://localhost:3000'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.local.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-sandbox.us.auth0.com',\n    clientId: 'rU8r90TON0aOtpIj00GSQ0dUuT2fe5IP',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false,\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.local.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
                }
            ],
            "projects/admin/src/environments/environment.staging.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.staging.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://staging-api.civicexplorer.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.staging.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: false,\n  production: true,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-staging.us.auth0.com',\n    clientId: 'BYjmdIqgpSnVrIZLSmldUCvPVdwZzGpD',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false,\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.staging.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
                }
            ],
            "projects/admin/src/environments/environment.sandbox.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.sandbox.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://sandbox-api.civicexplorer.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.sandbox.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-sandbox.us.auth0.com',\n    clientId: 'rU8r90TON0aOtpIj00GSQ0dUuT2fe5IP',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false,\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.sandbox.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
                }
            ],
            "projects/admin/src/environments/environment.prod.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://api.civicexplorer.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: false,\n  production: true,\n  mixpanel: false,\n  auth: {\n    domain: 'helm-prod.us.auth0.com',\n    clientId: 'rMOk6HWMNk51ZFWIW5pn43iunnL6yyto',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false,\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'84898ca8909d420056544b2d33ffdb0c'"
                }
            ],
            "projects/admin/src/environments/environment.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://sandbox-api.civicexplorer.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'https://helm-sandbox.us.auth0.com',\n    clientId: 'rU8r90TON0aOtpIj00GSQ0dUuT2fe5IP',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false,\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
                }
            ],
            "projects/explorer/src/environments/environment.hmr.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.hmr.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://staging.explorer.organizer.helmahead.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.hmr.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-staging.us.auth0.com',\n    clientId: 'BYjmdIqgpSnVrIZLSmldUCvPVdwZzGpD',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: true\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.hmr.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
                }
            ],
            "projects/explorer/src/environments/environment.deploy.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.deploy.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'{PLACEHOLDER}'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.deploy.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: false,\n  production: true,\n  mixpanel: false,\n  auth: {\n    domain: '{PLACEHOLDER}',\n    clientId: '{PLACEHOLDER}',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: ['{PLACEHOLDER}'],\n  },\n  hmr: false\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.deploy.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'{PLACEHOLDER}'"
                }
            ],
            "projects/explorer/src/environments/environment.local.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.local.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'http://localhost:3000'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.local.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-sandbox.us.auth0.com',\n    clientId: 'D8ejI5YjzaVGaxlkSOvS4NR4P91kLpyi',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.local.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
                }
            ],
            "projects/explorer/src/environments/environment.prod.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://explorer.organizer.helmahead.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: false,\n  production: true,\n  mixpanel: false,\n  auth: {\n    domain: 'helm-prod.us.auth0.com',\n    clientId: 'rMOk6HWMNk51ZFWIW5pn43iunnL6yyto',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'84898ca8909d420056544b2d33ffdb0c'"
                }
            ],
            "projects/explorer/src/environments/environment.sandbox.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.sandbox.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://sandbox.explorer.organizer.helmahead.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.sandbox.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: true,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-sandbox.us.auth0.com',\n    clientId: 'D8ejI5YjzaVGaxlkSOvS4NR4P91kLpyi',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.sandbox.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
                }
            ],
            "projects/explorer/src/environments/environment.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://staging.explorer.organizer.helmahead.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: true,\n  production: false,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-staging.us.auth0.com',\n    clientId: 'BYjmdIqgpSnVrIZLSmldUCvPVdwZzGpD',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
                }
            ],
            "projects/explorer/src/environments/environment.staging.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.staging.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://staging.explorer.organizer.helmahead.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.staging.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiURL: api,\n  trackingNumber: track,\n  enableTimers: false,\n  production: true,\n  mixpanel: true,\n  auth: {\n    domain: 'helm-staging.us.auth0.com',\n    clientId: 'BYjmdIqgpSnVrIZLSmldUCvPVdwZzGpD',\n    audience: 'http://helmteam.us',\n    redirectUri: window.location.origin,\n  },\n  httpInterceptor: {\n    allowedList: [api + '/*'],\n  },\n  hmr: false\n}"
                },
                {
                    "name": "track",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/environments/environment.staging.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'cd5f22344c2ba0be1dd3964f898988c8'"
                }
            ],
            "infrastructure/bin/ci-infrastructure.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/ci-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new cdk.App()"
                }
            ],
            "infrastructure/bin/dev-infrastructure.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/dev-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new cdk.App()"
                },
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/dev-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getAppEnvironment('sandbox')"
                },
                {
                    "name": "appInfra",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/dev-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AppInfrastructureStack(app, `${CONSTANTS.stackPrefix}-sandbox`, appConfig)"
                }
            ],
            "infrastructure/bin/frontend-infrastructure.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/frontend-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new cdk.App()"
                },
                {
                    "name": "sandboxApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/frontend-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FrontendStack(app, `${CONSTANTS.stackPrefix}-frontend-sandbox`, {\n    env: CONSTANTS.sandbox,\n    stage: 'sandbox',\n    hostedZone: sandboxDns.domain,\n})"
                },
                {
                    "name": "sandboxDns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/frontend-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new DnsInfrastructureStack(app, `${CONSTANTS.stackPrefix}-frontend-dns-sandbox`, getDnsEnvironment('sandbox'))"
                }
            ],
            "infrastructure/bin/app-infrastructure.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/app-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new cdk.App()"
                },
                {
                    "name": "productionAppConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/app-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getAppEnvironment('production')"
                },
                {
                    "name": "productionAppInfra",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/app-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AppInfrastructureStack(app, `${CONSTANTS.stackPrefix}-production`, productionAppConfig)"
                },
                {
                    "name": "productionDns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/app-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new DnsInfrastructureStack(app, `${CONSTANTS.stackPrefix}-dns-production`, getDnsEnvironment('production'))"
                },
                {
                    "name": "sandboxAppConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/app-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getAppEnvironment('sandbox')"
                },
                {
                    "name": "sandboxAppInfra",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/app-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AppInfrastructureStack(app, `${CONSTANTS.stackPrefix}-sandbox`, sandboxAppConfig)"
                },
                {
                    "name": "sandboxDns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/app-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new DnsInfrastructureStack(app, `${CONSTANTS.stackPrefix}-dns-sandbox`, getDnsEnvironment('sandbox'))"
                },
                {
                    "name": "stagingAppConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/app-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getAppEnvironment('staging')"
                },
                {
                    "name": "stagingAppInfra",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/app-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AppInfrastructureStack(app, `${CONSTANTS.stackPrefix}-staging`, stagingAppConfig)"
                },
                {
                    "name": "stagingDns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/bin/app-infrastructure.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new DnsInfrastructureStack(app, `${CONSTANTS.stackPrefix}-dns-staging`, getDnsEnvironment('staging'))"
                }
            ],
            "projects/explorer/src/app/app.module.ts": [
                {
                    "name": "auth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "env.auth"
                },
                {
                    "name": "httpInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "env.httpInterceptor"
                }
            ],
            "projects/admin/src/app/shared/services/auth/auth0-variables.ts": [
                {
                    "name": "AUTH_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/shared/services/auth/auth0-variables.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthConfig",
                    "defaultValue": "{\n  clientId: env.auth.clientId,\n  domain: env.auth.domain,\n  apiURL: env.apiURL,\n  redirectUri: env.auth.redirectUri,\n  responseType: 'token',\n}"
                }
            ],
            "projects/explorer/src/main.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => platformBrowserDynamic().bootstrapModule(AppModule)"
                }
            ],
            "projects/explorer/src/app/shared/services/bar-charts.generated.ts": [
                {
                    "name": "ChartDataDocument",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    query chartData {\n  county: explorer(level: \"county\", segment: \"US-VA-630\") {\n    segment\n    state\n    county\n    totals {\n      people\n      households\n      civic_score\n    }\n    indicators {\n      gender {\n        male {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        female {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      age {\n        c_65_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_55_to_64 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_45_to_54 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_35_to_44 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_25_to_34 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_18_to_24 {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      degree {\n        graduate {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        bachelors {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        some_college {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        less_than_high_school {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n      income {\n        c_125k_plus {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_75_to_125k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_50_to_75k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30_to_50k {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n        c_30k_or_less {\n          total\n          civic_score\n          models {\n            civic_scores {\n              most_engaged\n              active_participant\n              participant\n              occasional_participant\n              least_engaged\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `"
                }
            ],
            "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts": [
                {
                    "name": "compareDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] The state of the compare dropdown (because I\\'m lazy)',\n  props<{ compareDropdown: string }>(),\n)"
                },
                {
                    "name": "filterExplorerApplied",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] Filter ExplorerFilterss Success',\n  props<{ filters: FilterOption }>(),\n)"
                },
                {
                    "name": "filterExplorerApplyButtonClicked",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] Apply filters',\n  props<{ applyButtonClicked: boolean }>(),\n)"
                },
                {
                    "name": "filterExplorerApplyFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] Apply filters',\n  props<{ applyFilters: boolean }>(),\n)"
                },
                {
                    "name": "filterExplorerCommunityUpdated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] When a community is updated',\n  props<{ communityUpdated: boolean }>(),\n)"
                },
                {
                    "name": "filterExplorerSaveCommunityActive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] Is the save button active',\n  props<{ saveButtonActive: boolean }>(),\n)"
                },
                {
                    "name": "filterExplorerSaveCommunityClicked",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] Is the save button was clicked',\n  props<{ saveButtonClicked: boolean }>(),\n)"
                },
                {
                    "name": "filterExplorerSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] Filter is selected but not applied',\n  props<{ selected: boolean }>(),\n)"
                },
                {
                    "name": "filterStringifiedFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] Apply stringified filters',\n  props<{ stringifiedFilters: string }>(),\n)"
                },
                {
                    "name": "savedCommunitySelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] When a community is selected',\n  props<{ communitySelected: boolean }>(),\n)"
                },
                {
                    "name": "stateChartsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] Chart data for selected state (because I\\'m lazy)',\n  props<{ stateChart: any }>(),\n)"
                },
                {
                    "name": "usChartsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerFilters] Chart data for US national (because I\\'m lazy)',\n  props<{ usChart: any[] }>(),\n)"
                }
            ],
            "infrastructure/lib/config.ts": [
                {
                    "name": "CONSTANTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/lib/config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    sandbox:  { account: '552593679126', region: 'us-east-1' },\n    staging:  { account: '343567461217', region: 'us-east-1' },\n    production:  { account: '020931949237', region: 'us-east-1' },\n    tld: domain,\n    subdomain:  `${subdomain}.${domain}`,\n    version: process.env.BITBUCKET_COMMIT || 'latest',\n    serviceName: 'front', // TODO: Change me to service name\n    stackPrefix: 'HelmOrganizerFrontends', // TODO: Change me and match me in bitbucketpipeline\n}"
                },
                {
                    "name": "domain",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/lib/config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'helmahead.com'"
                },
                {
                    "name": "subdomain",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "infrastructure/lib/config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'organizer'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/admin/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/explorer/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/forms/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/forms/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/forms/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/org-comp-lib/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/org-comp-lib/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/org-comp-lib/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/explorer/src/app/shared/services/communities.service.ts": [
                {
                    "name": "CREATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/services/communities.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n  mutation CreateCommunity($input: CommunityInput!){\n    createCommunity(input: $input) {\n      name\n      description\n      notes\n      status\n    }\n  }\n`"
                },
                {
                    "name": "DELETE_COMMUNITY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/services/communities.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n  mutation DeleteCommunity($input: CommunityInput!) {\n    deleteCommunity(input: $input)\n  }\n`"
                },
                {
                    "name": "GET_ALL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/services/communities.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n  query ListCommunities($accountId: ID!){\n    listCommunities(accountId: $accountId) {\n      uuid\n      name\n      description\n      notes\n      selections\n      criteriaFilters\n      geoFilters\n    }\n  }\n`"
                },
                {
                    "name": "UPDATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/services/communities.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n  mutation UpdateCommunity($input: CommunityInput!){\n    updateCommunity(input: $input) {\n      name\n      description\n      notes\n      status\n    }\n  }\n`"
                }
            ],
            "projects/forms/src/graphql/graphql.service.ts": [
                {
                    "name": "Document",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    {\n  forms(first: 2) {\n    edges {\n      node {\n        name\n        uuid\n        organizationUuid\n        status\n        createdBy\n        createdAt\n        updatedAt\n        description\n        content\n      }\n    }\n  }\n}\n    `"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "projects/forms/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/forms/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "projects/forms/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/forms/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.selectors.ts": [
                {
                    "name": "filterList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(listSelectedFilter, selectAll => selectAll)"
                },
                {
                    "name": "listSelectedFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<FilterState>(explorerFiltersFeatureKey)"
                }
            ],
            "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.actions.ts": [
                {
                    "name": "geoFilterExplorerApplied",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerGeoFilters] Geo-Filter ExplorerFilters Success',\n  props<{ geoFilters: any }>(),\n)"
                },
                {
                    "name": "geoFilterExplorerSaved",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ExplorerGeoFilters] Geo-Filter ExplorerFilters Saved',\n  props<{ geoFiltersSaved: any }>(),\n)"
                }
            ],
            "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.selectors.ts": [
                {
                    "name": "geoFilterList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(listSelectedGeoFilter, geoSelectAll => geoSelectAll)"
                },
                {
                    "name": "listSelectedGeoFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GeoFilterState>(explorerGeoFilterFeatureKey)"
                }
            ],
            "projects/explorer/src/app/shared/services/geographic.service.ts": [
                {
                    "name": "GET_ALL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/services/geographic.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n  query {\n    segment {\n      id\n      name\n      segments {\n          counties {\n              id\n              name\n          }\n      }\n    }\n  }\n`"
                }
            ],
            "projects/explorer/src/app/shared/services/account.service.ts": [
                {
                    "name": "GET_ALL_ACCOUNTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/services/account.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\nquery {\n  listAccounts {\n    uuid\n    name\n    segment\n    status\n  }\n}\n`"
                }
            ],
            "projects/explorer/src/app/shared/services/intercom.service.ts": [
                {
                    "name": "GET_HASH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/services/intercom.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\nquery GetHash($email: String!){\n  getIntercomHash(email: $email)\n}\n`"
                }
            ],
            "projects/explorer/src/hmr.ts": [
                {
                    "name": "hmrBootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/hmr.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(module: any, bootstrap: () => Promise<NgModuleRef<any>>) => {\n  let ngModule: NgModuleRef<any>;\n  module.hot.accept();\n  bootstrap().then(mod => ngModule = mod);\n  module.hot.dispose(() => {\n    const appRef: ApplicationRef = ngModule.injector.get(ApplicationRef);\n    const elements = appRef.components.map(c => c.location.nativeElement);\n    const makeVisible = createNewHosts(elements);\n    ngModule.destroy();\n    makeVisible();\n  });\n}"
                }
            ],
            "projects/admin/src/app/login/store/reducers/login.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginState",
                    "defaultValue": "{\n  success: false,\n  failure: false,\n}"
                },
                {
                    "name": "loginFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'login'"
                },
                {
                    "name": "loginReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n\n  on(fromActions.loginSuccess, state => ({\n    ...state,\n    success: true,\n    failure: false,\n  })),\n\n  on(fromActions.loginFailure, (state, {error}) => ({\n    ...state,\n    success: false,\n    failure: true,\n    error,\n  })),\n)"
                }
            ],
            "src/stories/examples/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "projects/explorer/src/app/shared/stores/state-store/explorer.selector.ts": [
                {
                    "name": "listStatesState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ExplorerState>(explorersFeatureKey)"
                },
                {
                    "name": "statesList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(listStatesState, selectAll)"
                }
            ],
            "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts": [
                {
                    "name": "loadCounties",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Explorer/API] Update Explorer',\n  props<{ states: Update<any> }>(),\n)"
                },
                {
                    "name": "loadExplorersStates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Explorer US Map States Component] Load Explorers States ',\n)"
                },
                {
                    "name": "loadExplorersStatesFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Explorer State Effect] Load Explorers States For Map Failure',\n  props<{ error: any }>(),\n)"
                },
                {
                    "name": "loadExplorersStatesSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Explorer State Effect] Load Explorers States Success',\n  props<{ states: StateModel[] }>(),\n)"
                }
            ],
            "src/stories/examples/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/examples/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/admin/src/app/login/store/actions/login.actions.ts": [
                {
                    "name": "loginFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/login/store/actions/login.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Login] Login failure',\n  props<{ error: LoginErrorResponse }>(),\n)"
                },
                {
                    "name": "loginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/login/store/actions/login.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Login] Login success')"
                }
            ],
            "projects/admin/src/app/store/reducers/index.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production ? [] : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\n  user: userReducer,\n  login: loginReducer,\n}"
                }
            ],
            "projects/admin/src/app/utils/input.ts": [
                {
                    "name": "passwordValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/utils/input.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(control: FormControl): { [s: string]: boolean } => {\n  const value: string = (control.value as string) || '';\n  const validator: { [s: string]: boolean } = {};\n\n  if (value.length < 8) {\n    validator.length = true;\n  }\n  if (!/[`!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/.test(value)) {\n    validator.special = true;\n  }\n  if (!/\\d/.test(value)) {\n    validator.num = true;\n  }\n  if (!/[a-z]/.test(value)) {\n    validator.lowercase = true;\n  }\n  if (!/[A-Z]/.test(value)) {\n    validator.uppercase = true;\n  }\n\n  return validator;\n}",
                    "rawdescription": "Custom validator to check if the passwords match the requirements",
                    "description": "<p>Custom validator to check if the passwords match the requirements</p>\n"
                }
            ],
            "src/stories/atomics/example.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/atomics/example.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/atomics/example.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<OrgCompLibComponent>",
                    "defaultValue": "(args: OrgCompLibComponent) => ({\n  props: args,\n})"
                }
            ],
            "projects/admin/src/app/store/selectors/user.selectors.ts": [
                {
                    "name": "selectActivePendingOrganizations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectAllOrganizations,\n  (orgs: Organization[]) => orgs.filter(org => org.status === StatusEnum.Active || org.status === StatusEnum.Pending))"
                },
                {
                    "name": "selectAllOrganizationEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectUserState, fromUser.selectEntities)"
                },
                {
                    "name": "selectAllOrganizations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectUserState, fromUser.selectAll)"
                },
                {
                    "name": "selectCurrentOrganization",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectUserState, selectAllOrganizationEntities,\n  (user: fromUser.UserState, orgs: Dictionary<Organization>) => orgs[user.selectedOrganizationUuid])"
                },
                {
                    "name": "selectCurrentOrganizationUuid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectUserState, (user: fromUser.UserState) => user.selectedOrganizationUuid)"
                },
                {
                    "name": "selectIsHelmAdmin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectCurrentOrganization,\n  (currOrg: Organization | undefined) => {\n    let isHelmAdmin = false;\n    // Check if the current organization is the helm organization by checking for a parent organization uuid\n    if (!currOrg?.organizationUuid) {\n      isHelmAdmin = true;\n    }\n    return isHelmAdmin;\n  })"
                },
                {
                    "name": "selectOrganizationByUuid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(orgUuid: string): MemoizedSelector<object, Organization | undefined> =>\n  createSelector(selectAllOrganizationEntities, (orgs: Dictionary<Organization>) => orgs[orgUuid])"
                },
                {
                    "name": "selectOrganizationsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectUserState, fromUser.selectTotal)"
                },
                {
                    "name": "selectUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectUserState, (user: fromUser.UserState) => user)"
                },
                {
                    "name": "selectUserState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/user.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromUser.UserState>(\n  fromUser.userFeatureKey,\n)"
                }
            ],
            "projects/admin/src/app/login/store/selectors/login.selectors.ts": [
                {
                    "name": "selectLoginFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/login/store/selectors/login.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectLoginState, (state: fromLogin.LoginState) =>\n  ({ failure: state.failure, error: state.error }))"
                },
                {
                    "name": "selectLoginState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/login/store/selectors/login.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromLogin.LoginState>(\n  fromLogin.loginFeatureKey,\n)"
                },
                {
                    "name": "selectLoginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/login/store/selectors/login.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectLoginState, (state: fromLogin.LoginState) => state.success)"
                }
            ],
            "projects/admin/src/app/store/selectors/app.selectors.ts": [
                {
                    "name": "selectLoginOrgSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/store/selectors/app.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(fromLoginSelectors.selectLoginState, fromUserSelectors.selectUserState,\n  (loginState: fromLogin.LoginState, userState: fromUser.UserState) => loginState.success && userState.addOrgsSuccess)"
                }
            ],
            "projects/admin/src/app/graphql.module.ts": [
                {
                    "name": "uri",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/app/graphql.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`${environment.apiURL}/graphql`"
                }
            ],
            "projects/explorer/src/app/graphql.module.ts": [
                {
                    "name": "uri",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/graphql.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "uriHost + '/graphql'"
                },
                {
                    "name": "uriHost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/explorer/src/app/graphql.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "''"
                }
            ]
        },
        "groupedFunctions": {
            "projects/admin/src/app/graphql.module.ts": [
                {
                    "name": "createApollo",
                    "file": "projects/admin/src/app/graphql.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpLink",
                            "type": "HttpLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ApolloClientOptions<any>",
                    "jsdoctags": [
                        {
                            "name": "httpLink",
                            "type": "HttpLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/explorer/src/app/graphql.module.ts": [
                {
                    "name": "createApollo",
                    "file": "projects/explorer/src/app/graphql.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpLink",
                            "type": "HttpLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ApolloClientOptions<any>",
                    "jsdoctags": [
                        {
                            "name": "httpLink",
                            "type": "HttpLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "infrastructure/lib/config.ts": [
                {
                    "name": "getAppEnvironment",
                    "file": "infrastructure/lib/config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "stage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "AppInfrastructureStackProps",
                    "jsdoctags": [
                        {
                            "name": "stage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCiEnvironment",
                    "file": "infrastructure/lib/config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "stage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ContinuousIntegrationInfrastructureStackProps",
                    "jsdoctags": [
                        {
                            "name": "stage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDnsEnvironment",
                    "file": "infrastructure/lib/config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "stage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DnsInfrastructureStackProps",
                    "jsdoctags": [
                        {
                            "name": "stage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/admin/src/app/shared/services/graphql/graphql.service.ts": [
                {
                    "name": "ActivityLogEnum",
                    "childs": [
                        {
                            "name": "Create",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CREATE"
                        },
                        {
                            "name": "Update",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "UPDATE"
                        },
                        {
                            "name": "Delete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DELETE"
                        },
                        {
                            "name": "Remove",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "REMOVE"
                        },
                        {
                            "name": "Suspend",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SUSPEND"
                        },
                        {
                            "name": "Activate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ACTIVATE"
                        },
                        {
                            "name": "Block",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "BLOCK"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts"
                },
                {
                    "name": "DomainTypeEnum",
                    "childs": [
                        {
                            "name": "Email",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EMAIL"
                        },
                        {
                            "name": "LandingPage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LANDING_PAGE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts"
                },
                {
                    "name": "OrganizationEnum",
                    "childs": [
                        {
                            "name": "Advocacy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ADVOCACY"
                        },
                        {
                            "name": "Agency",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AGENCY"
                        },
                        {
                            "name": "Association",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ASSOCIATION"
                        },
                        {
                            "name": "Corporate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CORPORATE"
                        },
                        {
                            "name": "Education",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EDUCATION"
                        },
                        {
                            "name": "Electoral",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ELECTORAL"
                        },
                        {
                            "name": "Foundation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FOUNDATION"
                        },
                        {
                            "name": "Mixed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MIXED"
                        },
                        {
                            "name": "Nonprofit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NONPROFIT"
                        },
                        {
                            "name": "Other",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "OTHER"
                        },
                        {
                            "name": "Pac",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PAC"
                        },
                        {
                            "name": "Philanthropy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PHILANTHROPY"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts"
                },
                {
                    "name": "StatusEnum",
                    "childs": [
                        {
                            "name": "Deleted",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DELETED"
                        },
                        {
                            "name": "Blocked",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "BLOCKED"
                        },
                        {
                            "name": "Suspended",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SUSPENDED"
                        },
                        {
                            "name": "Pending",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PENDING"
                        },
                        {
                            "name": "Active",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ACTIVE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts"
                },
                {
                    "name": "SubscriptionEnum",
                    "childs": [
                        {
                            "name": "Explorer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EXPLORER"
                        },
                        {
                            "name": "Starter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "STARTER"
                        },
                        {
                            "name": "Basic",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "BASIC"
                        },
                        {
                            "name": "Premium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PREMIUM"
                        },
                        {
                            "name": "Enterprise",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ENTERPRISE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts"
                }
            ],
            "projects/forms/src/graphql/graphql.service.ts": [
                {
                    "name": "OrderFieldName",
                    "childs": [
                        {
                            "name": "Name",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NAME"
                        },
                        {
                            "name": "Created",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CREATED"
                        },
                        {
                            "name": "Updated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "UPDATED"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/forms/src/graphql/graphql.service.ts"
                },
                {
                    "name": "OrderType",
                    "childs": [
                        {
                            "name": "Asc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ASC"
                        },
                        {
                            "name": "Desc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DESC"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/forms/src/graphql/graphql.service.ts"
                },
                {
                    "name": "Status",
                    "childs": [
                        {
                            "name": "Deleted",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DELETED"
                        },
                        {
                            "name": "Draft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DRAFT"
                        },
                        {
                            "name": "Published",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PUBLISHED"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/forms/src/graphql/graphql.service.ts"
                }
            ],
            "projects/explorer/src/app/admin/admin.component.ts": [
                {
                    "name": "Status",
                    "childs": [
                        {
                            "name": "Active",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Unverified",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Blocked",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/explorer/src/app/admin/admin.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/forms/src/graphql/graphql.service.ts": [
                {
                    "name": "_Service",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "CreateFormInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Exact",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                },
                {
                    "name": "Form",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "FormConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "FormEdge",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "FormFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "InputMaybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Maybe<T>",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "MakeMaybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "MakeOptional",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "Maybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "T | null",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "Mutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationCreateFormArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "OrderByInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "PageInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Query",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryFormArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryFormsArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Scalars",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>All built-in and custom scalars, mapped to their actual values</p>\n",
                    "kind": 181
                },
                {
                    "name": "Unnamed_1_Query",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Unnamed_1_QueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/forms/src/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/admin/src/app/shared/services/graphql/graphql.service.ts": [
                {
                    "name": "AcceptOrganizationUserInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "AcceptOrganizationUserInputUser",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "AcceptOrganizationUserInviteMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "AcceptOrganizationUserInviteMutationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "AssignRolePermissionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "AssignUserPermissionInputType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "CreateOrganizationHostnameInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "CreateOrganizationInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "CreateOrganizationMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "CreateOrganizationMutationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "CreateRoleInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "DeleteOrganizationHostnameInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "DeleteOrganizationUserMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "DeleteOrganizationUserMutationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "DeleteRoleInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "DisableOrganizationMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "DisableOrganizationMutationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "EnableOrganizationMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "EnableOrganizationMutationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "Exact",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                },
                {
                    "name": "FindMembersQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "FindMembersQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "FindMyOrganizationsQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "FindMyOrganizationsQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "FindOrganizationsQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "FindOrganizationsQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "FindOrganizationsWithRolesQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "FindOrganizationsWithRolesQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "FindOrganizationTreesQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "FindOrganizationTreesQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "FindRolesQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "FindRolesQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "FindUserQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "FindUserQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "InviteOrganizationUserInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "InviteOrganizationUserInputUser",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "InviteOrganizationUserInvitationErrors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "InviteOrganizationUserPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "InviteOrganizationUsersEmailRoleInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "InviteOrganizationUsersInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MakeMaybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "MakeOptional",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "Maybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "T | null",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "MigratePayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Mutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationAcceptOrganizationUserInviteArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationAssignRolePermissionArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationAssignUserPermissionArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationBlockOrganizationUserArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationBlockUserArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationCreateOrganizationArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationCreateOrganizationHostnameArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationCreateRoleArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationDeleteOrganizationHostnameArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationDeleteOrganizationUserArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationDeleteRoleArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationDeleteUserArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationDisableOrganizationArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationDisableUserArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationEnableOrganizationArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationEnableUserArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationInviteOrganizationUsersArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationRequestUserPasswordResetArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationResetUserPasswordArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationUpdateOrganizationUserArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationUpdateRoleArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MutationUpdateUserArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Query",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryMigrateArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryOrganizationArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryOrganizationHostnameArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryOrganizationHostnamesArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryOrganizationsArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryPermissionArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryRoleArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryRolesArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryUserArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryUsersArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryValidateAssociationTokenArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "QueryValidatePasswordResetTokenArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "RequestUserPasswordResetMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "RequestUserPasswordResetMutationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "ResetUserPasswordInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "ResetUserPasswordMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "ResetUserPasswordMutationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "Scalars",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>All built-in and custom scalars, mapped to their actual values</p>\n",
                    "kind": 181
                },
                {
                    "name": "SchemaActivityLog",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaOrganization",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaOrganizationHostname",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaOrganizationNested1",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaOrganizationNested2",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaOrganizationNested3",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaOrganizationNested4",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaOrganizationNested5",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaOrganizationPermission",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaOrganizationUser",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaPermission",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaRole",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaRolePermission",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaUser",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SchemaUserPermission",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "SendInvitationMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "SendInvitationMutationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "UpdateOrganizationUserInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "UpdateOrganizationUserMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "UpdateOrganizationUserMutationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "UpdateRoleInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "UpdateUserInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "UpdateUserMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "UpdateUserMutationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "ValidateAssociationTokenPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "ValidateAssociationTokenQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "ValidateAssociationTokenQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "ValidatePasswordResetTokenQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "ValidatePasswordResetTokenQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exact<literal type>",
                    "file": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/explorer/src/types.ts": [
                {
                    "name": "AgeCategories",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "CivicModel",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Datapoint",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "DegreeCategories",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Exact",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                },
                {
                    "name": "GenderCategories",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "IncomeCategories",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Indicators",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "MakeMaybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "MakeOptional",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "MaritalCategories",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Maybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "T | null",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "Models",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "RootQueryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "RootQueryTypeCacheArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "RootQueryTypeExplorerArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Scalars",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>All built-in and custom scalars, mapped to their actual values</p>\n",
                    "kind": 181
                },
                {
                    "name": "Segment",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Total",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/explorer/src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/explorer/src/app/shared/services/map-charts.generated.ts": [
                {
                    "name": "AllDataQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "AllDataQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Types.Exact<literal type>",
                    "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "Exact",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                },
                {
                    "name": "MakeMaybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "MakeOptional",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "Maybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "T | null | undefined",
                    "file": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/explorer/src/app/shared/services/bar-charts.generated.ts": [
                {
                    "name": "ChartDataQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "ChartDataQueryVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Types.Exact<literal type>",
                    "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "Exact",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                },
                {
                    "name": "MakeMaybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "MakeOptional",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "Maybe",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "T | null | undefined",
                    "file": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "../../projects/admin/src/app/app.module#AdminModule"
                    },
                    {
                        "path": "",
                        "loadChildren": "../../projects/explorer/src/app/app.module#ExplorerModule"
                    },
                    {
                        "path": "",
                        "loadChildren": "../../projects/forms/src/app/app.module#FormsModule"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "infrastructure/bin/app-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/app-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productionAppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/app-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productionAppInfra",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/app-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productionDns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/app-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sandboxAppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/app-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sandboxAppInfra",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/app-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sandboxDns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/app-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stagingAppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/app-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stagingAppInfra",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/app-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stagingDns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/ci-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/dev-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/dev-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/dev-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appInfra",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/frontend-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/frontend-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sandboxApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/bin/frontend-infrastructure.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sandboxDns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/app-infrastructure-stack.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppInfrastructureStack",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/app-infrastructure-stack.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppInfrastructureStackProps",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/ci-infrastructure-stack.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContinuousIntegrationInfrastructureStack",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/ci-infrastructure-stack.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContinuousIntegrationInfrastructureStackProps",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getAppEnvironment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCiEnvironment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDnsEnvironment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONSTANTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "domain",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subdomain",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/constructs/cloudfront-s3-frontend.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SinglePageApp",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/constructs/cloudfront-s3-frontend.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CustomDomainProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/constructs/cloudfront-s3-frontend.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SinglePageAppProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/constructs/dns-validated-ssl-certificate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SinglePageApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/constructs/lambda-backed-api-gateway.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LambdaApi",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/constructs/lambda-backed-api-gateway.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "apiGatewayCustomDomainProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/constructs/lambda-backed-api-gateway.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LambdaApiProps",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/constructs/lambda-serverless-postgres.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LambdaWithServerlessPostgres",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/constructs/queue-backed-lambda.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QueueBackedLambda",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/dns-infrastructure-stack.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DnsInfrastructureStack",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/dns-infrastructure-stack.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DnsInfrastructureStackProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/frontend-infrastructure-stack.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FrontendStack",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "infrastructure/lib/frontend-infrastructure-stack.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FrontendStackProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/core/base/base.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/graphql.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createApollo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/graphql.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uri",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 33,
                "coverageCount": "4/12",
                "status": "medium"
            },
            {
                "filePath": "projects/admin/src/app/login/models/login-error-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginErrorResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/recover-password/recover-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecoverPasswordComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/request-sent/request-sent.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RequestSentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/reset-password/reset-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordComponent",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/store/reducers/login.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/store/selectors/login.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoginFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/store/selectors/login.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoginState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/login/store/selectors/login.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/logout/logout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoutComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/accounts/account-collapse/account-collapse.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountCollapseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/accounts/account.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Account",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/accounts/accounts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/members/member-row/member-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemberRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/members/member.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Member",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/members/member.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrganizationUsers",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/members/members.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MembersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/permissions/permission-card/permission-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PermissionCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/permissions/permission.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Permission",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/permissions/permissions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PermissionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/admin/components/permissions/sub-permission/sub-permission.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubPermissionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/invite/components/assign-roles/assign-roles.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AssignRolesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/invite/components/invitation-sent/invitation-sent.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvitationSentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/invite/components/invite-members/invite-members.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InviteMembersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/invite/invite.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InviteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/invite/invite.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Invite",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/join/join.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JoinComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/organization/create-organization/create-organization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateOrganizationComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/organization/organization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrganizationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/pages/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/select-organization/select-organization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectOrganizationComponent",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "projects/admin/src/app/select-organization/services/organization.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrganizationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/components/password-validator/password-validator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordValidatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/models/organization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Organization",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/models/role.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Role",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/auth/auth-guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/auth/auth0-variables.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/auth/auth0-variables.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AcceptOrganizationUserInviteGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CreateOrganizationGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DeleteOrganizationUserGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DisableOrganizationGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EnableOrganizationGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FindMembersGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FindMyOrganizationsGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FindOrganizationsGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FindOrganizationsWithRolesGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FindOrganizationTreesGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FindRolesGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FindUserGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RequestUserPasswordResetGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ResetUserPasswordGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SendInvitationGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UpdateOrganizationUserGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UpdateUserGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidateAssociationTokenGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidatePasswordResetTokenGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AcceptOrganizationUserInviteDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CreateOrganizationDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteOrganizationUserDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisableOrganizationDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EnableOrganizationDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FindMembersDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FindMyOrganizationsDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FindOrganizationsDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FindOrganizationsWithRolesDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FindOrganizationTreesDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FindRolesDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FindUserDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RequestUserPasswordResetDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResetUserPasswordDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SendInvitationDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UpdateOrganizationUserDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UpdateUserDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ValidateAssociationTokenDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ValidatePasswordResetTokenDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/shared/services/user/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/admin/src/app/store/actions/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addSelectedOrgUuid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/actions/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addUserInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/actions/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestOrganizations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/actions/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestOrganizationsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/actions/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestOrganizationsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/actions/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestUserInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/effects/app.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/effects/user.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserState",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/reducers/user.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/app.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoginOrgSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActivePendingOrganizations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllOrganizationEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllOrganizations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentOrganization",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentOrganizationUuid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsHelmAdmin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOrganizationByUuid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOrganizationsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/store/selectors/user.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/app/utils/input.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/admin/src/environments/environment.local.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.local.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.local.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.sandbox.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.sandbox.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.sandbox.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.staging.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.staging.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.staging.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/accounts/account.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AccountInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/accounts/accounts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/admin/admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/45",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/admin/admin.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Account",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/admin/admin.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "auth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/55",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/faq/faq.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FaqComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/graphql.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createApollo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/graphql.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uri",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/graphql.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uriHost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/maintenance/maintenance.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MaintenanceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/community-save-drawer/community-save-drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommunitySaveDrawerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/compare-charts/compare-charts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CompareChartsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/filter-box/filter-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/filter-box/filter-box.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Filter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/geo-filters-drawer/geo-filters-drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GeoFiltersDrawerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/geo-filters-drawer/tree-region.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeRegion",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/horizontal-bar-chart/horizontal-bar-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorizontalBarChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/loading-spinner/loading-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/logout/logout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/my-communities-drawer/my-communities-drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyCommunitiesDrawerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/search-box/search-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/selection-summary/selection-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectionSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/selection-tool-tagbox/selection-tool-tagbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectionToolTagboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/us-map-congressional-districts/us-map-congressional-districts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsMapCongressionalDistrictsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/us-map-states/us-map-states.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsMapStatesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/us-map/map-selection.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MapSelection",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/components/us-map/us-map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsMapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/models/filters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardSelectedFiltersValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/models/filters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/models/filters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/models/geo-filters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GeoFilterModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/models/map-service.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MapServiceModel",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/models/states.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateModel",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/pipes/thousand-suff.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ThousandSuffixesPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/account-selection.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AccountSelectionGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/account.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_ALL_ACCOUNTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/admin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AdminService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/admin.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccountResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/admin.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserResponse",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/auth-maintenance.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuardMaintenance",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartDataGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AgeCategories",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CivicModel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Datapoint",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DegreeCategories",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GenderCategories",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IncomeCategories",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Indicators",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MaritalCategories",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Models",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootQueryType",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootQueryTypeCacheArgs",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootQueryTypeExplorerArgs",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Scalars",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Segment",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Total",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/bar-charts.generated.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChartDataDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/chart-data-gql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartDataGqlService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/charts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/communities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommunitiesService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/communities.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CREATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/communities.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_COMMUNITY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/communities.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_ALL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/communities.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/current-user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CurrentUserService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/geographic.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GeographicService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/geographic.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_ALL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/highchart-map.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HighchartMapService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/intercom.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IntercomService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/intercom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Window",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/intercom.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_HASH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AllDataGQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AgeCategories",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CivicModel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Datapoint",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DegreeCategories",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GenderCategories",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IncomeCategories",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Indicators",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MaritalCategories",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Models",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootQueryType",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootQueryTypeCacheArgs",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootQueryTypeExplorerArgs",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Scalars",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Segment",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Total",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map-charts.generated.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllDataDocument",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/map.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MapService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/services/mixpanel.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MixpanelService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "compareDropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterExplorerApplied",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterExplorerApplyButtonClicked",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterExplorerApplyFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterExplorerCommunityUpdated",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterExplorerSaveCommunityActive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterExplorerSaveCommunityClicked",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterExplorerSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterStringifiedFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "savedCommunitySelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stateChartsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "usChartsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExplorerFiltersEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "explorerFiltersFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/filter-store/explorer-filters.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listSelectedFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "geoFilterExplorerApplied",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "geoFilterExplorerSaved",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExplorerGeoFilterEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GeoFilterState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "explorerGeoFilterFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "geoFilterList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/geo-filter-store/explorer-geo-filter.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listSelectedGeoFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCounties",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadExplorersStates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadExplorersStatesFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadExplorersStatesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExplorerEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExplorerState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "explorersFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listStatesState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/app/shared/stores/state-store/explorer.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statesList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/core/base.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.deploy.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.deploy.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.deploy.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.hmr.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.hmr.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.hmr.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.local.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.local.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.local.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.sandbox.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.sandbox.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.sandbox.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.staging.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.staging.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.staging.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "track",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/hmr.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hmrBootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/explorer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/forms/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/forms/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/forms/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/forms/src/graphql/graphql.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GQL",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/forms/src/graphql/graphql.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Document",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/forms/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/forms/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/org-comp-lib/src/lib/org-comp-lib.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrgCompLibComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/org-comp-lib/src/lib/org-comp-lib.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrgCompLibService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/org-comp-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/org-comp-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/atomics/example.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/atomics/example.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/examples/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}